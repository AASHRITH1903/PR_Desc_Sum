{
  "elastic/elasticsearch_37980": {
    "id": "elastic/elasticsearch_37980",
    "body": "'Eclipse build files were missing so .eclipse project files were not being generated.\\r\\nCloses #37973\\r\\n\\r\\n'",
    "cms": [
      "'Added missing eclipse-build.gradle files\\n\\nCloses #fix/37973'"
    ],
    "commits": {
      "'3e10ee798c932cc1cab1ea6ca679417408fc1416'": {
        "cm": "'Added missing eclipse-build.gradle files\\n\\nCloses #fix/37973'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37964": {
    "id": "elastic/elasticsearch_37964",
    "body": "'This change adds a _meta field storing the version in which\\r\\nthe index mappings were last updated to the 3 ML indices\\r\\nthat didn't previously have one:\\r\\n\\r\\n- .ml-annotations\\r\\n- .ml-meta\\r\\n- .ml-notifications\\r\\n\\r\\nAll other ML indices already had such a _meta field.\\r\\n\\r\\nThis field will be useful if we ever need to automatically\\r\\nupdate the index mappings during a future upgrade.'",
    "cms": ["'[ML] Add meta information to all ML indices'"],
    "commits": {
      "'df18d6b7d9d2236d1512f7476301ecda15b20401'": {
        "cm": "'[ML] Add meta information to all ML indices'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37961": {
    "id": "elastic/elasticsearch_37961",
    "body": "'While working in #33888 I stumbled upon a trivial test case in which a no-op delete operation is executed on an empty index and this index is later closed and reopened as frozen, making the assertion added in #37426 to trip:\\r\\n\\r\\n```java\\r\\njava.lang.AssertionError: max seq. no. [-1] does not match [5]\\r\\n\\tat __randomizedtesting.SeedInfo.seed([B5AAFD71AAC09533]:0)\\r\\n\\tat org.elasticsearch.index.engine.ReadOnlyEngine.assertMaxSeqNoEqualsToGlobalCheckpoint(ReadOnlyEngine.java:141)\\r\\n\\tat org.elasticsearch.index.engine.ReadOnlyEngine.<init>(ReadOnlyEngine.java:115)\\r\\n\\tat org.elasticsearch.index.engine.FrozenEngine.<init>(FrozenEngine.java:75)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.innerOpenEngineAndTranslog(IndexShard.java:1431)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.openEngineAndRecoverFromTranslog(IndexShard.java:1384)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.internalRecoverFromStore(StoreRecovery.java:424)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromStore$0(StoreRecovery.java:95)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:302)\\r\\n\\tat org.elasticsearch.index.shard.StoreRecovery.recoverFromStore(StoreRecovery.java:93)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.recoverFromStore(IndexShard.java:1678)\\r\\n\\tat org.elasticsearch.index.shard.IndexShard.lambda$startRecovery$6(IndexShard.java:2228)\\r\\n```\\r\\n\\r\\nThe assertion trips because the Translog is synced with max seq=X and global checkpoint=Y but those information are not flushed into the Lucene commit as no real operation has been executed and the IndexWriter has no uncommited changes. \\r\\n\\r\\nThe flushes executed by `TransportVerifyShardBeforeCloseAction` and `IndexShard.close()` won't persist the max seq no and global checkpoint in the Lucene commit, and when the ReadOnlyEngine is opened it will reload max seq no from the last Lucene commit and will detect a mismatch with the global checkpoint loaded from the translog.\\r\\n\\r\\nThis pull request changes the  `TransportVerifyShardBeforeCloseAction` so that it forces a flush when the Translog.isSyncNeeded() method returns true, indicating that the global checkpoint != the last synced globalcheckpoint and also forces a Lucene commit with the same user data. Or we could always force the flush too.\\r\\n\\r\\n'",
    "cms": ["'Close Index API should force a flush if a sync is needed'"],
    "commits": {
      "'82fc65936cc65fd3e764f1c18f5460dcc800d75e'": {
        "cm": "'Close Index API should force a flush if a sync is needed'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37945": {
    "id": "elastic/elasticsearch_37945",
    "body": "'Adding release highlights for ES.'",
    "cms": [
      "'add es release highlights'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'"
    ],
    "commits": {
      "'6d643fd6cf38dbbf7a0a201c87901a299b5f20e9'": {
        "cm": "'add es release highlights'",
        "comments": []
      },
      "'0f82c284d002eb8efe8dab60f37891266850ef6d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'aa36ad0f8f1ec8b2f34a1eb9dc5fcf4aa9c7c50d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'a728268833bb6a0ba637ccf73d63726c5329ede0'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'7ba43435eb7fab49970f3691d01513d31e44db07'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'c69b4a799674c091d8cb5acf460a6427ccf158b1'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'589e66d4d1cbc900fe3eab61d0b93cc8e2f61a8d'": {
        "cm": "'Update docs/reference/release-notes/highlights-6.6.0.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37943": {
    "id": "elastic/elasticsearch_37943",
    "body": "'This commit improves the example docs for contexts in painless.\\r\\n\\r\\nrelates #34829'",
    "cms": [
      "'Add painless context examples for update and update-by-query\\n\\nThis commit improves the example docs for contexts in painless.\\n\\nrelates #34829'"
    ],
    "commits": {
      "'e57ab3b0a07cafcd7adfd06a84d7cc93ee4f67b3'": {
        "cm": "'Add painless context examples for update and update-by-query\\n\\nThis commit improves the example docs for contexts in painless.\\n\\nrelates #34829'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37939": {
    "id": "elastic/elasticsearch_37939",
    "body": "'Related to https://github.com/elastic/elasticsearch/pull/36796\\r\\n\\r\\nThis PR wraps long sentences and adds the following information about the automated annotations: \\'For example, you can see annotations in {kib} for the periods where these delays occur.\\'\\r\\n\\r\\n'",
    "cms": ["'[DOCS] Wrap long sentences'", "'[DOCS] Add annotation detail'"],
    "commits": {
      "'46691f5ae2c513633830e410290401505364eab4'": {
        "cm": "'[DOCS] Wrap long sentences'",
        "comments": []
      },
      "'d7d73023720310608cd284c7e827c5437f059f0a'": {
        "cm": "'[DOCS] Add annotation detail'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37933": {
    "id": "elastic/elasticsearch_37933",
    "body": "'This commit moves the auditing of job deletion related errors\\r\\nto the final listener in the job delete action. This ensures\\r\\nany error that occurs during job deletion is audited.\\r\\n'",
    "cms": [
      "'[ML] Audit all errors during job deletion\\n\\nThis commit moves the auditing of job deletion related errors\\nto the final listener in the job delete action. This ensures\\nany error that occurs during job deletion is audited.'"
    ],
    "commits": {
      "'9b8d4cb49a6ce4157144191ace401d10f2b77e04'": {
        "cm": "'[ML] Audit all errors during job deletion\\n\\nThis commit moves the auditing of job deletion related errors\\nto the final listener in the job delete action. This ensures\\nany error that occurs during job deletion is audited.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37923": {
    "id": "elastic/elasticsearch_37923",
    "body": "'The clusterAlias member is only used in the copy constructor, to be able\\r\\nto reconstruct the fully qualified index. It is also possible to remove\\r\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
    "cms": [
      "'Remove clusterAlias instance member from QueryShardContext\\n\\nThe clusterAlias member is only used in the copy constructor, to be able\\nto reconstruct the fully qualified index. It is also possible to remove\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
      "'Merge branch 'master' into minor/query_shard_context_cluster_alias'"
    ],
    "commits": {
      "'2e8dfb1ecb380922720b0afe0fb331086818702f'": {
        "cm": "'Remove clusterAlias instance member from QueryShardContext\\n\\nThe clusterAlias member is only used in the copy constructor, to be able\\nto reconstruct the fully qualified index. It is also possible to remove\\nthe instance member and add a private constructor that accepts the already built Index object which contains the cluster alias.'",
        "comments": []
      },
      "'235f1cc2aeb3b5e54805376a87c0a3b1c0a8a71f'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'7a08371b73996bc02f5693d5cdff8dccd3e232dd'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'5e2eef250babd128d95f9c1532c690615997cf5c'": {
        "cm": "'Merge branch 'master' into minor/query_shard_context_cluster_alias'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37916": {
    "id": "elastic/elasticsearch_37916",
    "body": "'As a follow up from [discussion comment](https://github.com/elastic/elasticsearch/issues/32850#issuecomment-458064462)\\r\\nin order to keep json logs consistent the security aduit logs are renamed from `.log` to `.json`\\r\\n\\r\\nrelates #32850'",
    "cms": [
      "'rename _audit.log to _audit.json'",
      "'Merge branch 'master' into feature/audit-logging-file'",
      "'Merge branch 'master' into feature/audit-logging-file'"
    ],
    "commits": {
      "'2852ec42d6488c3380a86a91f329c6319484a3e5'": {
        "cm": "'rename _audit.log to _audit.json'",
        "comments": []
      },
      "'7659643337caec14c2e59bd3a0a2bc3699198904'": {
        "cm": "'Merge branch 'master' into feature/audit-logging-file'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'f2e9b275dd89f6bd3b1af33f3db2c90ea5599d47'": {
        "cm": "'Merge branch 'master' into feature/audit-logging-file'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // test the fields is not overwritten"
        ]
      }
    }
  },
  "elastic/elasticsearch_37913": {
    "id": "elastic/elasticsearch_37913",
    "body": "'This commit upgrades the 6.x branch to the latest snapshot of lucene 7.7.0.  This includes:\\r\\n* performance improvements at index and merge time for Points and Updateable DocValues\\r\\n* Bug fixes to Korean Tokenizer\\r\\n* StandardTokenizer can correctly tokenize emojis\\r\\n* Early termination when sorting by docid'",
    "cms": [
      "'Upgrade to lucene-7.7.0-snapshot-874ff046df'",
      "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
      "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'"
    ],
    "commits": {
      "'1bd9c87145ebe0ba75c8d881f496e0468350f112'": {
        "cm": "'Upgrade to lucene-7.7.0-snapshot-874ff046df'",
        "comments": []
      },
      "'953ad9e8dff1f2ef2dc7140848ba3fdd75504574'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'bfbd7963a8fff8c6fbad9222457c00bcc1020c06'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into lucene-upgrade'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37912": {
    "id": "elastic/elasticsearch_37912",
    "body": "'Remove `SearchShardTarget` test only constructor and replace all the usages with calls to the other constructor that accepts a `ShardId`.'",
    "cms": [
      "'Remove test only SearchShardTarget constructor'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'",
      "'Merge branch 'master' into minor/remove_search_shard_target_init'"
    ],
    "commits": {
      "'6a2d159dd8ad6205c1db2b71ebb66a8ab744e92d'": {
        "cm": "'Remove test only SearchShardTarget constructor'",
        "comments": []
      },
      "'e023f0583e06a3309d467683de2d465685aba3b9'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'2447161a8241c7a3509f9cb0fc94443fa24b4202'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'dbfe2df99e988308e67c40ea124fb5d0e383dc89'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'4a2e9c0a63a9acb38002c0a9adc5ac2f4bd87fa0'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'896630fbd4ad3ae60f7141725020404bd41dcf8a'": {
        "cm": "'Merge branch 'master' into minor/remove_search_shard_target_init'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37911": {
    "id": "elastic/elasticsearch_37911",
    "body": "'When serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\r\\nthe corresponding instance member is declared `boolean` which can never\\r\\nbe null. We also have an assert to verify that the incoming search\\r\\nrequest provides a non-null value for the flag, and a comment explaining\\r\\nthat null should be considered a bug.\\r\\n\\r\\nThis commit makes the allowPartialSearchResults method in\\r\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\r\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
    "cms": [
      "'Clean up allowPartialSearchResults serialization\\n\\nWhen serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\nthe corresponding instance member is declared `boolean` which can never\\nbe null. We also have an assert to verify that the incoming search\\nrequest provides a non-null value for the flag, and a comment explaining\\nthat null should be considered a bug.\\n\\nThis commit makes the allowPartialSearchResults method in\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'",
      "'Merge branch 'master' into minor/allow_partial_results_serialization'"
    ],
    "commits": {
      "'e4e0d1215c6a144cd0a0c9ff8d43700f9e9f3048'": {
        "cm": "'Clean up allowPartialSearchResults serialization\\n\\nWhen serializing allowPartialSearchResults to the shards through ShardSearchTransportRequest, we use an optional boolean field, though\\nthe corresponding instance member is declared `boolean` which can never\\nbe null. We also have an assert to verify that the incoming search\\nrequest provides a non-null value for the flag, and a comment explaining\\nthat null should be considered a bug.\\n\\nThis commit makes the allowPartialSearchResults method in\\nShardSearchRequest return a `boolean` rather than a `Boolean` and\\nchanges the serialization from optional to non optional, in a bw comp manner.'",
        "comments": []
      },
      "'6972427f5e720353daee756f4072646e9e4f1bd3'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'4d96f259fbd193ae4edd647d044ed5deda7fbc03'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'000e225213e02b3783ffa521d9668c18b39010a8'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'6679c19834d57ee70f4a513f5bdeaf0a62239a7f'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'e034e0bcf8ef67d882c84d03123a4bdcd5557635'": {
        "cm": "'Merge branch 'master' into minor/allow_partial_results_serialization'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37910": {
    "id": "elastic/elasticsearch_37910",
    "body": "'This change makes `:server:integTest` run with `./gradlew internalClusterTest`.\\r\\nThere's a new CI job that runs this.'",
    "cms": [
      "'Add an alias for :server:integTest so it runs as part of internalClusterTest'"
    ],
    "commits": {
      "'768765a43caa8d02c8af5a9b85645564a16b71a2'": {
        "cm": "'Add an alias for :server:integTest so it runs as part of internalClusterTest'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37904": {
    "id": "elastic/elasticsearch_37904",
    "body": "'The docs silently accept duplicate note markers (such as `<3>` here) but\\r\\nformats them in an unexpected way. This change removes this duplication so that\\r\\nthe rendered documentation looks as intended.'",
    "cms": [
      "'Fix duplicate note x-refs in mapping.asciidoc\\n\\nThe docs silently accept duplicate note markers (such as `<3>` here) but\\nformats them in an unexpected way. This change removes this duplication so that\\nthe rendered documentation looks as intended.'"
    ],
    "commits": {
      "'1b31b07585b0aeb697be9afd62eb4135f0fce44d'": {
        "cm": "'Fix duplicate note x-refs in mapping.asciidoc\\n\\nThe docs silently accept duplicate note markers (such as `<3>` here) but\\nformats them in an unexpected way. This change removes this duplication so that\\nthe rendered documentation looks as intended.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37903": {
    "id": "elastic/elasticsearch_37903",
    "body": "'We changed the `action.auto_create_index` setting to be a dynamic cluster-level\\r\\nsetting in #20274 but today the reference manual indicates that it is still a\\r\\nstatic node-level setting. This commit addresses this, and clarifies the\\r\\nsemantics of patterns that may both permit and forbid the creation of certain\\r\\nindices.\\r\\n\\r\\nRelates #7513'",
    "cms": [
      "'Document that auto_create_index is dynamic\\n\\nWe changed the `action.auto_create_index` setting to be a dynamic cluster-level\\nsetting in #20274 but today the reference manual indicates that it is still a\\nstatic node-level setting. This commit addresses this, and clarifies the\\nsemantics of patterns that may both permit and forbid the creation of certain\\nindices.\\n\\nRelates #7513'"
    ],
    "commits": {
      "'85d90a55ee8471d669a8041ec63f064bbcfaeb03'": {
        "cm": "'Document that auto_create_index is dynamic\\n\\nWe changed the `action.auto_create_index` setting to be a dynamic cluster-level\\nsetting in #20274 but today the reference manual indicates that it is still a\\nstatic node-level setting. This commit addresses this, and clarifies the\\nsemantics of patterns that may both permit and forbid the creation of certain\\nindices.\\n\\nRelates #7513'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37902": {
    "id": "elastic/elasticsearch_37902",
    "body": "'This commit introduces a sync of retention leases when a retention lease expires. As expiration of retention leases is lazy, their expiration is managed only when getting the current retention leases from the replication tracker. At this point, we callback to our full retention lease sync to sync and flush these on all shard copies. With this change, replicas do not locally manage expiration of retention leases; instead, that is done only on the primary.\\r\\n\\r\\nRelates #37165'",
    "cms": [
      "'Sync retention leases on expiration\\n\\nThis commit introduces a sync of retention leases when a retention lease\\nexpires. As expiration of retention leases is lazy, their expiration is\\nmanaged only when getting the current retention leases from the\\nreplication tracker. At this point, we callback to our full retention\\nlease sync to sync and flush these on all shard copies. With this\\nchange, replicas do not locally manage expiration of retention leases;\\ninstead, that is done only on the primary.'",
      "'Add sync assertion on replica'",
      "'Fix checkstyle'"
    ],
    "commits": {
      "'3b891d1e524c8fd9f291ff3631bfe40299cb691d'": {
        "cm": "'Sync retention leases on expiration\\n\\nThis commit introduces a sync of retention leases when a retention lease\\nexpires. As expiration of retention leases is lazy, their expiration is\\nmanaged only when getting the current retention leases from the\\nreplication tracker. At this point, we callback to our full retention\\nlease sync to sync and flush these on all shard copies. With this\\nchange, replicas do not locally manage expiration of retention leases;\\ninstead, that is done only on the primary.'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here"
        ]
      },
      "'58225cbdfa6f3ff4951ec97b722ef5fb612ff77b'": {
        "cm": "'Add sync assertion on replica'",
        "comments": [
          "+            // check current retention leases have been synced to all replicas"
        ]
      },
      "'5de2acb4f40eaf90c72b248b436a2de1231388f2'": {
        "cm": "'Fix checkstyle'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37899": {
    "id": "elastic/elasticsearch_37899",
    "body": "'When a shard on a data node finished to recover, the data node sends a `StartedShardEntry` request to the master node. This request contains the shard id, an allocation id and the id of the node that holds the shard to start. This request is then processed by the master node which checks that the shard exists in the cluster state with the same allocation id as in the request.\\r\\n\\r\\nThis pull request changes the `StartedShardEntry` so that it also contains the primary term of the shard to start. This way the master node can also checks that the primary term from the start request is equal to the current shard's primary term in the cluster state, and it can ignore any shard started request that would concerns a previous instance of the shard that would have been allocated to the same node.\\r\\n\\r\\nSuch situation are likely to happen with frozen (or restored) indices and the replication of closed indices, because with replicated closed indices the shards will be initialized again after the index is closed and can potentially be re initialized again if the index is reopened as a frozen index. In such cases the lifecycle of the shards would be something like: \\r\\n- shard is STARTED\\r\\n- index is closed\\r\\n- shards is INITIALIZING (index state is CLOSED, primary term is X)\\r\\n- index is reopened\\r\\n- shards are INITIALIZING again (index state is OPENED, potentially frozen, primary term is X+1)\\r\\n\\r\\nAdding the primary term to the shard started request will allow to discard potential `StartedShardEntry` requests received by the master node if the request concerns the shard with primary term X because it has been moved/reinitialized in the meanwhile under the primary term X+1.\\r\\n\\r\\nRelates to #33888 '",
    "cms": [
      "'Use primary terms to start shards'",
      "'Apply feedback'",
      "'Adapt test'",
      "'Move IndexMetadata lookup and fix test when primary term == 1'",
      "'Merge branch 'master' into use-primary-term-to-start-shards'"
    ],
    "commits": {
      "'2cf4b139c5b212e76378d68ee0822c7395aa32ee'": {
        "cm": "'Use primary terms to start shards'",
        "comments": [
          "+                    // tasks that correspond to non-existent indices are marked as successful",
          "+                // the master thinks we are initializing, but we are already started or on POST_RECOVERY and waiting",
          "+                // for master to confirm a shard started message (either master failover, or a cluster event before",
          "+                // we managed to tell the master we started), mark us as started"
        ]
      },
      "'ebfa5b5ed8ea589330b993f01e251b6d54c912ab'": {
        "cm": "'Apply feedback'",
        "comments": [
          "+                    // tasks that correspond to non-existent shards are marked as successful. The reason is that we resend shard started",
          "+                    // events on every cluster state publishing that does not contain the shard as started yet. This means that old stale",
          "+                    // requests might still be in flight even after the shard has already been started or failed on the master. We just",
          "+                    // ignore these requests for now.",
          "+            // the master thinks we are initializing, but we are already started or on POST_RECOVERY and waiting",
          "+            // for master to confirm a shard started message (either master failover, or a cluster event before",
          "+            // we managed to tell the master we started), mark us as started",
          "+        /**",
          "+         * ShardRouting with which the shard was created",
          "+         */",
          "+        /**",
          "+         * Primary term with which the shard was created",
          "+         */"
        ]
      },
      "'8c19deaf765aa24343f239867ce15002de4f0d91'": {
        "cm": "'Adapt test'",
        "comments": []
      },
      "'2d39807654f9183c06b0befd925494d5313dfc47'": {
        "cm": "'Move IndexMetadata lookup and fix test when primary term == 1'",
        "comments": []
      },
      "'a61c78c74aeb007cac002ac3b0ce183cf5963fa1'": {
        "cm": "'Merge branch 'master' into use-primary-term-to-start-shards'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      }
    }
  },
  "elastic/elasticsearch_37890": {
    "id": "elastic/elasticsearch_37890",
    "body": "'* The test failure reported in the issue looks like a mere timeout. Logging suggests that the snapshot completes/aborts correctly but the busy loop polling the snapshot state times out too early.\\r\\n* Closes #37888\\r\\n'",
    "cms": [
      "'Increase Timeout in #testSnapshotCanceled\\n\\n* The test failure reported in the issue looks like a mere timeout. Logging suggestst hat the snapshot completes/aborts correctly but the busy\\nloop polling the snapshot state times out too early.\\n* Closes #37888'"
    ],
    "commits": {
      "'55f3d2ab3e6124009299ecf4c4f8ba6c5714c6ce'": {
        "cm": "'Increase Timeout in #testSnapshotCanceled\\n\\n* The test failure reported in the issue looks like a mere timeout. Logging suggestst hat the snapshot completes/aborts correctly but the busy\\nloop polling the snapshot state times out too early.\\n* Closes #37888'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37886": {
    "id": "elastic/elasticsearch_37886",
    "body": "'If the index request is executed before the put-mapping update is applied on\\r\\nthe IndexShard, the index request will perform a dynamic mapping update.\\r\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\r\\nbecause the latch is still closed. This leads to the failure of the index\\r\\nrequest and the test. This commit makes sure the mapping is ready\\r\\nbefore we execute the index request.\\r\\n\\r\\nRelates #37633\\r\\nCloses #37807\\r\\n'",
    "cms": [
      "'Wait for mapping ready in testReadRequestsReturnLatestMappingVersion\\n\\nIf the index request is executed before the mapping update is applied on\\nthe IndexShard, the index request will perform a dynamic mapping update.\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\nbecause the latch is not open. This leads to the failure of the index\\nrequest and the test. This commit makes sure the mapping is ready\\nbefore we execute the index request.\\n\\nCloses #37807'",
      "'Merge branch 'master' into block-mapping-test'"
    ],
    "commits": {
      "'af9c3af4892ae622e5fc263dd81638e6d37fb864'": {
        "cm": "'Wait for mapping ready in testReadRequestsReturnLatestMappingVersion\\n\\nIf the index request is executed before the mapping update is applied on\\nthe IndexShard, the index request will perform a dynamic mapping update.\\nThis mapping update will be timeout (i.e, ProcessClusterEventTimeoutException)\\nbecause the latch is not open. This leads to the failure of the index\\nrequest and the test. This commit makes sure the mapping is ready\\nbefore we execute the index request.\\n\\nCloses #37807'",
        "comments": [
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed."
        ]
      },
      "'fa2b13d619a402cfce4beec0d02c5aff189c019b'": {
        "cm": "'Merge branch 'master' into block-mapping-test'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // write a snapshot of current time, which is not per se the time field"
        ]
      }
    }
  },
  "elastic/elasticsearch_37885": {
    "id": "elastic/elasticsearch_37885",
    "body": "'This commit fixes the distribution flavor passed to the docs tests to be\\r\\nthe same as the distribution. These two values are now in sync (either\\r\\noss or default) for the docs tests.\\r\\n'",
    "cms": [
      "'Pass distribution type through to docs tests\\n\\nThis commit fixes the distribution flavor passed to the docs tests to be\\nthe same as the distribution. These two values are now in sync (either\\noss or default) for the docs tests.'"
    ],
    "commits": {
      "'4a38c63f744a92f8974b7535ae2807a30643c8dc'": {
        "cm": "'Pass distribution type through to docs tests\\n\\nThis commit fixes the distribution flavor passed to the docs tests to be\\nthe same as the distribution. These two values are now in sync (either\\noss or default) for the docs tests.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37884": {
    "id": "elastic/elasticsearch_37884",
    "body": "'This commit wraps the packaging test task for reproducing a vagrant test\\r\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\r\\nbash.'",
    "cms": [
      "'Use quotes in reproduce line task for vagrant failure\\n\\nThis commit wraps the packaging test task for reproducing a vagrant test\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\nbash.'",
      "'Merge branch 'master' into packaging_repro1'",
      "'fix accidental leftover from other branch'"
    ],
    "commits": {
      "'923844b04262063ff3165a073128394df3807b1f'": {
        "cm": "'Use quotes in reproduce line task for vagrant failure\\n\\nThis commit wraps the packaging test task for reproducing a vagrant test\\nfailure in quotes. The task names sometimes contain \\'#\\', which confuses\\nbash.'",
        "comments": []
      },
      "'567fc8edece55843180f089aec3812e0a36f8370'": {
        "cm": "'Merge branch 'master' into packaging_repro1'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // write a snapshot of current time, which is not per se the time field"
        ]
      },
      "'a0235f0a0a5ff32a583e0d55a55e6ac15ba1f42c'": {
        "cm": "'fix accidental leftover from other branch'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37879": {
    "id": "elastic/elasticsearch_37879",
    "body": "'This deletes the unused code that upgrades ML anomalies index. \\r\\n\\r\\nReverts customer facing parts of #36643\\r\\n\\r\\n\\r\\n\\r\\n'",
    "cms": ["'ML: removing unnecessary upgrade code'"],
    "commits": {
      "'17f6bb045b5416c0fd5655b8ae77325d3d9a8b1d'": {
        "cm": "'ML: removing unnecessary upgrade code'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37878": {
    "id": "elastic/elasticsearch_37878",
    "body": "'* Disable Minio fixture and tests that require it when fixtures are disabled or Docker is not available\\r\\n* Relates #37852\\r\\n'",
    "cms": [
      "'Fix S3 Repository ITs When Docker is not Available\\n\\n* Disable Minio fixture and tests that require it whne fixtures are disabled or Docker is not available\\n* Relates #37852'"
    ],
    "commits": {
      "'3f1966133cdf8151a8e2065a9397eed3e845f71f'": {
        "cm": "'Fix S3 Repository ITs When Docker is not Available\\n\\n* Disable Minio fixture and tests that require it whne fixtures are disabled or Docker is not available\\n* Relates #37852'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37876": {
    "id": "elastic/elasticsearch_37876",
    "body": "'This turned out to not be true and is tackled by #37639 . That PR will be part of 6.7\\r\\n'",
    "cms": [
      "'Remove statement about search and optimistic concurrency control from 6.6 docs\\n\\nThis turned out to not be true and is tackled by #37639 . That PR will be part of 6.7'"
    ],
    "commits": {
      "'5dcae0e6e650c4ba51aea01443cfe09adc532707'": {
        "cm": "'Remove statement about search and optimistic concurrency control from 6.6 docs\\n\\nThis turned out to not be true and is tackled by #37639 . That PR will be part of 6.7'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37874": {
    "id": "elastic/elasticsearch_37874",
    "body": "'We have read and write aliases for the ML results indices.  However,\\r\\nthe job still had methods that purported to reliably return the name\\r\\nof the concrete results index being used by the job.  After reindexing\\r\\nprior to upgrade to 7.x this will be wrong, so the method has been\\r\\nrenamed and the comments made more explicit to say the returned index\\r\\nname may not be the actual concrete index name for the lifetime of the\\r\\njob.  Additionally, the selection of indices when deleting the job\\r\\nhas been changed so that it works regardless of concrete index names.\\r\\n\\r\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\r\\ncritical if we add rolling results indices in the 7.x release stream\\r\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\r\\nthat includes a version that can roll results indices.'",
    "cms": [
      "'[ML] Tighten up use of aliases rather than concrete indices\\n\\nWe have read and write aliases for the ML results indices.  However,\\nthe job still had methods that purported to reliably return the name\\nof the concrete results index being used by the job.  After reindexing\\nprior to upgrade to 7.x this will be wrong, so the method has been\\nrenamed and the comments made more explicit to say the returned index\\nname may not be the actual concrete index name for the lifetime of the\\njob.  Additionally, the selection of indices when deleting the job\\nhas been changed so that it works regardless of concrete index names.\\n\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\ncritical if we add rolling results indices in the 7.x release stream\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\nthat includes a version that can roll results indices.'",
      "'Make test more realistic\\n\\nNow we're always using the job's aliases for index access\\nthe multi-index delete test needs to set up the correct\\naliases.'",
      "'Merge branch 'master' into tighten_up_job_results_alias_use'"
    ],
    "commits": {
      "'51097b8f7ebae681bc3da18e93a537e8e2e5da83'": {
        "cm": "'[ML] Tighten up use of aliases rather than concrete indices\\n\\nWe have read and write aliases for the ML results indices.  However,\\nthe job still had methods that purported to reliably return the name\\nof the concrete results index being used by the job.  After reindexing\\nprior to upgrade to 7.x this will be wrong, so the method has been\\nrenamed and the comments made more explicit to say the returned index\\nname may not be the actual concrete index name for the lifetime of the\\njob.  Additionally, the selection of indices when deleting the job\\nhas been changed so that it works regardless of concrete index names.\\n\\nAll these changes are nice-to-have for 6.7 and 7.0, but will become\\ncritical if we add rolling results indices in the 7.x release stream\\nas 6.7 and 7.0 nodes may have to operate in a mixed version cluster\\nthat includes a version that can roll results indices.'",
        "comments": [
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required"
        ]
      },
      "'9b614fc395333a62605ed6320ce8b9ece37a07c0'": {
        "cm": "'Make test more realistic\\n\\nNow we're always using the job's aliases for index access\\nthe multi-index delete test needs to set up the correct\\naliases.'",
        "comments": [
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices."
        ]
      },
      "'d9cd90e333dc563ad8426b27ada4e9c7e687ec59'": {
        "cm": "'Merge branch 'master' into tighten_up_job_results_alias_use'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed."
        ]
      }
    }
  },
  "elastic/elasticsearch_37872": {
    "id": "elastic/elasticsearch_37872",
    "body": "'The update request has a lesser known support for a one off update of a known document version. This PR adds an a seq# based alternative to power these operations.\\r\\n\\r\\nRelates #36148 \\r\\nRelates #10708'",
    "cms": [
      "'wip'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'add rest test'",
      "'lint'",
      "'fix write issue'",
      "'sigh'",
      "'wires'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'sigh'",
      "'numbers are hard'",
      "'rest fix'",
      "'some assertions'",
      "'wrong field'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'feedback'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
      "'conditional'",
      "'Merge remote-tracking branch 'upstream/master' into cas_update_req'"
    ],
    "commits": {
      "'d297d875fff4bf1350bf75b13651fcc681a49ead'": {
        "cm": "'wip'",
        "comments": [
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only performs this update request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this update request if the document was last modification was assigned this sequence number.",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this update request if the document was last modification was assigned this primary term.",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only perform this update request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */"
        ]
      },
      "'41632be268189769ddf0ffeefed37a304b701bfa'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // Create leader index:",
          "+            // Follow index, so that we can query for follow stats:",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package"
        ]
      },
      "'cb585db70e3bc7ac1a80cd85c33f6050dd9470da'": {
        "cm": "'add rest test'",
        "comments": []
      },
      "'e7eb0a73e8e4e6c6d23fe42fa6fd412aed99865e'": {
        "cm": "'lint'",
        "comments": []
      },
      "'11d3986c86f4c5523135c164048874c309da68f9'": {
        "cm": "'fix write issue'",
        "comments": []
      },
      "'1b4fbf1fc6e87c9a836210bc3ceeb1fc02c1e510'": {
        "cm": "'sigh'",
        "comments": []
      },
      "'8d2a1a553e2141856a44c129946a5300cf5cee9a'": {
        "cm": "'wires'",
        "comments": []
      },
      "'2bb0b0e04e6d398e8c55467e9037b7b9bc7c355a'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation"
        ]
      },
      "'4cb6b60ffb872249cf35d5d24317542cfa13c78a'": {
        "cm": "'sigh'",
        "comments": []
      },
      "'dc89962aa2e73484783db5488a3f2fb44d321f77'": {
        "cm": "'numbers are hard'",
        "comments": []
      },
      "'96dd81ee66b7fe98473a50ef0a731d5e80846e99'": {
        "cm": "'rest fix'",
        "comments": []
      },
      "'ff6c34e90c808eed01223bcb86f6a186bab44f12'": {
        "cm": "'some assertions'",
        "comments": []
      },
      "'2b8f9f84578514ca5271fbf597ad528ee7202e38'": {
        "cm": "'wrong field'",
        "comments": []
      },
      "'46fd7da8ded96f015bb8d1a909bb3d2eda84c4b7'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+            // always track total hits accurately",
          "+     *"
        ]
      },
      "'591704620e89559533a29ff99126b782677a074d'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // 24 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one.",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+ */",
          "+                        // Flatten multipoints",
          "+    /**",
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+            // Make it easy to detect this error in ShardFollowNodeTask:",
          "+            // (adding a metadata header instead of introducing a new exception that extends ElasticsearchException)",
          "+        // Do restore from repository here and after that",
          "+        // start() should be invoked and stats should be reset",
          "+        // For now handle like any other failure:",
          "+        // need a more robust approach to avoid the scenario where an outstanding request",
          "+        // can trigger another restore while the shard was restored already.",
          "+        // https://github.com/elastic/elasticsearch/pull/37562#discussion_r250009367",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed.",
          "+        // user_d can view repos and create and view snapshots on existings repos, everything else is DENIED",
          "+        // user_d can create snapshots, but not concurrently",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // view repositories",
          "+        // view all indices, including restricted ones",
          "+        // create snapshot that includes restricted indices",
          "+        // view snapshots for repo",
          "+        // try search all",
          "+        // try create index",
          "+        // try create another repo",
          "+        // try delete repo",
          "+        // try fumble with snapshots",
          "+        // try destructive/revealing actions on all indices",
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      },
      "'a7c75e5853f0047452d48cdeda7b90ec3c261497'": {
        "cm": "'feedback'",
        "comments": [
          "+    /**",
          "+     * only perform this request if the document was last modification was assigned the given",
          "+     * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * only performs this request if the document was last modification was assigned the given",
          "+     * primary term. Must be used in combination with {@link #setIfSeqNo(long)}",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this request if the document was last modification was assigned this sequence number.",
          "+     * If the document last modification was assigned a different sequence number a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+    /**",
          "+     * If set, only perform this request if the document was last modification was assigned this primary term.",
          "+     *",
          "+     * If the document last modification was assigned a different term a",
          "+     * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.",
          "+     */",
          "+     * only perform this update request if the document's modification was assigned the given",
          "+     * only performs this update request if the document's last modification was assigned the given"
        ]
      },
      "'536efacffe8f402b2555be03ee7f90b727a67d35'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action"
        ]
      },
      "'1e8fb04b80aed5b907e2cf53fa2b45295f64573e'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": ["+        // test the fields is not overwritten"]
      },
      "'42ad9d43bc6bf13f0522574d6e5431efe1cb0e6d'": {
        "cm": "'conditional'",
        "comments": []
      },
      "'d6fbfae1c569c69091430288253e75f5e952c3ba'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_update_req'",
        "comments": [
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37869": {
    "id": "elastic/elasticsearch_37869",
    "body": "'Previously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\r\\nINT, etc. used seconds instead of the epoch millis.\\r\\n\\r\\nFixes: #37655'",
    "cms": [
      "'SQL: Fix casting from date to numeric type to use millis\\n\\nPreviously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\nINT, etc. used seconds instead of the epoch millis.\\n\\nFixes: #37655'"
    ],
    "commits": {
      "'615d56f58670c20306ad301bc36a79aa4a36a78e'": {
        "cm": "'SQL: Fix casting from date to numeric type to use millis\\n\\nPreviously casting from a DATE[TIME] type to a numeric (DOUBLE, LONG,\\nINT, etc. used seconds instead of the epoch millis.\\n\\nFixes: #37655'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37859": {
    "id": "elastic/elasticsearch_37859",
    "body": "'The `TransportUnfollowAction` updates the index settings but does not increase the settings version to reflect that change.\\r\\n\\r\\nThis issue has been caught while working on the replication of closed indices (#33888). The `IndexFollowingIT.testUnfollowIndex()` started to fail and [this specific assertion](https://github.com/elastic/elasticsearch/blob/43bfdd32eea161a9084d7b49b12261ea32a7983c/server/src/main/java/org/elasticsearch/index/IndexService.java#L643) tripped. It does not happen on `master` branch today because index metadata for closed indices are never updated in `IndexService` instances, but this is something that is going to change with the replication of closed indices.'",
    "cms": [
      "'TransportUnfollowAction should increase settings version'",
      "'add missing space'"
    ],
    "commits": {
      "'e60f959f8fd2d3d1ee8e38a13cc4889f07a0c657'": {
        "cm": "'TransportUnfollowAction should increase settings version'",
        "comments": []
      },
      "'ad049237765106bc8e91a31f97da70181b54d373'": {
        "cm": "'add missing space'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37857": {
    "id": "elastic/elasticsearch_37857",
    "body": "'The delete and update by query APIs both offer protection against overriding concurrent user changes to the documents they touch. They currently are using internal versioning. This PR changes that to rely on sequences numbers and primary terms.\\r\\n\\r\\nRelates #37639 \\r\\nRelates #36148 \\r\\nRelates #10708'",
    "cms": [
      "'first iter'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'update to use seq_no_primary_term'",
      "'Merge branch 'master' into cas_reindex'",
      "'fix UpdateByQueryMetadataTests'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'fix UpdateByQueryWithScriptTests'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'fix rest test'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'feedback from Yannick'",
      "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
      "'useSeqNoForOCC/useSeqNoForCAS'"
    ],
    "commits": {
      "'85ec75adb74d1414002f1966f95239562853cf41'": {
        "cm": "'first iter'",
        "comments": [
          "+                /*",
          "+                 * We only need the source version if we're going to use it when write and we only do that when the destination request uses",
          "+                 * external versioning.",
          "+                 */",
          "+                // not all nodes support sequence number powered optimistic concurrency control, we fall back to version",
          "+                // all nodes support sequence number powered optimistic concurrency control and we can use it",
          "+        /**",
          "+         * The sequence number of the match or {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if sequence numbers weren't requested.",
          "+         */",
          "+        /**",
          "+         * The primary term of the match or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM} if sequence numbers weren't requested.",
          "+         */"
        ]
      },
      "'b4b981bdbca0bdbd37173251a64a9cdcf76afa40'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link LifecycleAction} which sets the index's priority. The higher the priority, the faster the recovery.",
          "+ */",
          "+    //package private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * True if the privileges cover restricted internal indices too. Certain indices are reserved for internal services and should be",
          "+     * transparent to ordinary users. For that matter, when granting privileges, you also have to toggle this flag to confirm that all",
          "+     * indices, including restricted ones, are in the scope of this permission. By default this is false.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // Create leader index:",
          "+            // Follow index, so that we can query for follow stats:",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+        // This sub object should support unknown fields, but metadata cannot contain complex extra objects or it will fail",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This may have extra json, so lets just assume that if all of the original fields from the creation are there, then its equal",
          "+        // This is the same code that is in createTestInstance in this class.",
          "+        // EMPTY is safe here because we never use namedObject",
          "+ * An class for interfacing with java.nio. Implementations implement the underlying logic for opening",
          "+ * channels and registering them with the OS.",
          "+     * Opens and binds a server channel to accept incoming connections.",
          "+     * Opens a outgoing client channel.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The NioSelectorGroup is a group of selectors for interfacing with java nio. When it is started it will create the",
          "+ * configured number of selectors. Each selector will be running in a dedicated thread. Server connections",
          "+ * can be bound using the {@link #bindServerChannel(InetSocketAddress, ChannelFactory)} method. Client",
          "+ * connections can be opened using the {@link #openChannel(InetSocketAddress, ChannelFactory)} method.",
          "+ * <p>",
          "+ * The logic specific to a particular channel is provided by the {@link ChannelFactory} passed to the method",
          "+ * when the channel is created. This is what allows an NioSelectorGroup to support different channel types.",
          "+ */",
          "+    /**",
          "+     * This will create an NioSelectorGroup with no dedicated acceptors. All server channels will be handled by the",
          "+     * same selectors that are handling child channels.",
          "+     *",
          "+     * @param threadFactory factory to create selector threads",
          "+     * @param selectorCount the number of selectors to be created",
          "+     * @param eventHandlerFunction function for creating event handlers",
          "+     * @throws IOException occurs if there is a problem while opening a java.nio.Selector",
          "+     */",
          "+    /**",
          "+     * This will create an NioSelectorGroup with dedicated acceptors. All server channels will be handled by a group",
          "+     * of selectors dedicated to accepting channels. These accepted channels will be handed off the",
          "+     * non-server selectors.",
          "+     *",
          "+     * @param acceptorThreadFactory factory to create acceptor selector threads",
          "+     * @param dedicatedAcceptorCount the number of dedicated acceptor selectors to be created",
          "+     * @param selectorThreadFactory factory to create non-acceptor selector threads",
          "+     * @param selectorCount the number of non-acceptor selectors to be created",
          "+     * @param eventHandlerFunction function for creating event handlers",
          "+     * @throws IOException occurs if there is a problem while opening a java.nio.Selector",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This class represents a trust configuration that corresponds to the default trusted CAs of the JDK",
          "+ */",
          "+    /**",
          "+     * Create a trust config that uses System properties to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * Create a trust config that uses supplied {@link BiFunction} to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * @param trustStorePassword the password for the truststore. It applies only when PKCS#11 tokens are used, is null otherwise",
          "+     */",
          "+    /**",
          "+     * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore",
          "+     * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where",
          "+     * we only need to pass the password for reading Private Key entries ).",
          "+     *",
          "+     * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise",
          "+     */",
          "+/*",
          "+ */",
          "+/**",
          "+ * A bare-minimum ASN.1 DER decoder, just having enough functions to",
          "+ * decode PKCS#1 private keys in order to remain JCE/JVM agnostic.",
          "+ * <p>",
          "+ * Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/",
          "+ * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java",
          "+ */",
          "+    // Constructed Flag",
          "+    // Tag and data types",
          "+        // getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't",
          "+        // force us into allocating a very large array",
          "+    /**",
          "+     * Decode the length of the field. Can only support length",
          "+     * encoding up to 4 octets.",
          "+     * <p>",
          "+     *          In BER/DER encoding, length can be encoded in 2 forms:",
          "+     * </p>",
          "+     * <ul>",
          "+     * <li>Short form. One octet. Bit 8 has value \\'0\\' and bits 7-1",
          "+     * give the length.",
          "+     * </li>",
          "+     * <li>Long form. Two to 127 octets (only 4 is supported here).",
          "+     * Bit 8 of first octet has value \\'1\\' and bits 7-1 give the",
          "+     * number of additional length octets. Second and following",
          "+     * octets give the length, base 256, most significant digit first.",
          "+     * </li>",
          "+     * </ul>",
          "+     *",
          "+     * @return The length as integer",
          "+     */",
          "+        // A single byte short length",
          "+        // We can't handle length longer than 4 bytes",
          "+    /**",
          "+     * An ASN.1 TLV. The object is not parsed. It can",
          "+     * only handle integers.",
          "+     *",
          "+     * @author zhang",
          "+     */",
          "+        /**",
          "+         * Construct a ASN.1 TLV. The TLV could be either a",
          "+         * constructed or primitive entity.",
          "+         * <p>",
          "+         *     The first byte in DER encoding is made of following fields:",
          "+         * </p>",
          "+         * <pre>",
          "+         * -------------------------------------------------",
          "+         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|",
          "+         * -------------------------------------------------",
          "+         * |  Class    | CF  |     +      Type             |",
          "+         * -------------------------------------------------",
          "+         * </pre>",
          "+         * <ul>",
          "+         * <li>Class: Universal, Application, Context or Private",
          "+         * <li>CF: Constructed flag. If 1, the field is constructed.",
          "+         * <li>Type: This is actually called tag in ASN.1. It",
          "+         * indicates data type (Integer, String) or a construct",
          "+         * (sequence, choice, set).",
          "+         * </ul>",
          "+         *",
          "+         * @param tag    Tag or Identifier",
          "+         * @param length Length of the field",
          "+         * @param value  Encoded octet string for the field.",
          "+         */",
          "+        /**",
          "+         * For constructed field, return a parser for its content.",
          "+         *",
          "+         * @return A parser for the construct.",
          "+         */",
          "+        /**",
          "+         * Get the value as integer",
          "+         *",
          "+         * @return BigInteger",
          "+         */",
          "+                    // octet string is basically a byte array",
          "+/**",
          "+ * A {@link SslKeyConfig} that does nothing (provides a null key manager)",
          "+ */",
          "+        // Enforce a single instance",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A variety of utility methods for working with or constructing {@link KeyStore} instances.",
          "+ */",
          "+    /**",
          "+     * Make a best guess about the \\'type\\' (see {@link KeyStore#getType()}) of the keystore file located at the given {@code Path}.",
          "+     * This method only references the <em>file name</em> of the keystore, it does not look at its contents.",
          "+     */",
          "+    /**",
          "+     * Read the given keystore file.",
          "+     *",
          "+     * @throws SslConfigException       If there is a problem reading from the provided path",
          "+     * @throws GeneralSecurityException If there is a problem with the keystore contents",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with a single key entry.",
          "+     * @param certificateChain A certificate chain (ordered from subject to issuer)",
          "+     * @param privateKey The private key that corresponds to the subject certificate (index 0 of {@code certificateChain})",
          "+     * @param password The password for the private key",
          "+     *",
          "+     * @throws GeneralSecurityException If there is a problem with the provided certificates/key",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with multiple trusted cert entries.",
          "+     * @param certificates The root certificates to trust",
          "+     */",
          "+            // This should never happen so callers really shouldn't be forced to deal with it themselves.",
          "+    /**",
          "+     * Creates a {@link X509ExtendedKeyManager} based on the key material in the provided {@link KeyStore}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link X509ExtendedTrustManager} based on the trust material in the provided {@link KeyStore}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that reads from PEM formatted paths.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link org.elasticsearch.common.ssl.SslTrustConfig} that reads a list of PEM encoded trusted certificates (CAs) from the file",
          "+ * system.",
          "+ * Strictly speaking, this class does not require PEM certificates, and will load any file that can be read by",
          "+ * {@link java.security.cert.CertificateFactory#generateCertificate(InputStream)}.",
          "+ */",
          "+    /**",
          "+     * Construct a new trust config for the provided paths.",
          "+     * The paths are stored as-is, and are not read until {@link #createTrustManager()} is called.",
          "+     * This means that",
          "+     * <ol>",
          "+     * <li>validation of the file (contents and accessibility) is deferred, and this constructor will <em>not fail</em> on missing",
          "+     * of invalid files.</li>",
          "+     * <li>",
          "+     * if the contents of the files are modified, then subsequent calls {@link #createTrustManager()} will return a new trust",
          "+     * manager that trust a different set of CAs.",
          "+     * </li>",
          "+     * </ol>",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of a file. Supports PKCS#1, PKCS#8",
          "+     * encoded formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys",
          "+     *",
          "+     * @param keyPath           the path for the key file",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return a private key from the contents of the file",
          "+     */",
          "+    /**",
          "+     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslEC",
          "+    /**",
          "+     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslDsa",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an plaintext private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader the {@link BufferedReader} containing the key file contents",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an EC private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link ECPrivateKeySpec}",
          "+     */",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an RSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link RSAPrivateCrtKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an DSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link DSAPrivateKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an encrypted private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader     the {@link BufferedReader} containing the key file contents",
          "+     * @param keyPassword The password for the encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Decrypts the password protected contents using the algorithm and IV that is specified in the PEM Headers of the file",
          "+     *",
          "+     * @param pemHeaders       The Proc-Type and DEK-Info PEM headers that have been extracted from the key file",
          "+     * @param keyContents      The key as a base64 encoded String",
          "+     * @param passwordSupplier A password supplier for the encrypted (password protected) key",
          "+     * @return the decrypted key bytes",
          "+     * @throws GeneralSecurityException if the key can't be decrypted",
          "+     * @throws IOException              if the PEM headers are missing or malformed",
          "+     */",
          "+            //We only handle PEM encryption",
          "+                //malformed pem",
          "+    /**",
          "+     * Creates a {@link Cipher} from the contents of the DEK-Info header of a PEM file. RFC 1421 indicates that supported algorithms are",
          "+     * defined in RFC 1423. RFC 1423 only defines DES-CBS and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3",
          "+     * different variants of 128, 192, 256 bit keys )",
          "+     *",
          "+     * @param dekHeaderValue The value of the the DEK-Info PEM header",
          "+     * @param password       The password with which the key is encrypted",
          "+     * @return a cipher of the appropriate algorithm and parameters to be used for decryption",
          "+     * @throws GeneralSecurityException if the algorithm is not available in the used security provider, or if the key is inappropriate",
          "+     * for the cipher",
          "+     * @throws IOException if the DEK-Info PEM header is invalid",
          "+     */",
          "+    /**",
          "+     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF",
          "+     * that uses n rounds of salted MD5 (as many times as needed to get the necessary number of key bytes)",
          "+     * <p>",
          "+     * https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html",
          "+     */",
          "+    /**",
          "+     * Converts a hexadecimal string to a byte array",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded EC key to an {@link ECPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link ECPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded RSA key to a {@link RSAPrivateCrtKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link RSAPrivateCrtKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded DSA key to a {@link DSAPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link DSAPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded private key and reads its algorithm identifier Object OID.",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return A string identifier for the key algorithm (RSA, DSA, or EC)",
          "+     * @throws GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The client authentication mode that is used for SSL servers.",
          "+ */",
          "+    /**",
          "+     * Never request a client certificate.",
          "+     */",
          "+            // nothing to do here",
          "+    /**",
          "+     * Request a client certificate, but do not enforce that one is provided.",
          "+     */",
          "+    /**",
          "+     * Request and require a client certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if client authentication is enabled",
          "+     */",
          "+    /**",
          "+     * Configure client authentication of the provided {@link SSLParameters}",
          "+     */",
          "+/**",
          "+ * A base exception for problems that occur while trying to configure SSL.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A object encapsulating all necessary configuration for an SSL context (client or server).",
          "+ * The configuration itself is immutable, but the {@link #getKeyConfig() key config} and",
          "+ * {@link #getTrustConfig() trust config} may depend on reading key and certificate material",
          "+ * from files (see {@link #getDependentFiles()}, and the content of those files may change.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are used by this SSL configuration. If the contents of these files change, then any",
          "+     * subsequent call to {@link #createSslContext()} (or similar methods) may create a context with different behaviour.",
          "+     * It is recommended that these files be monitored for changes, and a new ssl-context is created whenever any of the files are modified.",
          "+     */",
          "+    /**",
          "+     * Dynamically create a new SSL context based on the current state of the configuration.",
          "+     * Because the {@link #getKeyConfig() key config} and {@link #getTrustConfig() trust config} may change based on the",
          "+     * contents of their referenced files (see {@link #getDependentFiles()}, consecutive calls to this method may",
          "+     * return ssl-contexts with different configurations.",
          "+     */",
          "+    /**",
          "+     * Picks the best (highest security / most recent standard) SSL/TLS protocol (/version) that is supported by the",
          "+     * {@link #getSupportedProtocols() configured protocols}.",
          "+     */"
        ]
      },
      "'f01fc90aad330f0524f1794d4d61ffef711bf7ee'": {
        "cm": "'update to use seq_no_primary_term'",
        "comments": [
          "+            // not all nodes support sequence number powered optimistic concurrency control, we fall back to version",
          "+            // all nodes support sequence number powered optimistic concurrency control and we can use it"
        ]
      },
      "'62e32c2ebf57527022521f5ed7463389e4ce8d20'": {
        "cm": "'Merge branch 'master' into cas_reindex'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // ensures we don't block",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      },
      "'83913e271fa39618319153ac99ac8456c7088490'": {
        "cm": "'fix UpdateByQueryMetadataTests'",
        "comments": []
      },
      "'c208fe3e23935d6dc3192ef49ce51ccfee04e452'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name."
        ]
      },
      "'447dcc4e64c67fc4dfb8555b6eeb51ba17ea45ed'": {
        "cm": "'fix UpdateByQueryWithScriptTests'",
        "comments": []
      },
      "'1ecd37ff613661f442c6cd450191765b14bf052a'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+                                        // ignore, this is an expected exception"
        ]
      },
      "'7299236fc5cece0b3c42b1403c8c2d88a91066c9'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation"
        ]
      },
      "'a5fab719815d32a86c1531bc5b820fa98fb715f6'": {
        "cm": "'fix rest test'",
        "comments": []
      },
      "'4496a491c9c49aa3a1a2eedcc214468af0e193a5'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // 24 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one.",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+ */",
          "+                        // Flatten multipoints",
          "+    /**",
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+            // Make it easy to detect this error in ShardFollowNodeTask:",
          "+            // (adding a metadata header instead of introducing a new exception that extends ElasticsearchException)",
          "+        // Do restore from repository here and after that",
          "+        // start() should be invoked and stats should be reset",
          "+        // For now handle like any other failure:",
          "+        // need a more robust approach to avoid the scenario where an outstanding request",
          "+        // can trigger another restore while the shard was restored already.",
          "+        // https://github.com/elastic/elasticsearch/pull/37562#discussion_r250009367",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed.",
          "+        // user_d can view repos and create and view snapshots on existings repos, everything else is DENIED",
          "+        // user_d can create snapshots, but not concurrently",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // view repositories",
          "+        // view all indices, including restricted ones",
          "+        // create snapshot that includes restricted indices",
          "+        // view snapshots for repo",
          "+        // try search all",
          "+        // try create index",
          "+        // try create another repo",
          "+        // try delete repo",
          "+        // try fumble with snapshots",
          "+        // try destructive/revealing actions on all indices",
          "+            // always track total hits accurately",
          "+     *"
        ]
      },
      "'2d85e1310ff5e58dc9643202b672997db4df7d19'": {
        "cm": "'feedback from Yannick'",
        "comments": []
      },
      "'c5b22bf6eaaba5f81c8336a01c7c4981445033dd'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into cas_reindex'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'7e03de62c51a9c3cd4cf7eab5156f9ce6f2c427e'": {
        "cm": "'useSeqNoForOCC/useSeqNoForCAS'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37853": {
    "id": "elastic/elasticsearch_37853",
    "body": "'* Stop threads before logging the list of exceptions\\r\\n* For the broken case of concurrent iteration in the finally block and the threads not having shut down,\\r\\nuse `CopyOnWriteArrayList` to have concurrency safe iteration\\r\\n* Closes #37810 '",
    "cms": [
      "'Fix ClusterDisruptionIT#testAckedIndexing\\n\\n* Stop threads before logging the list of exceptions\\n* For the broken case of concurrent iteration in the finally block and the threads not having shut down,\\nuse `CopyOnWriteArrayList` to have concurrency safe iteration'"
    ],
    "commits": {
      "'7b884c6189577cd6a247006a70a1bc570c8f6c54'": {
        "cm": "'Fix ClusterDisruptionIT#testAckedIndexing\\n\\n* Stop threads before logging the list of exceptions\\n* For the broken case of concurrent iteration in the finally block and the threads not having shut down,\\nuse `CopyOnWriteArrayList` to have concurrency safe iteration'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37852": {
    "id": "elastic/elasticsearch_37852",
    "body": "'* Closes #37680\\r\\n* Closes #37783\\r\\n'",
    "cms": [
      "'Use TestFixturesPlugin to Run Minio in Tests\\n\\n* Closes #37680\\n* Closes #37783'",
      "'nicer'",
      "'nicer'",
      "'nicer'",
      "'Merge remote-tracking branch 'elastic/master' into retry-minio-port'",
      "'CR: change dependency relatiobs'",
      "'CR: remove container shutdown'"
    ],
    "commits": {
      "'937455592563573eae6f810549e7b643167c5c09'": {
        "cm": "'Use TestFixturesPlugin to Run Minio in Tests\\n\\n* Closes #37680\\n* Closes #37783'",
        "comments": []
      },
      "'f2a10dd6cf8478fbbe2c773a0814a2f625041e41'": {
        "cm": "'nicer'",
        "comments": []
      },
      "'516a9ab81843297c19ab31bae3f8491cee75f724'": {
        "cm": "'nicer'",
        "comments": []
      },
      "'011dd2ff1e9d52452f4c46fe8c8f3873a1f5eb45'": {
        "cm": "'nicer'",
        "comments": []
      },
      "'8185beb8f37241a92ed5ef0b24881f98b51e13f6'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into retry-minio-port'",
        "comments": [
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+                                        // ignore, this is an expected exception"
        ]
      },
      "'bce2def3d65fddef78184e11e97dea83e1af4e73'": {
        "cm": "'CR: change dependency relatiobs'",
        "comments": []
      },
      "'29a413029ded756a7d7de37f681b26835d244c6f'": {
        "cm": "'CR: remove container shutdown'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37851": {
    "id": "elastic/elasticsearch_37851",
    "body": "'The packaging tests currently have a test which installs elasticsearch,\\r\\nremoves it, modifies ownership of /etc/elasticsearch, and\\r\\nreinstalls. It then checks that the /etc/elasticsearch directory has\\r\\nownership that the package expects. But the recursive change touches\\r\\nfiles not owned by the package. In the past this worked because we did a\\r\\nrecursive ownership change within the package postinst. However, that\\r\\nwas recently removed, and thus this test no longer makes sense.'",
    "cms": [
      "'Remove \\'reinstall\\' packaging tests\\n\\nThe packaging tests currently have a test which installs elasticsearch,\\nremoves it, modifies ownership of /etc/elasticsearch, and\\nreinstalls. It then checks that the /etc/elasticsearch directory has\\nownership that the package expects. But the recursive change touches\\nfiles not owned by the package. In the past this worked because we did a\\nrecursive ownership change within the package postinst. However, that\\nwas recently removed, and thus this test no longer makes sense.'"
    ],
    "commits": {
      "'85786a45bdb1b954e820e055f69d705cebe8f78e'": {
        "cm": "'Remove \\'reinstall\\' packaging tests\\n\\nThe packaging tests currently have a test which installs elasticsearch,\\nremoves it, modifies ownership of /etc/elasticsearch, and\\nreinstalls. It then checks that the /etc/elasticsearch directory has\\nownership that the package expects. But the recursive change touches\\nfiles not owned by the package. In the past this worked because we did a\\nrecursive ownership change within the package postinst. However, that\\nwas recently removed, and thus this test no longer makes sense.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37843": {
    "id": "elastic/elasticsearch_37843",
    "body": "'Correct a class used for deprecation logging in\\r\\nRestGetFieldMappingAction\\r\\n\\r\\nRelates to #37667'",
    "cms": [
      "'Correct deprec log in RestGetFieldMappingAction\\n\\nCorrect a class used for deprecation logging in\\nRestGetFieldMappingAction'",
      "'Correct deprec log in RestCreateIndexAction\\n\\nCorrect a class used for deprecation logging in\\nRestCreateIndexAction'"
    ],
    "commits": {
      "'67d5057534b7de349079943291c49f02b5197576'": {
        "cm": "'Correct deprec log in RestGetFieldMappingAction\\n\\nCorrect a class used for deprecation logging in\\nRestGetFieldMappingAction'",
        "comments": []
      },
      "'e6f141780aa6f12afb4a301bf7f0c947c733c226'": {
        "cm": "'Correct deprec log in RestCreateIndexAction\\n\\nCorrect a class used for deprecation logging in\\nRestCreateIndexAction'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37839": {
    "id": "elastic/elasticsearch_37839",
    "body": "'The /etc/elasticsearch directory is currently configured as a config\\r\\nfile with noreplace. However, the directory itself is not config, and\\r\\ncan lead to an entire /etc/elasticsearch.rpmsave directory in some\\r\\nsituations. This commit fixes the ospackage config to not specify those\\r\\nfile bits for the directory itself, but only the files underneath it.\\r\\n'",
    "cms": [
      "'Remove NOREPLACE for /etc/elasticsearch in rpm and deb\\n\\nThe /etc/elasticsearch directory is currently configured as a config\\nfile with noreplace. However, the directory itself is not config, and\\ncan lead to an entire /etc/elasticsearch.rpmsave directory in some\\nsituations. This commit fixes the ospackage config to not specify those\\nfile bits for the directory itself, but only the files underneath it.'",
      "'Remove \\'reinstall\\' packaging tests\\n\\nThe packaging tests currently have a test which installs elasticsearch,\\nremoves it, modifies ownership of /etc/elasticsearch, and\\nreinstalls. It then checks that the /etc/elasticsearch directory has\\nownership that the package expects. But the recursive change touches\\nfiles not owned by the package. In the past this worked because we did a\\nrecursive ownership change within the package postinst. However, that\\nwas recently removed, and thus this test no longer makes sense.'",
      "'Merge branch 'packages_remove_reinstall_tests' into packages_config_dir_noreplace'",
      "'remove leftover config'"
    ],
    "commits": {
      "'a0c31652e17e60870dd9d97eb3194c2ca2460d9c'": {
        "cm": "'Remove NOREPLACE for /etc/elasticsearch in rpm and deb\\n\\nThe /etc/elasticsearch directory is currently configured as a config\\nfile with noreplace. However, the directory itself is not config, and\\ncan lead to an entire /etc/elasticsearch.rpmsave directory in some\\nsituations. This commit fixes the ospackage config to not specify those\\nfile bits for the directory itself, but only the files underneath it.'",
        "comments": []
      },
      "'85786a45bdb1b954e820e055f69d705cebe8f78e'": {
        "cm": "'Remove \\'reinstall\\' packaging tests\\n\\nThe packaging tests currently have a test which installs elasticsearch,\\nremoves it, modifies ownership of /etc/elasticsearch, and\\nreinstalls. It then checks that the /etc/elasticsearch directory has\\nownership that the package expects. But the recursive change touches\\nfiles not owned by the package. In the past this worked because we did a\\nrecursive ownership change within the package postinst. However, that\\nwas recently removed, and thus this test no longer makes sense.'",
        "comments": []
      },
      "'ef3acbbde5367bea1454a0a87302c52508011a73'": {
        "cm": "'Merge branch 'packages_remove_reinstall_tests' into packages_config_dir_noreplace'",
        "comments": []
      },
      "'3058663660782ad65c45fbd4f85d4da071685aa8'": {
        "cm": "'remove leftover config'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37838": {
    "id": "elastic/elasticsearch_37838",
    "body": "'Backport of #37134, opening a PR to get a full build. This PR also makes the relevant\\r\\nchanges to account for the difference in the default for `include_type_name`.'",
    "cms": [
      "'Deprecate types in create index requests. (#37134)\\n\\nFrom #29453 and #37285, the include_type_name parameter was already present and defaulted to false. This PR makes the following updates:\\n* Add deprecation warnings to RestCreateIndexAction, plus tests in RestCreateIndexActionTests.\\n* Add a typeless 'create index' method to the Java HLRC, and deprecate the old typed version. To do this cleanly, I created new CreateIndexRequest and CreateIndexResponse objects that differ from the existing server ones.'",
      "'Remove outdated callouts from the 'create index' HLRC docs'",
      "'Updates to account for different default for include_type_name'",
      "'Fix static analysis violations.'",
      "'Merge remote-tracking branch 'upstream/6.x' into deprecate-types-in-create-index'",
      "'Fix IndicesRequestConvertersTests.'",
      "'Make sure the deprecated 'get field mappings' call specifies include_type_name.'",
      "'Fix some HLRC tests.'"
    ],
    "commits": {
      "'1bebc05801aa4276c66b0a7db94687fce173149e'": {
        "cm": "'Deprecate types in create index requests. (#37134)\\n\\nFrom #29453 and #37285, the include_type_name parameter was already present and defaulted to false. This PR makes the following updates:\\n* Add deprecation warnings to RestCreateIndexAction, plus tests in RestCreateIndexActionTests.\\n* Add a typeless 'create index' method to the Java HLRC, and deprecate the old typed version. To do this cleanly, I created new CreateIndexRequest and CreateIndexResponse objects that differ from the existing server ones.'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object and also uses request options instead of headers.",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object and also uses request objects instead of headers.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name."
        ]
      },
      "'437d08dcf713bfb6bebba964ec1f33ab48e0227e'": {
        "cm": "'Remove outdated callouts from the 'create index' HLRC docs'",
        "comments": []
      },
      "'7438dfe7f6a54cd363873aaa8ff994373ddc1aef'": {
        "cm": "'Updates to account for different default for include_type_name'",
        "comments": []
      },
      "'ae71a64181d090f05da90df074d96597f9726814'": {
        "cm": "'Fix static analysis violations.'",
        "comments": []
      },
      "'edc63f92af0c97db0dbca8146674f6621b7e3714'": {
        "cm": "'Merge remote-tracking branch 'upstream/6.x' into deprecate-types-in-create-index'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This class represents a trust configuration that corresponds to the default trusted CAs of the JDK",
          "+ */",
          "+    /**",
          "+     * Create a trust config that uses System properties to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * Create a trust config that uses supplied {@link BiFunction} to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * @param trustStorePassword the password for the truststore. It applies only when PKCS#11 tokens are used, is null otherwise",
          "+     */",
          "+    /**",
          "+     * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore",
          "+     * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where",
          "+     * we only need to pass the password for reading Private Key entries ).",
          "+     *",
          "+     * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise",
          "+     */",
          "+/*",
          "+ */",
          "+/**",
          "+ * A bare-minimum ASN.1 DER decoder, just having enough functions to",
          "+ * decode PKCS#1 private keys in order to remain JCE/JVM agnostic.",
          "+ * <p>",
          "+ * Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/",
          "+ * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java",
          "+ */",
          "+    // Constructed Flag",
          "+    // Tag and data types",
          "+        // getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't",
          "+        // force us into allocating a very large array",
          "+    /**",
          "+     * Decode the length of the field. Can only support length",
          "+     * encoding up to 4 octets.",
          "+     * <p>",
          "+     *          In BER/DER encoding, length can be encoded in 2 forms:",
          "+     * </p>",
          "+     * <ul>",
          "+     * <li>Short form. One octet. Bit 8 has value \\'0\\' and bits 7-1",
          "+     * give the length.",
          "+     * </li>",
          "+     * <li>Long form. Two to 127 octets (only 4 is supported here).",
          "+     * Bit 8 of first octet has value \\'1\\' and bits 7-1 give the",
          "+     * number of additional length octets. Second and following",
          "+     * octets give the length, base 256, most significant digit first.",
          "+     * </li>",
          "+     * </ul>",
          "+     *",
          "+     * @return The length as integer",
          "+     */",
          "+        // A single byte short length",
          "+        // We can't handle length longer than 4 bytes",
          "+    /**",
          "+     * An ASN.1 TLV. The object is not parsed. It can",
          "+     * only handle integers.",
          "+     *",
          "+     * @author zhang",
          "+     */",
          "+        /**",
          "+         * Construct a ASN.1 TLV. The TLV could be either a",
          "+         * constructed or primitive entity.",
          "+         * <p>",
          "+         *     The first byte in DER encoding is made of following fields:",
          "+         * </p>",
          "+         * <pre>",
          "+         * -------------------------------------------------",
          "+         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|",
          "+         * -------------------------------------------------",
          "+         * |  Class    | CF  |     +      Type             |",
          "+         * -------------------------------------------------",
          "+         * </pre>",
          "+         * <ul>",
          "+         * <li>Class: Universal, Application, Context or Private",
          "+         * <li>CF: Constructed flag. If 1, the field is constructed.",
          "+         * <li>Type: This is actually called tag in ASN.1. It",
          "+         * indicates data type (Integer, String) or a construct",
          "+         * (sequence, choice, set).",
          "+         * </ul>",
          "+         *",
          "+         * @param tag    Tag or Identifier",
          "+         * @param length Length of the field",
          "+         * @param value  Encoded octet string for the field.",
          "+         */",
          "+        /**",
          "+         * For constructed field, return a parser for its content.",
          "+         *",
          "+         * @return A parser for the construct.",
          "+         */",
          "+        /**",
          "+         * Get the value as integer",
          "+         *",
          "+         * @return BigInteger",
          "+         */",
          "+                    // octet string is basically a byte array",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that does nothing (provides a null key manager)",
          "+ */",
          "+        // Enforce a single instance",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A variety of utility methods for working with or constructing {@link KeyStore} instances.",
          "+ */",
          "+    /**",
          "+     * Make a best guess about the \\'type\\' (see {@link KeyStore#getType()}) of the keystore file located at the given {@code Path}.",
          "+     * This method only references the <em>file name</em> of the keystore, it does not look at its contents.",
          "+     */",
          "+    /**",
          "+     * Read the given keystore file.",
          "+     *",
          "+     * @throws SslConfigException       If there is a problem reading from the provided path",
          "+     * @throws GeneralSecurityException If there is a problem with the keystore contents",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with a single key entry.",
          "+     * @param certificateChain A certificate chain (ordered from subject to issuer)",
          "+     * @param privateKey The private key that corresponds to the subject certificate (index 0 of {@code certificateChain})",
          "+     * @param password The password for the private key",
          "+     *",
          "+     * @throws GeneralSecurityException If there is a problem with the provided certificates/key",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with multiple trusted cert entries.",
          "+     * @param certificates The root certificates to trust",
          "+     */",
          "+            // This should never happen so callers really shouldn't be forced to deal with it themselves.",
          "+    /**",
          "+     * Creates a {@link X509ExtendedKeyManager} based on the key material in the provided {@link KeyStore}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link X509ExtendedTrustManager} based on the trust material in the provided {@link KeyStore}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that reads from PEM formatted paths.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link org.elasticsearch.common.ssl.SslTrustConfig} that reads a list of PEM encoded trusted certificates (CAs) from the file",
          "+ * system.",
          "+ * Strictly speaking, this class does not require PEM certificates, and will load any file that can be read by",
          "+ * {@link java.security.cert.CertificateFactory#generateCertificate(InputStream)}.",
          "+ */",
          "+    /**",
          "+     * Construct a new trust config for the provided paths.",
          "+     * The paths are stored as-is, and are not read until {@link #createTrustManager()} is called.",
          "+     * This means that",
          "+     * <ol>",
          "+     * <li>validation of the file (contents and accessibility) is deferred, and this constructor will <em>not fail</em> on missing",
          "+     * of invalid files.</li>",
          "+     * <li>",
          "+     * if the contents of the files are modified, then subsequent calls {@link #createTrustManager()} will return a new trust",
          "+     * manager that trust a different set of CAs.",
          "+     * </li>",
          "+     * </ol>",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of a file. Supports PKCS#1, PKCS#8",
          "+     * encoded formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys",
          "+     *",
          "+     * @param keyPath           the path for the key file",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return a private key from the contents of the file",
          "+     */",
          "+    /**",
          "+     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslEC",
          "+    /**",
          "+     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslDsa",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an plaintext private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader the {@link BufferedReader} containing the key file contents",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an EC private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link ECPrivateKeySpec}",
          "+     */",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an RSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link RSAPrivateCrtKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an DSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link DSAPrivateKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an encrypted private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader     the {@link BufferedReader} containing the key file contents",
          "+     * @param keyPassword The password for the encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Decrypts the password protected contents using the algorithm and IV that is specified in the PEM Headers of the file",
          "+     *",
          "+     * @param pemHeaders       The Proc-Type and DEK-Info PEM headers that have been extracted from the key file",
          "+     * @param keyContents      The key as a base64 encoded String",
          "+     * @param passwordSupplier A password supplier for the encrypted (password protected) key",
          "+     * @return the decrypted key bytes",
          "+     * @throws GeneralSecurityException if the key can't be decrypted",
          "+     * @throws IOException              if the PEM headers are missing or malformed",
          "+     */",
          "+            //We only handle PEM encryption",
          "+                //malformed pem",
          "+    /**",
          "+     * Creates a {@link Cipher} from the contents of the DEK-Info header of a PEM file. RFC 1421 indicates that supported algorithms are",
          "+     * defined in RFC 1423. RFC 1423 only defines DES-CBS and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3",
          "+     * different variants of 128, 192, 256 bit keys )",
          "+     *",
          "+     * @param dekHeaderValue The value of the the DEK-Info PEM header",
          "+     * @param password       The password with which the key is encrypted",
          "+     * @return a cipher of the appropriate algorithm and parameters to be used for decryption",
          "+     * @throws GeneralSecurityException if the algorithm is not available in the used security provider, or if the key is inappropriate",
          "+     * for the cipher",
          "+     * @throws IOException if the DEK-Info PEM header is invalid",
          "+     */",
          "+    /**",
          "+     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF",
          "+     * that uses n rounds of salted MD5 (as many times as needed to get the necessary number of key bytes)",
          "+     * <p>",
          "+     * https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html",
          "+     */",
          "+    /**",
          "+     * Converts a hexadecimal string to a byte array",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded EC key to an {@link ECPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link ECPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded RSA key to a {@link RSAPrivateCrtKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link RSAPrivateCrtKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded DSA key to a {@link DSAPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link DSAPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded private key and reads its algorithm identifier Object OID.",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return A string identifier for the key algorithm (RSA, DSA, or EC)",
          "+     * @throws GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The client authentication mode that is used for SSL servers.",
          "+ */",
          "+    /**",
          "+     * Never request a client certificate.",
          "+     */",
          "+            // nothing to do here",
          "+    /**",
          "+     * Request a client certificate, but do not enforce that one is provided.",
          "+     */",
          "+    /**",
          "+     * Request and require a client certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if client authentication is enabled",
          "+     */",
          "+    /**",
          "+     * Configure client authentication of the provided {@link SSLParameters}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A base exception for problems that occur while trying to configure SSL.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A object encapsulating all necessary configuration for an SSL context (client or server).",
          "+ * The configuration itself is immutable, but the {@link #getKeyConfig() key config} and",
          "+ * {@link #getTrustConfig() trust config} may depend on reading key and certificate material",
          "+ * from files (see {@link #getDependentFiles()}, and the content of those files may change.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are used by this SSL configuration. If the contents of these files change, then any",
          "+     * subsequent call to {@link #createSslContext()} (or similar methods) may create a context with different behaviour.",
          "+     * It is recommended that these files be monitored for changes, and a new ssl-context is created whenever any of the files are modified.",
          "+     */",
          "+    /**",
          "+     * Dynamically create a new SSL context based on the current state of the configuration.",
          "+     * Because the {@link #getKeyConfig() key config} and {@link #getTrustConfig() trust config} may change based on the",
          "+     * contents of their referenced files (see {@link #getDependentFiles()}, consecutive calls to this method may",
          "+     * return ssl-contexts with different configurations.",
          "+     */",
          "+    /**",
          "+     * Picks the best (highest security / most recent standard) SSL/TLS protocol (/version) that is supported by the",
          "+     * {@link #getSupportedProtocols() configured protocols}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Utility class for handling the standard setting keys for use in SSL configuration.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationLoader",
          "+ */",
          "+    /**",
          "+     * The SSL/TLS protocols (i.e. versions) that should be used",
          "+     */",
          "+    /**",
          "+     * The SSL/TLS cipher suites that should be used",
          "+     */",
          "+    /**",
          "+     * Whether certificate and/or hostname verification should be used",
          "+     */",
          "+    /**",
          "+     * When operating as a server, whether to request/require client certificates",
          "+     */",
          "+    // Trust",
          "+    /**",
          "+     * A list of paths to PEM formatted certificates that should be trusted as CAs",
          "+     */",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used as a trust-store",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #TRUSTSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link TrustManagerFactory#getAlgorithm() trust management algorithm} to use when configuring trust",
          "+     * with a {@link #TRUSTSTORE_PATH truststore}.",
          "+     */",
          "+    // Key Management",
          "+    // -- Keystore",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used for key management",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a secure setting.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #KEYSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link javax.net.ssl.KeyManagerFactory#getAlgorithm() key management algorithm} to use when",
          "+     * connstructing a Key manager from a {@link #KEYSTORE_PATH keystore}.",
          "+     */",
          "+    // -- PEM",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the certificate to be used as part of key management",
          "+     */",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the private key for the configured {@link #CERTIFICATE}.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a secure setting.",
          "+     * This (or the {@link #KEY_LEGACY_PASSPHRASE legacy fallback}) is required if the key file is encrypted.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, non-list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch",
          "+     * keystore.",
          "+     */",
          "+    /**",
          "+     * @return {@code true} if the provided key is a deprecated setting",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Loads {@link SslConfiguration} from settings.",
          "+ * This class handles the logic of interpreting the various \\'ssl.*\\' configuration settings and their interactions",
          "+ * (as well as being aware of dependencies and conflicts between different settings).",
          "+ * The constructed {@code SslConfiguration} has sensible defaults for any settings that are not explicitly configured,",
          "+ * and these defaults can be overridden through the various {@code setDefaultXyz} methods.",
          "+ * It is {@code abstract} because this library has minimal dependencies, so the extraction of the setting values from",
          "+ * the underlying setting source must be handled by the code that makes use of this class.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationKeys",
          "+ */",
          "+    /**",
          "+     * Construct a new loader with the \\'standard\\' default values.",
          "+     *",
          "+     * @param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it",
          "+     *                      must end in a \\'.\\' (period). For example, if the prefix is {@code \\'reindex.ssl.\\'} then the keys that are",
          "+     *                      passed to methods like {@link #getSettingAsString(String)} will be in the form",
          "+     *                      {@code \\'reindex.ssl.verification_mode\\'}, and those same keys will be reported in error messages (via",
          "+     *                      {@link SslConfigException}).",
          "+     */",
          "+    /**",
          "+     * Change the default trust config.",
          "+     * The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs",
          "+     */",
          "+    /**",
          "+     * Change the default key config.",
          "+     * The initial key config is {@link EmptyKeyConfig}, which does not provide any keys",
          "+     */",
          "+    /**",
          "+     * Change the default verification mode.",
          "+     * The initial verification mode is {@link SslVerificationMode#FULL}.",
          "+     */",
          "+    /**",
          "+     * Change the default client authentication mode.",
          "+     * The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.",
          "+     */",
          "+    /**",
          "+     * Change the default supported ciphers.",
          "+     * The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.",
          "+     *",
          "+     * @see #loadDefaultCiphers()",
          "+     */",
          "+    /**",
          "+     * Change the default SSL/TLS protocol list.",
          "+     * The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS}",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a string, and this class will convert it to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source.",
          "+     * This method will be called for any setting keys that are marked as being",
          "+     * {@link SslConfigurationKeys#getSecureStringKeys() secure} settings.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a list of strings, and this class will convert the values to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Resolve all necessary configuration settings, and load a {@link SslConfiguration}.",
          "+     *",
          "+     * @param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch",
          "+     *                 configuration directory.",
          "+     * @throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.",
          "+     */",
          "+            // No AES? Things are going to be very weird, but technically that means we don't have 256 bit AES, so ...",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a key manager at runtime.",
          "+ * The method for constructing the key manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createKeyManager()} method will read these files dynamically, so the behaviour of this key config may change whenever",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedKeyManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the key manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a trust manager at runtime.",
          "+ * The method for constructing the trust manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createTrustManager()} method will read these files dynamically, so the behaviour of this trust config may change if",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedTrustManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the trust manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents the verification mode to be used for SSL connections.",
          "+ */",
          "+    /**",
          "+     * Verify neither the hostname, nor the provided certificate.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, but do not verify the hostname.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, and also verify that the hostname to which this client is connected",
          "+     * matches one of the Subject-Alternative-Names in the certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if hostname verification is enabled",
          "+     */",
          "+    /**",
          "+     * @return true if certificate verification is enabled",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that builds a Key Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path          The path to the keystore file",
          "+     * @param storePassword The password for the keystore",
          "+     * @param type          The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                      See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param keyPassword   The password for the key(s) within the keystore",
          "+     *                      (see {@link javax.net.ssl.KeyManagerFactory#init(KeyStore, char[])}).",
          "+     * @param algorithm     The algorithm to use for the Key Manager (see {@link KeyManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 private key entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that builds a Trust Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path      The path to the keystore file",
          "+     * @param password  The password for the keystore",
          "+     * @param type      The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                  See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param algorithm The algorithm to use for the Trust Manager (see {@link javax.net.ssl.TrustManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 trusted certificate entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that trusts all certificates. Used when {@link SslVerificationMode#isCertificateVerificationEnabled()} is",
          "+ * {@code false}.",
          "+ * This class cannot be used on FIPS-140 JVM as it has its own trust manager implementation.",
          "+ */",
          "+        // single instances",
          "+    /**",
          "+     * The {@link X509ExtendedTrustManager} that will trust all certificates.",
          "+     * All methods are implemented as a no-op and do not throw exceptions regardless of the certificate presented.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This is a sample of the CAs that we expect on every JRE.",
          "+        // We can safely change this list if the JRE's issuer list changes, but we want to assert something useful.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // When running on BC-FIPS, an invalid file format behaves like an empty file",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * A test for non-trust, non-key configurations.",
          "+     * These are straight forward and can all be tested together",
          "+     */",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Because (a) cannot load a JKS as a PKCS12 & (b) the password is wrong.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // Parse the user agent in the ECS (Elastic Common Schema) format",
          "+            // Deprecated format, removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by VERSION), to be removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by just using OS), to be removed in 7.0",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * @return the number of composite buckets. Defaults to {@code 10}.",
          "+     */",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+ */",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+                                        // ignore, this is an expected exception"
        ]
      },
      "'d00c6ffda50a413c8eab7124878f25849336bab6'": {
        "cm": "'Fix IndicesRequestConvertersTests.'",
        "comments": []
      },
      "'28542ad402c24e5903e5f684e71f338811b14e54'": {
        "cm": "'Make sure the deprecated 'get field mappings' call specifies include_type_name.'",
        "comments": []
      },
      "'eae5856af6a63e90aab79f3e61bd7698a7f92c80'": {
        "cm": "'Fix some HLRC tests.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37837": {
    "id": "elastic/elasticsearch_37837",
    "body": "'This adds the ability for the cluster to enter \\'upgrade mode\\' for ML jobs and datafeeds.\\r\\n\\r\\nThis entails the following:\\r\\n- Setting a field in the cluster state (for the ml_metadata) that indicates if `upgrade_mode` is enabled/disabled according to its boolean value\\r\\n- Isolating Datafeeds so that they stop pushing data to the ML jobs\\r\\n- Unassigning Datafeed and Job persistent tasks so that they stop executing and can later be restarted\\r\\n   - This is done with the tasks staying cluster state so that they can be reassigned to an appropriate node when `upgrade_mode: false`\\r\\n\\r\\nThe API is synchronous and only allows one caller to hit it at a time. When the API is returned, the guaruntees are:\\r\\n- If `upgrade_mode: true` that all tasks are unassigned and stopped. Meaning that all `.ml*` indices are no longer being written to by any internal processes\\r\\n- If `upgrade_mode: false` that all tasks have been re-assigned to appropriate nodes and are executing again. \\r\\n\\r\\nNote: When jobs are restarted, they restart from some time in the past and load their previous state (if available) from a snapshot. \\r\\n\\r\\nStill need to add docs, the rest should be good to review'",
    "cms": [
      "'ML: Add MlMetadata.upgrade_mode and API'",
      "'Adding tests'",
      "'Adding wait conditionals for the upgrade_mode call to return'",
      "'Adding tests'",
      "'adjusting format and tests'",
      "'Adjusting wait conditions for api return and msgs'",
      "'Merge branch 'master' into feature/ml-upgrade-mode'",
      "'adjusting doc tests'",
      "'adding upgrade mode tests to black list'",
      "'Merge branch 'master' into feature/ml-upgrade-mode'"
    ],
    "commits": {
      "'56096a2df4a2ab0e0c02c3561ba10c37737c9d12'": {
        "cm": "'ML: Add MlMetadata.upgrade_mode and API'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+        // <4> We have unassignd the tasks, respond to the listener. ",
          "+                //TODO wait on what condition?",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                    // We disabled the setting, we should simply wait for all jobs to not have the `AWAITING_UPGRADE` assignment",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * ",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     *",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     *",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     * ",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener Alerted when tasks are unassignd",
          "+     */",
          "+    // We wait for all ML jobs to change their assignment from the AWAITING_UPGRADE assignment",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'1e9e40a678c8252856828220f281bd0a5d6ffe8f'": {
        "cm": "'Adding tests'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Switching the setting on/off while we are in the middle of adjusting task assignments and isolating datafeeds",
          "+        // may result in unknown behavior",
          "+        // Once we have set isRunning to true, we don't want to chance it being kept that way without the master node having to restart",
          "+            // <4> We have unassignd the tasks, respond to the listener.",
          "+                    //TODO wait on what condition?",
          "+            // <3> After isolating the datafeeds, unassign the tasks",
          "+           /*",
          "+            */",
          "+                    // State change was not acknowledged, we either timed out or ran into some exception",
          "+                    // We should not continue and alert failure to the end user",
          "+                    // Did we change from disabled -> enabled?",
          "+                        // We disabled the setting, we should simply wait for all jobs to not have the `AWAITING_UPGRADE` assignment",
          "+            //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+     * <p>",
          "+     * <p>",
          "+     * <p>",
          "+     *",
          "+     * @param listener            Alerted when tasks are unassignd"
        ]
      },
      "'36124f8b2fc3b1437a7c904a36642b516177d455'": {
        "cm": "'Adding wait conditionals for the upgrade_mode call to return'",
        "comments": [
          "+            // <4> We have unassigned the tasks, respond to the listener.",
          "+                    // TODO Is there some other besides the datafeeds fully stopping?"
        ]
      },
      "'5fe582cebb1bb1b5846e954a06b9e6931aeaa0bb'": {
        "cm": "'Adding tests'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                    // We disabled the setting, we should simply wait for all jobs to not have the `AWAITING_UPGRADE` assignment",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled"
        ]
      },
      "'ba22d115c0de2aaacf889b155661284a7c14bf2c'": {
        "cm": "'adjusting format and tests'",
        "comments": ["+        /*", "+         */"]
      },
      "'1ecbc753bb82bd5f11f49e8b8c9a072ab378230a'": {
        "cm": "'Adjusting wait conditions for api return and msgs'",
        "comments": [
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process."
        ]
      },
      "'c240ad50b0600148ac164d2ee58af8fb2ad23f26'": {
        "cm": "'Merge branch 'master' into feature/ml-upgrade-mode'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0"
        ]
      },
      "'5d724eccb252a97e3888f0824b3d8c20ecec5317'": {
        "cm": "'adjusting doc tests'",
        "comments": []
      },
      "'f9bdb3354ebfa9205834436a79eaa1dca83aaaaa'": {
        "cm": "'adding upgrade mode tests to black list'",
        "comments": []
      },
      "'11a57dafb8e218cb8ffefd95e8dc1da218175514'": {
        "cm": "'Merge branch 'master' into feature/ml-upgrade-mode'",
        "comments": [
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37836": {
    "id": "elastic/elasticsearch_37836",
    "body": "'* Delegate `new GeoHashGridAggregatorFactory(...)` inside the `GeoGridAggregationBuilder` to the child classes.\\r\\n* Rename all `geohash...` to `hash...`'",
    "cms": [
      "'Abstract GeoHashGridAggregatorFactory creation, renamed geohash -> hash\\n\\n* Delegate `new GeoHashGridAggregatorFactory(...)` inside the `GeoGridAggregationBuilder` to the child classes.\\n* Rename all `geohash...` to `hash...`'"
    ],
    "commits": {
      "'95296d3b5b616b66b98fee21bcc9afea324e78dd'": {
        "cm": "'Abstract GeoHashGridAggregatorFactory creation, renamed geohash -> hash\\n\\n* Delegate `new GeoHashGridAggregatorFactory(...)` inside the `GeoGridAggregationBuilder` to the child classes.\\n* Rename all `geohash...` to `hash...`'",
        "comments": [
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings."
        ]
      }
    }
  },
  "elastic/elasticsearch_37835": {
    "id": "elastic/elasticsearch_37835",
    "body": "'The message was originally intended for 7.0, and needs to be updated\\r\\nto make sense for 6.7.'",
    "cms": [
      "'Update the deprecation message for typed put mapping requests.\\n\\nThe message was originally intended for 7.0, and needs to be updated\\nto make sense for 6.7.'"
    ],
    "commits": {
      "'e6f60c6571504c243e412b68d8d7f70e4f56e392'": {
        "cm": "'Update the deprecation message for typed put mapping requests.\\n\\nThe message was originally intended for 7.0, and needs to be updated\\nto make sense for 6.7.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37834": {
    "id": "elastic/elasticsearch_37834",
    "body": "'If the `in_sync_allocations` of `index-1` or `index-2` is changed,\\r\\nthe metadata version will be increased. This leads to the failure in\\r\\nthe metadata version checks. We need to relax them.\\r\\n\\r\\nRelates #37674\\r\\nCloses #37820'",
    "cms": [
      "'Relax cluster metadata version check\\n\\nIf the in_sync_allocations of index-1 or index-2 is changed, the\\nmetadata version will be increased. This leads to the failure in\\nthe metadata version checks. We need to relax them.\\n\\nCloses #37820'"
    ],
    "commits": {
      "'3ae4a714fc4eb55fa5a07779677e0affc39b1069'": {
        "cm": "'Relax cluster metadata version check\\n\\nIf the in_sync_allocations of index-1 or index-2 is changed, the\\nmetadata version will be increased. This leads to the failure in\\nthe metadata version checks. We need to relax them.\\n\\nCloses #37820'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37832": {
    "id": "elastic/elasticsearch_37832",
    "body": "'This change allows other grid aggregations to reuse the same tests.\\r\\n\\r\\nThe change mostly just moves code to the base classes, trying to\\r\\nkeep changes to a bare minimum.  A follow up refactoring might\\r\\nwant to rename some variables to remove explicit \\'geohash\\' from the base.'",
    "cms": [
      "'Refactored GeoHashGrid unit tests\\n\\nThis change allows other grid aggregations to reuse the same tests.\\n\\nThe change mostly just moves code to the base classes, trying to\\nkeep changes to a bare minimum.'",
      "'rename createInternalGeoHashGridBucket to createInternalGeoGridBucket'",
      "'indentation'"
    ],
    "commits": {
      "'8848778d7635c71960a226db407612b1bc2f0777'": {
        "cm": "'Refactored GeoHashGrid unit tests\\n\\nThis change allows other grid aggregations to reuse the same tests.\\n\\nThe change mostly just moves code to the base classes, trying to\\nkeep changes to a bare minimum.'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */"
        ]
      },
      "'820130305f9a71c24066346d9bbf36f84453a336'": {
        "cm": "'rename createInternalGeoHashGridBucket to createInternalGeoGridBucket'",
        "comments": []
      },
      "'acf202b742f0ed11fe6876372f02f9daeaf68526'": {
        "cm": "'indentation'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37830": {
    "id": "elastic/elasticsearch_37830",
    "body": "'The unlucky timing can cause this test to fail when the indexing triggered from `maybeTriggerAsyncJob`. As this is asynchronous, in can finish quicker then the test stepping over to next assertion\\r\\nThe introduced barrier solves the problem\\r\\ncloses #37695'",
    "cms": [
      "'reproduced and fixed'",
      "'checkstype'",
      "'handle exception properly'",
      "'add timeout to latch'"
    ],
    "commits": {
      "'2b24b9a4c1e85cc0b570d4958b8e76608d860e2c'": {
        "cm": "'reproduced and fixed'",
        "comments": []
      },
      "'905efa369bf03e8d756e326fdab9c03d06f3de50'": {
        "cm": "'checkstype'",
        "comments": []
      },
      "'38545e4427734c5a36656972eae3604dfd5f0181'": {
        "cm": "'handle exception properly'",
        "comments": []
      },
      "'00289e013f2b914a69e7c747365e657e3c797c58'": {
        "cm": "'add timeout to latch'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37827": {
    "id": "elastic/elasticsearch_37827",
    "body": "'adds query support to data frame transforms\\r\\n\\r\\nNotes:\\r\\n\\r\\n- queries builders add default parameters to the query, visible when getting the config, therefore we store the surface format in the configuration while still executing parsers for validation\\r\\n- I plan to implement similar validation for the pivot function in a follow up PR'",
    "cms": [
      "'add query support'",
      "'fix line length'",
      "'fix checkstyle'",
      "'fix message format'",
      "'fix indexer if no query specified'",
      "'add a simple integration test'"
    ],
    "commits": {
      "'4f3b1860514ecf1e3fa257b4b23698326f6bc6a8'": {
        "cm": "'add query support'",
        "comments": [
          "+        // at least one function must be defined",
          "+        // collect validation results from all child objects",
          "+            // todo: set job into failed state",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+    // we store the query in 2 formats: the raw format and the parsed format, because:",
          "+    // - the parsed format adds defaults, which were not part of the original and looks odd on XContent retrieval",
          "+    // - if parsing fails (e.g. query uses removed functionality), the source can be retrieved",
          "+        // we need 2 passes, but the parser can not be cloned, so we parse 1st into a map and then re-parse that for syntax checking",
          "+        // remember the registry, needed for the 2nd pass",
          "+     * Test case that ensures aggregation named objects are registered",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Utility test class to write a deprecation message on usage",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // should not happen",
          "+        // create something broken but with a source",
          "+        // lenient, passes but reports invalid",
          "+        // strict throws"
        ]
      },
      "'a533918144e3b06ca0f783740d80b899022f89ed'": {
        "cm": "'fix line length'",
        "comments": []
      },
      "'6638fc7bfb515121814a794230ddb2085fb7fe9b'": {
        "cm": "'fix checkstyle'",
        "comments": []
      },
      "'3711f6c584cc81a59a0348fa3037a7e896c1ec3d'": {
        "cm": "'fix message format'",
        "comments": []
      },
      "'5a3a7b7acc19eb0f2e113cc1b70ab770d4c4c6da'": {
        "cm": "'fix indexer if no query specified'",
        "comments": []
      },
      "'1ee568e7d85857e383fe1651a5bd6b4e95dd3d87'": {
        "cm": "'add a simple integration test'",
        "comments": [
          "+        // we expect only 1 document due to the query",
          "+        // start the transform",
          "+        // wait until the dataframe has been created and all data is available"
        ]
      }
    }
  },
  "elastic/elasticsearch_37825": {
    "id": "elastic/elasticsearch_37825",
    "body": "'Working on the principle that the QA multi node tests should be a place for large tests where ml jobs are run on actual data I removed CloseJobsIT and ReopenJobResetsFinishedTimeIT as both can be trivially tested in the yml rest tests. \\r\\n\\r\\nForecastIT was posting data in a tight loop, it turns out post data is an expensive call and it was made 101 * 15 times. A quick calculation showed that approx 6.5MB of data was being generated which is easily accommodated in a single post data call. This was the biggest saving trimming ~ 20 seconds of the time to run ForecastIT on my machine. \\r\\n\\r\\nUnfortunately this does not much of a difference in the time it takes to run the entire task\\r\\n\\r\\nFor #37339'",
    "cms": [
      "'Remove ReopenJobResetsFinishedTimeIT'",
      "'ForecastIT cut number of post data calls'",
      "'Make CloseJobsIT a yml test'"
    ],
    "commits": {
      "'a204d8d44e5dcad0f4f727453c0fa2fe05f61d00'": {
        "cm": "'Remove ReopenJobResetsFinishedTimeIT'",
        "comments": []
      },
      "'ccfd2aeb0ce89075813aab1e7bfc925ce1bd5218'": {
        "cm": "'ForecastIT cut number of post data calls'",
        "comments": []
      },
      "'f82462e8dc5738fdd318d98d4332c4afc3d06a67'": {
        "cm": "'Make CloseJobsIT a yml test'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37822": {
    "id": "elastic/elasticsearch_37822",
    "body": "'There are a couple of instances of undocumented empty statements all across the\\r\\ncode base. While they are mostly harmless, they make the code hard to read and\\r\\nare potentially error-prone. Removing most of these instances and marking blocks\\r\\nthat look empty by intention as such.'",
    "cms": [
      "'Remove empty statements\\n\\nThere are a couple of instances of undocumented empty statements all across the\\ncode base. While they are mostly harmless, they make the code hard to read and\\nare potentially error-prone. Removing most of these instances and marking blocks\\nthat look empty by intention as such.'",
      "'Change test, slightly more verbose but less confusing'"
    ],
    "commits": {
      "'982f1e350a4aae555afa9274d6cf9ac2ab09a3f5'": {
        "cm": "'Remove empty statements\\n\\nThere are a couple of instances of undocumented empty statements all across the\\ncode base. While they are mostly harmless, they make the code hard to read and\\nare potentially error-prone. Removing most of these instances and marking blocks\\nthat look empty by intention as such.'",
        "comments": [
          "+                // empty while body",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+     *"
        ]
      },
      "'12a12ab9d510e06c21a95e0ca4e08c59e349c982'": {
        "cm": "'Change test, slightly more verbose but less confusing'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37821": {
    "id": "elastic/elasticsearch_37821",
    "body": "'Handling LLRC when **live node size < 0**'",
    "cms": [
      "'Fix for #37739'",
      "'Adding Test Case'",
      "'Merge remote-tracking branch 'upstream/master''"
    ],
    "commits": {
      "'5c4ffc8a8cd880bfeefc8590f06e539c3ab1ff45'": {
        "cm": "'Fix for #37739'",
        "comments": []
      },
      "'b5625fd2bb786829266ae11ccf241fd2281c63ac'": {
        "cm": "'Adding Test Case'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */"
        ]
      },
      "'ac497ff204e5240cdc8a961335cb0ac5edb7b2cc'": {
        "cm": "'Merge remote-tracking branch 'upstream/master''",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                                        // ignore, this is an expected exception",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name.",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+            // always track total hits accurately",
          "+     *"
        ]
      }
    }
  },
  "elastic/elasticsearch_37819": {
    "id": "elastic/elasticsearch_37819",
    "body": "'The intention is to make the changes of\\r\\nfa76a84fb78c7dfb6544f430b505c0ded5f5be73 work correctly in 6.5'",
    "cms": [
      "'Add a test.version_under_test property\\n\\nThe intention is to make the changes of\\nfa76a84fb78c7dfb6544f430b505c0ded5f5be73 work correctly in 6.5'"
    ],
    "commits": {
      "'f985cc7cef5a4598073b518816186856f8d5160b'": {
        "cm": "'Add a test.version_under_test property\\n\\nThe intention is to make the changes of\\nfa76a84fb78c7dfb6544f430b505c0ded5f5be73 work correctly in 6.5'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37813": {
    "id": "elastic/elasticsearch_37813",
    "body": "'When an index is frozen, two index settings are updated (`index.frozen` and `index.search.throttled`) but the settings version is left unchanged and does not reflect the settings update. This pull request change the TransportFreezeIndexAction so that it also increases the settings version when an index is frozen/unfrozen.\\r\\n\\r\\nThis issue has been caught while working on the replication of closed indices (#3388) in which index metadata for a closed index are updated to frozen metadata and[ this specific assertion](https://github.com/elastic/elasticsearch/blob/43bfdd32eea161a9084d7b49b12261ea32a7983c/server/src/main/java/org/elasticsearch/index/IndexService.java#L643) tripped.'",
    "cms": ["'Freezing an index should increase its index settings version'"],
    "commits": {
      "'a6678c5e0d7e302fe61d1a968a9157461ed3d199'": {
        "cm": "'Freezing an index should increase its index settings version'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37811": {
    "id": "elastic/elasticsearch_37811",
    "body": "'To safely support rolling upgrades from 6.x to 7.x we need the 7.x nodes to\\r\\nhave access to the `minimum_master_nodes` setting, but this setting is\\r\\notherwise unnecessary in 7.x and we would like to remove it.  Since a rolling\\r\\nupgrade from 6.x to 7.x involves the 7.x nodes joining a 6.x master, we can\\r\\navoid the need for setting `minimum_master_nodes` on the 7.x nodes by copying\\r\\nthe value set on the 6.x master.\\r\\n\\r\\nThis change exposes the master's node-level value for `minimum_master_nodes`\\r\\nvia a field in the cluster state.\\r\\n\\r\\nRelates #37701'",
    "cms": [
      "'Expose minimum_master_nodes in cluster state\\n\\nTo safely support rolling upgrades from 6.x to 7.x we need the 7.x nodes to\\nhave access to the `minimum_master_nodes` setting, but this setting is\\notherwise unnecessary in 7.x and we would like to remove it.  Since a rolling\\nupgrade from 6.x to 7.x involves the 7.x nodes joining a 6.x master, we can\\navoid the need for setting `minimum_master_nodes` on the 7.x nodes by copying\\nthe value set on the 6.x master.\\n\\nThis change exposes the master's node-level value for `minimum_master_nodes`\\nvia a field in the cluster state.'",
      "'Line length'"
    ],
    "commits": {
      "'de6f242a87a18a217d0a07f45d684ef4f7409aec'": {
        "cm": "'Expose minimum_master_nodes in cluster state\\n\\nTo safely support rolling upgrades from 6.x to 7.x we need the 7.x nodes to\\nhave access to the `minimum_master_nodes` setting, but this setting is\\notherwise unnecessary in 7.x and we would like to remove it.  Since a rolling\\nupgrade from 6.x to 7.x involves the 7.x nodes joining a 6.x master, we can\\navoid the need for setting `minimum_master_nodes` on the 7.x nodes by copying\\nthe value set on the 6.x master.\\n\\nThis change exposes the master's node-level value for `minimum_master_nodes`\\nvia a field in the cluster state.'",
        "comments": [
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      },
      "'f7e29dbc782e7e42bc5584547eebd3c279f0e958'": {
        "cm": "'Line length'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37805": {
    "id": "elastic/elasticsearch_37805",
    "body": "'When we can't map the principal attribute from the configured SAML\\r\\nattribute in the realm settings, we can't complete the\\r\\nauthentication. We return an error to the user indicating this and\\r\\nwe present them with a list of attributes we did get from the SAML\\r\\nresponse to point out that the expected one was not part of that\\r\\nlist. This list will never contain the NameIDs though as they are\\r\\nnot part of the SAMLAttribute list. So we might have a NameID but\\r\\njust with a different format. '",
    "cms": [
      "'Better msg on unmapped principal attribute\\n\\nWhen we can't map the principal attribute from the configured SAML\\nattribute in the realm settings, we can't complete the\\nauthentication. We return an error to the user indicating this and\\nwe present them with a list of attributes we did get from the SAML\\nresponse to point out that the expected one was not part of that\\nlist. This list will never contain the NameIDs though as they are\\nnot part of the SAMLAttribute list.'"
    ],
    "commits": {
      "'bc5ab2ed7c850d91ef6bb3e84add9de0d25feb83'": {
        "cm": "'Better msg on unmapped principal attribute\\n\\nWhen we can't map the principal attribute from the configured SAML\\nattribute in the realm settings, we can't complete the\\nauthentication. We return an error to the user indicating this and\\nwe present them with a list of attributes we did get from the SAML\\nresponse to point out that the expected one was not part of that\\nlist. This list will never contain the NameIDs though as they are\\nnot part of the SAMLAttribute list.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37804": {
    "id": "elastic/elasticsearch_37804",
    "body": "'Lacking tests for this made the bug go through and discovered by manual testing. This PR should fix the bug and, also, adds tests. Bug introduced with https://github.com/elastic/elasticsearch/pull/37602'",
    "cms": [
      "'Fix NPE in BasicFormatter'",
      "'Merge branch 'master' of https://github.com/elastic/elasticsearch into fix_formatter_npe'",
      "'Removed left-overs'",
      "'Merge branch 'master' of https://github.com/elastic/elasticsearch into fix_formatter_npe'"
    ],
    "commits": {
      "'bf96e34277f8b9e3c763c395d35801776fcbd01e'": {
        "cm": "'Fix NPE in BasicFormatter'",
        "comments": []
      },
      "'42816456ea434140c475eee9789000e961903372'": {
        "cm": "'Merge branch 'master' of https://github.com/elastic/elasticsearch into fix_formatter_npe'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      },
      "'bba82100af21915827d583e0164e7cd9801c0888'": {
        "cm": "'Removed left-overs'",
        "comments": []
      },
      "'d2f0f61b8a1b42d6d82e65e1c5226cf0ea6d799b'": {
        "cm": "'Merge branch 'master' of https://github.com/elastic/elasticsearch into fix_formatter_npe'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37803": {
    "id": "elastic/elasticsearch_37803",
    "body": "'Improve the Exception and the error message returned when 2nd argument\\r\\nof PERCENTILE and PERCENTILE_RANK is not a constant.\\r\\n'",
    "cms": [
      "'SQL: Improve handling of invalide args for PERCENTILE/PERCENTILE_RANK\\n\\nImprove the Exception and the error message returned when 2nd argument\\nof PERCENTILE and PERCENTILE_RANK is not a constant.'",
      "'Address comment'"
    ],
    "commits": {
      "'8a6acb88ccace9e2193c80c7d103642518b37f23'": {
        "cm": "'SQL: Improve handling of invalide args for PERCENTILE/PERCENTILE_RANK\\n\\nImprove the Exception and the error message returned when 2nd argument\\nof PERCENTILE and PERCENTILE_RANK is not a constant.'",
        "comments": []
      },
      "'078dd77392c445aaaeef471b6fef6a31baae7d60'": {
        "cm": "'Address comment'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37802": {
    "id": "elastic/elasticsearch_37802",
    "body": "'Abdicates to another master-eligible node once the active master is reconfigured out of the voting configuration, for example through the use of voting configuration exclusions.\\r\\n\\r\\nFollow-up to #37712'",
    "cms": [
      "'Only master with voting power'",
      "'empty'",
      "'add docs'",
      "'treesets everywhere'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
      "'fix test'",
      "'moar sets'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
      "'unused import'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
      "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'"
    ],
    "commits": {
      "'aabbd58e5d941a4ddd8f9b2fd45f20973711790a'": {
        "cm": "'Only master with voting power'",
        "comments": [
          "+        // handling of start join messages on the local node will be dispatched to the generic thread-pool",
          "+        // explicitly move node to candidate state so that the next cluster state update task yields an onNoLongerMaster event",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      },
      "'ca8f04719abc0a48dbe8652329b9b7a286c24213'": {
        "cm": "'empty'",
        "comments": []
      },
      "'8170a41c908a0e61250b23553f8c788e8b55eb1b'": {
        "cm": "'add docs'",
        "comments": []
      },
      "'cadf2a75f8da068da8a1d9d3de99f803ad8a5cf5'": {
        "cm": "'treesets everywhere'",
        "comments": [
          "+     * @param currentMaster  The current master. Unless retired, we prefer to keep the current master in the config."
        ]
      },
      "'52aeca85460a85885825f5770cc8194daf477851'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // ensures we don't block",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name.",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      },
      "'7300c4bb62546ed08e540c407815c57c75bc2fef'": {
        "cm": "'fix test'",
        "comments": [
          "+        // removing the master from the voting configuration immediately triggers the master to step down"
        ]
      },
      "'4e5886c4f9f098f8b539901f678df41d55ca4f11'": {
        "cm": "'moar sets'",
        "comments": [
          "+         *  - nonRetiredMaster",
          "+         *  - nonRetiredNotMasterInConfigNotLiveIds",
          "+            // live master first, then other live nodes, preferring the current config, and if we need more then use non-live nodes"
        ]
      },
      "'dc24a425277d12857fb3e88024a4db0d352d063d'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+                                        // ignore, this is an expected exception",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+            // always track total hits accurately",
          "+     *"
        ]
      },
      "'ae6728c3c467776608d7eaac6ef88f372719eb9e'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // 24 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+ */",
          "+    /**",
          "+     * A callback when a new retention lease is created. In practice, this callback invokes the retention lease sync action, to sync",
          "+     * retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     * Adds a new retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     * @param shardId             the shard ID",
          "+     * @param allocationId        the allocation ID",
          "+     * @param indexSettings       the index settings",
          "+     * @param globalCheckpoint    the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onNewRetentionLease a callback when a new retention lease is created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+            // Make it easy to detect this error in ShardFollowNodeTask:",
          "+            // (adding a metadata header instead of introducing a new exception that extends ElasticsearchException)",
          "+        // Do restore from repository here and after that",
          "+        // start() should be invoked and stats should be reset",
          "+        // For now handle like any other failure:",
          "+        // need a more robust approach to avoid the scenario where an outstanding request",
          "+        // can trigger another restore while the shard was restored already.",
          "+        // https://github.com/elastic/elasticsearch/pull/37562#discussion_r250009367",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed.",
          "+        // user_d can view repos and create and view snapshots on existings repos, everything else is DENIED",
          "+        // user_d can create snapshots, but not concurrently",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // view repositories",
          "+        // view all indices, including restricted ones",
          "+        // create snapshot that includes restricted indices",
          "+        // view snapshots for repo",
          "+        // try search all",
          "+        // try create index",
          "+        // try create another repo",
          "+        // try delete repo",
          "+        // try fumble with snapshots",
          "+        // try destructive/revealing actions on all indices",
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      },
      "'45093bf8371a2ee0cfd7ba35ec9eede29afcb279'": {
        "cm": "'unused import'",
        "comments": []
      },
      "'cb9f65bea30fc6547ff9515fe7f99460fa38c778'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": [
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0"
        ]
      },
      "'30bb952c7cb827c3088c0b922170b11ba229f42e'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+        // test the fields is not overwritten"
        ]
      },
      "'88d82dbb23537d73571beabd133b5819149983e9'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-master-with-voting-power'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37797": {
    "id": "elastic/elasticsearch_37797",
    "body": "'We start using this class more often. Let's make it a top-level class.'",
    "cms": [
      "'Make ChannelActionListener a top-level class\\n\\nWe start using this class more often. This commit makes it a top-level class.'",
      "'static logger'",
      "'Merge branch 'master' into channel-listener'"
    ],
    "commits": {
      "'c631cc6cb750a0434fddee123fba343c715a44ff'": {
        "cm": "'Make ChannelActionListener a top-level class\\n\\nWe start using this class more often. This commit makes it a top-level class.'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      },
      "'a0afac5c9586d02ada5f1e515f899871acdfdb05'": {
        "cm": "'static logger'",
        "comments": []
      },
      "'ef92abb3e8a764ddf2d1ea0bbe4f307733834dd3'": {
        "cm": "'Merge branch 'master' into channel-listener'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir."
        ]
      }
    }
  },
  "elastic/elasticsearch_37796": {
    "id": "elastic/elasticsearch_37796",
    "body": "'From previous PRs, we've already added support for `include_type_name` to\\r\\nthe get mapping API. We had also taken an approach to the HLRC where the\\r\\nserver-side `GetMappingResponse#fromXContent` could only handle typeless\\r\\ninput.\\r\\n\\r\\nThis PR updates the HLRC for 'get mapping' to be in line with our new approach:\\r\\n- Add a typeless 'get mappings' method to the Java HLRC, that accepts new\\r\\nclient-side request and response objects. This new response only handles\\r\\ntypeless mapping definitions.\\r\\n- Switch the old version of `GetMappingResponse` back to expecting typed\\r\\nmappings, and deprecate the corresponding method on the HLRC.\\r\\n\\r\\nFinally, the PR also does some small, related clean-up around 'get field mappings'.'",
    "cms": [
      "'Support both typed and typeless 'get mapping' requests in the HLRC.'",
      "'Fix a typo in IndicesClient.'",
      "'Add some missing deprecated annotations in IndicesRequestConverters.'",
      "'Minor clean up in GetMappingsRequest.'",
      "'Remove equals and hashCode from GetMappingsResponse.'",
      "'Some clean up in IndicesRequestConvertersTests.'",
      "'In GetMappingsResponseTests, generate a random server object as opposed to a client one.'",
      "'Fix more typos in IndicesClient.'",
      "'Merge remote-tracking branch 'upstream/master' into get-mapping-hlrc'",
      "'In GetMappingsResponseTests, switch to comparing client-side objects.'",
      "'Merge remote-tracking branch 'upstream/master' into get-mapping-hlrc'"
    ],
    "commits": {
      "'acf286f9106e14bdf81837c1694703fa1189aba3'": {
        "cm": "'Support both typed and typeless 'get mapping' requests in the HLRC.'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses an request and response objects which still refers to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we first convert it to a server",
          "+    // class, and then use its method (with include_type_name set to 'false') to generate the xContent.",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */"
        ]
      },
      "'4e05f79687441cc7cf9584a4aada28c4cda5c59f'": {
        "cm": "'Fix a typo in IndicesClient.'",
        "comments": [
          "+     * @deprecated This method uses request and response objects which still refers to types, a deprecated feature."
        ]
      },
      "'28f425d0e590fdae8448f3ab0890cc5a720ece8b'": {
        "cm": "'Add some missing deprecated annotations in IndicesRequestConverters.'",
        "comments": []
      },
      "'05c870dcd0330ebc0dec564b1dd58fec00f7ab72'": {
        "cm": "'Minor clean up in GetMappingsRequest.'",
        "comments": []
      },
      "'06805cc431f9d25bdcbe70c4ab24181b6b200fa2'": {
        "cm": "'Remove equals and hashCode from GetMappingsResponse.'",
        "comments": []
      },
      "'3b0270916edeae7eb49b4c2dd379d7a8d87f3e85'": {
        "cm": "'Some clean up in IndicesRequestConvertersTests.'",
        "comments": []
      },
      "'bd476a01f02ecee154353a9cb8cd330d1ed02370'": {
        "cm": "'In GetMappingsResponseTests, generate a random server object as opposed to a client one.'",
        "comments": [
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random server object, serializing it to xContent, then parsing it back as a client object. We check",
          "+    // equality by converting the parsed client object to a server one, and comparing it to the original."
        ]
      },
      "'811c473d2ea959a47a09a74c3b6535e22c552081'": {
        "cm": "'Fix more typos in IndicesClient.'",
        "comments": [
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature."
        ]
      },
      "'b2a19e4deae972f2f8ab473ef34fcfad2cd99ef9'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into get-mapping-hlrc'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // ensures we don't block",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      },
      "'705880dc8a183f6082343530db82d828315a69fc'": {
        "cm": "'In GetMappingsResponseTests, switch to comparing client-side objects.'",
        "comments": [
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one."
        ]
      },
      "'e122a1c8f28ac158603c3e4b1799a302237e69ab'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into get-mapping-hlrc'",
        "comments": [
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+                        // Flatten multipoints",
          "+    /**",
          "+     * A callback when a new retention lease is created. In practice, this callback invokes the retention lease sync action, to sync",
          "+     * retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     * Adds a new retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     * @param shardId             the shard ID",
          "+     * @param allocationId        the allocation ID",
          "+     * @param indexSettings       the index settings",
          "+     * @param globalCheckpoint    the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onNewRetentionLease a callback when a new retention lease is created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+                                        // ignore, this is an expected exception",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed.",
          "+            // always track total hits accurately",
          "+     *",
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      }
    }
  },
  "elastic/elasticsearch_37795": {
    "id": "elastic/elasticsearch_37795",
    "body": "'Backport - creating PR just to make sure the build succeeds \\r\\n\\r\\n- Add deprecation warning to RestGetFieldMappingAction\\r\\n- Add two new java HRLC classes GetFieldMappingsRequest and\\r\\nGetFieldMappingsResponse. These classes use new typeless forms\\r\\nof a request and response, and differ in that from the server\\r\\nversions.\\r\\n\\r\\nBackport for #37667\\r\\nRelates to #35190'",
    "cms": [
      "'Deprecate types in get field mapping API (#37667)\\n\\n- Add deprecation warning to RestGetFieldMappingAction\\n- Add two new java HRLC classes GetFieldMappingsRequest and\\nGetFieldMappingsResponse. These classes use new typeless forms\\nof a request and response, and differ in that from the server\\nversions.\\n\\nBackport for #37667\\nRelates to #35190'",
      "'Address build failures'",
      "'Address build failures'"
    ],
    "commits": {
      "'234578d8e95ed7686a07fc6370f5c2b098a2036a'": {
        "cm": "'Deprecate types in get field mapping API (#37667)\\n\\n- Add deprecation warning to RestGetFieldMappingAction\\n- Add two new java HRLC classes GetFieldMappingsRequest and\\nGetFieldMappingsResponse. These classes use new typeless forms\\nof a request and response, and differ in that from the server\\nversions.\\n\\nBackport for #37667\\nRelates to #35190'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */"
        ]
      },
      "'cf0385f8f5168b865b5ae1265ae37212dfc688d5'": {
        "cm": "'Address build failures'",
        "comments": []
      },
      "'7cd2c01c5cbbc08b1113018ffb0269ebf0bc3e11'": {
        "cm": "'Address build failures'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37794": {
    "id": "elastic/elasticsearch_37794",
    "body": "'Ranaming as follows:\\r\\nfeature -> rank_feature\\r\\nfeature_vector -> rank_features\\r\\nfeature query -> rank_feature query\\r\\n\\r\\nRanaming is done to distinguish from other vector types.\\r\\n\\r\\nCloses #36723'",
    "cms": [
      "'Rename feature, feature_vector and feature_query\\n\\nRanaming as follows:\\nfeature -> rank_feature\\nfeature_vector -> rank_features\\nfeature query -> rank_feature query\\n\\nRanaming is done to distinguish from other vector types.\\n\\nCloses #36723'",
      "'Address build failures'",
      "'Merge branch 'master' into rename-feature-to-rank_feature'"
    ],
    "commits": {
      "'e970ba1a8020bfef82720297a65b21b0f4ca7355'": {
        "cm": "'Rename feature, feature_vector and feature_query\\n\\nRanaming as follows:\\nfeature -> rank_feature\\nfeature_vector -> rank_features\\nfeature query -> rank_feature query\\n\\nRanaming is done to distinguish from other vector types.\\n\\nCloses #36723'",
        "comments": [
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field."
        ]
      },
      "'bd1968badfff4ef73fb19c41930030c79c7038d7'": {
        "cm": "'Address build failures'",
        "comments": []
      },
      "'97066cf87ad872206eac883f6918f822341e2f19'": {
        "cm": "'Merge branch 'master' into rename-feature-to-rank_feature'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // ensures we don't block",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      }
    }
  },
  "elastic/elasticsearch_37792": {
    "id": "elastic/elasticsearch_37792",
    "body": "'The example plugins are currently built within the build-tools integ\\r\\ntests as a means to ensure the gradle plugin works for external plugin\\r\\nbuilds. These tests generate a dummy build.gradle, and a dummy local\\r\\nmaven repository to find the local builds dependencies in. Currently\\r\\nthat build-tools dependency uses \\'+\\' as the version. However, this\\r\\nallows gradle to find the \\'latest\\' version, and unfortunately gradle has\\r\\nits own plugin repository which is apparently connected to jcenter. This\\r\\nrecently triggered a flood of CI failures when jcenter suddenly pulled\\r\\nalpha2, and all builds started trying to use that instead of the locally\\r\\nbuilt build-tools. This commit uses the explicit version of build-tools\\r\\nthat was build locally, which will cause resolution to stop when the\\r\\nlocal repo is first checked.'",
    "cms": [
      "'Use explicit version for build-tools in example plugin integ tests\\n\\nThe example plugins are currently built within the build-tools integ\\ntests as a means to ensure the gradle plugin works for external plugin\\nbuilds. These tests generate a dummy build.gradle, and a dummy local\\nmaven repository to find the local builds dependencies in. Currently\\nthat build-tools dependency uses \\'+\\' as the version. However, this\\nallows gradle to find the \\'latest\\' version, and unfortunately gradle has\\nits own plugin repository which is apparently connected to jcenter. This\\nrecently triggered a flood of CI failures when jcenter suddenly pulled\\nalpha2, and all builds started trying to use that instead of the locally\\nbuilt build-tools. This commit uses the explicit version of build-tools\\nthat was build locally, which will cause resolution to stop when the\\nlocal repo is first checked.'",
      "'use final'",
      "'clarify comment'"
    ],
    "commits": {
      "'258e092cf69d30110f696264f04856e9744efc6c'": {
        "cm": "'Use explicit version for build-tools in example plugin integ tests\\n\\nThe example plugins are currently built within the build-tools integ\\ntests as a means to ensure the gradle plugin works for external plugin\\nbuilds. These tests generate a dummy build.gradle, and a dummy local\\nmaven repository to find the local builds dependencies in. Currently\\nthat build-tools dependency uses \\'+\\' as the version. However, this\\nallows gradle to find the \\'latest\\' version, and unfortunately gradle has\\nits own plugin repository which is apparently connected to jcenter. This\\nrecently triggered a flood of CI failures when jcenter suddenly pulled\\nalpha2, and all builds started trying to use that instead of the locally\\nbuilt build-tools. This commit uses the explicit version of build-tools\\nthat was build locally, which will cause resolution to stop when the\\nlocal repo is first checked.'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because the esplugin plugin will add more repos, we want to get",
          "+        // the version"
        ]
      },
      "'17e6abf2596f0f1abf0849e87451015f7f3094d5'": {
        "cm": "'use final'",
        "comments": []
      },
      "'9f8e807a9caf69018ba0e3b08ca715d83b6d7180'": {
        "cm": "'clarify comment'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools"
        ]
      }
    }
  },
  "elastic/elasticsearch_37791": {
    "id": "elastic/elasticsearch_37791",
    "body": "'Related to elastic/beats#10222\\r\\n\\r\\nThis PR removes the \\'beta[]\\' tags from the Metricbeat monitoring information in the Elasticsearch Reference.'",
    "cms": ["'[DOCS] Remove beta tag from metricbeat monitoring'"],
    "commits": {
      "'e3baee3048e66105594611d96358d2bdf2f902cb'": {
        "cm": "'[DOCS] Remove beta tag from metricbeat monitoring'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37788": {
    "id": "elastic/elasticsearch_37788",
    "body": "'Per #37512 we're removing TLS 1.0 from the default protocols list in 7.0\\r\\n\\r\\nThis change adds deprecation warnings if any SSL context is relying on the default protocols list _and_ a TLSv1 connection is established (incoming or outgoing).\\r\\n\\r\\nThis covers:\\r\\n- Incoming connections: transport\\r\\n- Incoming connections: Rest (https) \\r\\n- Outgoing connections: Watcher (`HttpClient`)\\r\\n- Outgoing connections: Monitoring (`HttpExporter`)\\r\\n- Outgoing connections: LDAP / AD Realm (`SessionFactory`)\\r\\n- Outgoing connections: SAML metdata loading over https (`SamlRealm`)\\r\\n\\r\\nDeprecations for incoming HTTP connections are included in the `Warning` headers sent back to that client. For the other contexts, the deprecation log must be used.  '",
    "cms": [
      "'Add deprecation warning if TLSv1 used on transport'",
      "'Add warnings if TLSv1 is used implicitly\\n\\nTLSv1.0 will be removed from the default list of supported protocols\\nin v7.0.\\nThis change adds deprecation warnings when a TLS v1.0 connection is\\nused without having been explictly configured as a supported protocol.\\nSuch situations will fail in Elasticsearch 7.x'",
      "'Add tests for TLSv1 deprecation warnings'",
      "'Merge branch '6.x' into warn-use-tls10'",
      "'Add TLSv1 deprecation checks for LDAP connections'",
      "'Fix broken LDAP tests'",
      "'Add TLSv1 deprecation to SAML metadata loading'",
      "'Merge branch '6.x' into warn-use-tls10'"
    ],
    "commits": {
      "'deac7fa67f698358a6a075b3af8de0ab8dd3099a'": {
        "cm": "'Add deprecation warning if TLSv1 used on transport'",
        "comments": []
      },
      "'e1e47261c1cdfaeb9376f7c21be7f1227c62bb9b'": {
        "cm": "'Add warnings if TLSv1 is used implicitly\\n\\nTLSv1.0 will be removed from the default list of supported protocols\\nin v7.0.\\nThis change adds deprecation warnings when a TLS v1.0 connection is\\nused without having been explictly configured as a supported protocol.\\nSuch situations will fail in Elasticsearch 7.x'",
        "comments": [
          "+        // This is handled here (rather than as an interceptor) so we know which profile was used, and can",
          "+        // provide the correct setting to report on (this may be technically also possible in a transport interceptor, but the",
          "+        // existing security interceptor doesn't have that now, and adding it would be a more intrusive change).",
          "+     * @param tlsDeprecationHandler a handler in case TLSv1.0 is used for an SSL connection under this strategy",
          "+     * and {@link #sslIOSessionStrategy(SSLConfiguration, TLSv1DeprecationHandler)}",
          "+     * (Deprecated, but not removed because monitoring uses dynamic SSL settings)",
          "+        // Using the hostname verifier for this is just ugly, but HTTP client doesn't expose the SSLSession in many places",
          "+        // and this is the easiest one to hook into in a non-intrusive way",
          "+     * This method only exists to simplify testing of {@link #sslIOSessionStrategy(Settings, TLSv1DeprecationHandler)} because",
          "+     * {@link SSLIOSessionStrategy} does not expose any of the parameters that you give it.",
          "+/*",
          "+ * ELASTICSEARCH CONFIDENTIAL",
          "+ * __________________",
          "+ *",
          "+ *  [2019] Elasticsearch Incorporated. All Rights Reserved.",
          "+ *",
          "+ * NOTICE:  All information contained herein is, and remains",
          "+ * the property of Elasticsearch Incorporated and its suppliers,",
          "+ * if any.  The intellectual and technical concepts contained",
          "+ * herein are proprietary to Elasticsearch Incorporated",
          "+ * and its suppliers and may be covered by U.S. and Foreign Patents,",
          "+ * patents in process, and are protected by trade secret or copyright law.",
          "+ * Dissemination of this information or reproduction of this material",
          "+ * is strictly forbidden unless prior written permission is obtained",
          "+ * from Elasticsearch Incorporated.",
          "+ */",
          "+/**",
          "+ * Handles logging deprecation warnings when a TLSv1.0 SSL connection is used, and that SSL context relies on",
          "+ * the default list of supported_protocols (in Elasticsearch 7.0, this list will not include TLS 1.0).",
          "+ */",
          "+            // Use a \\'LRU\\' key that is unique per day. That way each description (source address, etc) will be logged once per day.",
          "+            // This is handled here so that the deprecation warnings are returned to the HTTP client.",
          "+            // If it were done in the network layer (SecurityNetty4HttpServerTransport) then the deprecation warning",
          "+            //  would be cleared from the thread context when the request was handled",
          "+            // Set the description to include the remote host (because it's hard to fix clients if you don't know who they are",
          "+            // But don't include the port because then every connection would have a different deprecation key"
        ]
      },
      "'cfd674e8e6d05d692080325b73213f9d94b81fbb'": {
        "cm": "'Add tests for TLSv1 deprecation warnings'",
        "comments": [
          "+    // Package protected for testing",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+    /**",
          "+     * Instantiates a webserver with https",
          "+     * @param sslContext The SSL context to be used for encryption",
          "+     * @param needClientAuth Should clientAuth be used, which requires a client side certificate",
          "+     * @param supportedProtocols Which SSL/TLS protocols version should be supported",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // The test base class will enforce that there are no deprecation warnings",
          "+        // The test base class will enforce that there are no deprecation warnings",
          "+        // The test base class will enforce that there are no deprecation warnings",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // always let the watcher resources run for these tests; HttpExporterResourceTests tests it flipping on/off",
          "+            // The HTTP Exporter behaves slightly differently if secure settings are in use (because they cannot be dynamically reloaded)",
          "+            // The HTTP Exporter behaves slightly differently if secure settings are in use (because they cannot be dynamically reloaded)",
          "+                // For some unknown reason, verification mode 'none' is needed with TLSv1, but only for some test seeds."
        ]
      },
      "'85269f725cbce1e5b0a1828ea3e9be5f658322bd'": {
        "cm": "'Merge branch '6.x' into warn-use-tls10'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link LifecycleAction} which sets the index's priority. The higher the priority, the faster the recovery.",
          "+ */",
          "+    //package private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * True if the privileges cover restricted internal indices too. Certain indices are reserved for internal services and should be",
          "+     * transparent to ordinary users. For that matter, when granting privileges, you also have to toggle this flag to confirm that all",
          "+     * indices, including restricted ones, are in the scope of this permission. By default this is false.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+            // Create leader index:",
          "+            // Follow index, so that we can query for follow stats:",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+        // This sub object should support unknown fields, but metadata cannot contain complex extra objects or it will fail",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This may have extra json, so lets just assume that if all of the original fields from the creation are there, then its equal",
          "+        // This is the same code that is in createTestInstance in this class.",
          "+        // EMPTY is safe here because we never use namedObject",
          "+        // TODO remove in 8.0",
          "+        // TODO remove in 8.0",
          "+    /**",
          "+     * @deprecated in 6.7, can not create in 7.0, and we remove this in 8.0",
          "+     */",
          "+    /**",
          "+     * @deprecated in 6.7, can not create in 7.0, and we remove this in 8.0",
          "+     */",
          "+    /**",
          "+     * Check that the deprecated analyzer name \\'standard_html_strip\\' issues a deprecation warning for indices created until 7",
          "+     */",
          "+                // fixed_auto_queue_size wraps stuff into TimedRunnable, which is an AbstractRunnable",
          "+                // TODO: this is dangerous as it will silently swallow exceptions, and possibly miss calling a response listener",
          "+            // here, it's ok for the exception not to bubble up. Accessing the future will yield the exception",
          "+                // fixed_auto_queue_size wraps stuff into TimedRunnable, which is an AbstractRunnable",
          "+                // TODO: this is dangerous as it will silently swallow exceptions, and possibly miss calling a response listener",
          "+                    // scheduler just swallows the exception here",
          "+                    // TODO: bubble these exceptions up",
          "+            // fixed_auto_queue_size wraps stuff into TimedRunnable, which is an AbstractRunnable",
          "+            // TODO: this is dangerous as it will silently swallow exceptions, and possibly miss calling a response listener",
          "+            // scheduler just swallows the exceptions",
          "+            // TODO: bubble these exceptions up",
          "+        // SnapshotInProgressException was introduced after CoordinationStateRejectedException (id = 150),",
          "+        // which was not backported from 7.0.",
          "+    /**",
          "+     * See {@link #maybeError(Throwable, Logger)}. Uses the class-local logger.",
          "+     */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * @deprecated the settings parameters are not used, therefore the use of this constructor is deprecated.",
          "+     * Going to be removed in subsequent versions. The parameterless constructor should be used instead.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+        /*",
          "+         * We want a fast path check to avoid creating the string builder and copying characters if needed. So we walk the string looking",
          "+         * for either of the characters that we need to escape. If we find a character that needs escaping, we start over and",
          "+         */",
          "+        // first check if the string needs any encoding; this is the fast path and we want to avoid creating a string builder and copying",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A span rewrite method that extracts the first <code>maxExpansions</code> terms",
          "+ * that match the {@link MultiTermQuery} in the terms dictionary.",
          "+ * The rewrite throws an error if more than <code>maxExpansions</code> terms are found and <code>hardLimit</code>",
          "+ * is set.",
          "+ */",
          "+                        // field does not exist",
          "+        // dates starting with 8 will not be using joda but java time formatters",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A rate limiter designed for multiple concurrent users.",
          "+ */",
          "+    // TODO: This rate limiter has some concurrency issues between the two maybePause operations",
          "+                // Time to pause",
          "+    /**",
          "+     * Checks if the runnable arose from asynchronous submission of a task to an executor. If an uncaught exception was thrown",
          "+     * during the execution of this task, we need to inspect this runnable and see if it is an error that should be propagated",
          "+     * to the uncaught exception handler.",
          "+     */",
          "+                /*",
          "+                 * In theory, Future#get can only throw a cancellation exception, an interrupted exception, or an execution",
          "+                 * exception. We want to ignore cancellation exceptions, restore the interrupt status on interrupted exceptions, and",
          "+                 * inspect the cause of an execution. We are going to be extra paranoid here though and completely unwrap the",
          "+                 * exception to ensure that there is not a buried error anywhere. We assume that a general exception has been",
          "+                 * handled by the executed task or the task submitter.",
          "+                 */",
          "+                    // throw this error where it will propagate to the uncaught exception handler",
          "+                    // restore the interrupt status",
          "+        /*",
          "+         * Updating the thread local is expensive due to a shared reference that we synchronize on, so we should only do it if the thread",
          "+         * context struct changed. It will not change if we de-duplicate this value to an existing one, or if we don't add a new one because",
          "+         * we have reached capacity.",
          "+         */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Whether or not version conflicts cause the action to abort.",
          "+     * Set whether or not version conflicts cause the action to abort.",
          "+     * Set whether or not version conflicts cause the action to abort.",
          "+            // Build an appropriate query based on the analysis chain.",
          "+                // phase 1: read through the stream and assess the situation:",
          "+                // counting the number of tokens/positions and marking if we have any synonyms.",
          "+                // phase 2: based on token count, presence of synonyms, and options",
          "+                // formulate a single term, boolean, or phrase.",
          "+                    // single term",
          "+                    // graph",
          "+                    // phrase",
          "+                        // complex phrase with synonyms",
          "+                        // simple phrase",
          "+                    // phrase prefix",
          "+                    // boolean",
          "+                        // only one position, with synonyms",
          "+                        // complex case: multiple positions",
          "+            // Use the analyzer to get all the tokens, and then build an appropriate",
          "+            // query based on the analysis chain.",
          "+                    /*",
          "+                     * A {@link TokenFilter} in this {@link TokenStream} disabled the graph analysis to avoid",
          "+                     * paths explosion. See {@link org.elasticsearch.index.analysis.ShingleTokenFilterFactory} for details.",
          "+                     */",
          "+                /*",
          "+                 * Creates a boolean query from the graph token stream by extracting all the finite strings from the graph",
          "+                 * and using them to create phrase queries with the appropriate slop.",
          "+                 */",
          "+            /*",
          "+             * Creates a span near (phrase) query from a graph token stream.",
          "+             * The articulation points of the graph are visited in order and the queries",
          "+             * created at each point are merged in the returned near query.",
          "+             */",
          "+                // ignore unmapped fields",
          "+            /*",
          "+             * We have to pick some field to pass through the superclass so",
          "+             * we just pick the first field. It shouldn't matter because",
          "+             * fields are already grouped by their analyzers/types.",
          "+             */",
          "+                    // apply the field boost to groups that contain a single field",
          "+     * @see org.elasticsearch.indices.recovery.RecoveryTarget#indexTranslogOperations(List, int, long, long, ActionListener)",
          "+            // For a sequence based recovery, the target can keep its local translog",
          "+                /*",
          "+                 * add shard to replication group (shard will receive replication requests from this point on) now that engine is open.",
          "+                 * This means that any document indexed into the primary after this will be replicated to this replica as well",
          "+                 * make sure to do this before sampling the max sequence number in the next step, to ensure that we send",
          "+                 * all documents up to maxSeqNo in phase2.",
          "+                 */",
          "+                /*",
          "+                 * We need to wait for all operations up to the current max to complete, otherwise we can not guarantee that all",
          "+                 * operations in the required range will be available for replaying from the translog of the source.",
          "+                 */",
          "+     * @param listener                   a listener which will be notified with the local checkpoint on the target.",
          "+            // We need to synchronized Snapshot#next() because it's called by different threads through sendBatch.",
          "+            // Even though those calls are not concurrent, Snapshot#next() uses non-synchronized state and is not multi-thread-compatible.",
          "+                    // check if this request is past bytes threshold, and if so, send it off",
          "+        // send the leftover operations or if no operations were sent, request the target to respond with its local checkpoint",
          "+            /*",
          "+             * The maxSeenAutoIdTimestampOnPrimary received from the primary is at least the highest auto_id_timestamp from any operation",
          "+             * will be replayed. Bootstrapping this timestamp here will disable the optimization for original append-only requests",
          "+             * (source of these operations) replicated via replication. Without this step, we may have duplicate documents if we",
          "+             * replay these operations first (without timestamp), then optimize append-only requests (with timestamp).",
          "+             */",
          "+            /*",
          "+             * Bootstrap the max_seq_no_of_updates from the primary to make sure that the max_seq_no_of_updates on this replica when",
          "+             * replaying any of these operations will be at least the max_seq_no_of_updates on the primary when that op was executed on.",
          "+             */",
          "+            // update stats only after all operations completed (to ensure that mapping updates don't mess with stats)",
          "+            // roll over / flush / trim if needed",
          "+     * @param listener                            a listener which will be notified with the local checkpoint on the target",
          "+     *                                            after these operations are successfully indexed on the target.",
          "+        // before 6.0.0 we responded with an empty response so we have to maintain that",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * Unassign any persistent tasks executing on nodes that are no longer in",
          "+     * the cluster. If the task's assigment has a non-null executor node and that",
          "+     * node is no longer in the cluster then the assignment is set to",
          "+     * {@link #LOST_NODE_ASSIGNMENT}",
          "+     *",
          "+     * @param clusterState The clusterstate",
          "+     * @return If no changes the argument {@code clusterState} is returned else",
          "+     *          a copy with the modified tasks",
          "+     */",
          "+         * @param indexShard    shard to restore into",
          "+         * @param snapshotId    snapshot id",
          "+         * @param recoveryState recovery state to report progress",
          "+         * @param blobContainer the blob container to read the files from",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This context will execute a file restore of the lucene files. It is primarily designed to be used to",
          "+ * restore from some form of a snapshot. It will setup a new store, identify files that need to be copied",
          "+ * for the source, and perform the copies. Implementers must implement the functionality of opening the",
          "+ * underlying file streams for snapshotted lucene file.",
          "+ */",
          "+    /**",
          "+     * Constructs new restore context",
          "+     *",
          "+     * @param indexShard    shard to restore into",
          "+     * @param snapshotId    snapshot id",
          "+     * @param recoveryState recovery state to report progress",
          "+     * @param bufferSize    buffer size for restore",
          "+     */",
          "+    /**",
          "+     * Performs restore operation",
          "+     */",
          "+                // If the shard has no documents, it will only contain a single segments_N file for the",
          "+                // shard's snapshot.  If we are restoring a snapshot created by a previous supported version,",
          "+                // it is still possible that in that version, an empty shard has a segments_N file with an unsupported",
          "+                // version (and no checksum), because we don't know the Lucene version to assign segments_N until we",
          "+                // have written some data.  Since the segments_N for an empty shard could have an incompatible Lucene",
          "+                // version number and no checksum, even though the index itself is perfectly fine to restore, this",
          "+                // empty shard would cause exceptions to be thrown.  Since there is no data to restore from an empty",
          "+                // shard anyway, we just create the empty shard here and then exit.",
          "+                // this will throw an IOException if the store has no segments infos file. The",
          "+                // store can still have existing files but they will be deleted just before being",
          "+                // restored.",
          "+                // happens when restore to an empty shard, not a big deal",
          "+                    // in 1.3.3 we added additional hashes for .si / segments_N files",
          "+                    // to ensure we don't double the space in the repo since old snapshots",
          "+                    // don't have this hash we try to read that hash from the blob store",
          "+                    // in a bwc compatible way.",
          "+                    // if the index is broken we might not be able to read it",
          "+                // list of all existing store files",
          "+                // restore the files from the snapshot to the Lucene store",
          "+                    // if a file with a same physical name already exist in the store we need to delete it",
          "+                    // before restoring it from the snapshot. We could be lenient and try to reuse the existing",
          "+                    // store files (and compare their names/length/checksum again with the snapshot files) but to",
          "+                    // avoid extra complexity we simply delete them and restore them again like StoreRecovery",
          "+                    // does with dangling indices. Any existing store file that is not restored from the snapshot",
          "+                    // will be clean up by RecoveryTarget.cleanFiles().",
          "+            // read the snapshot data persisted",
          "+            /// now, go over and clean files that are in the store, but were not in the snapshot",
          "+    /**",
          "+     * Restores a file",
          "+     *",
          "+     * @param fileInfo file to be restored",
          "+     */",
          "+    /**",
          "+     * This is a BWC layer to ensure we update the snapshots metadata with the corresponding hashes before we compare them.",
          "+     * The new logic for StoreFileMetaData reads the entire {@code .si} and {@code segments.n} files to strengthen the",
          "+     * comparison of the files on a per-segment / per-commit level.",
          "+     */",
          "+                // we have a hash - check if our repo has a hash too otherwise we have",
          "+                // to calculate it.",
          "+                // we might have multiple parts even though the file is small... make sure we read all of it.",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Thrown on the attempt to execute an action that requires",
          "+ * that no snapshot is in progress.",
          "+ */",
          "+    /**",
          "+     * This subclass ensures to properly bubble up Throwable instances of type Error.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the preferred discovery node for this request. The remote cluster client will attempt to send",
          "+     * this request directly to this node. Otherwise, it will send the request as a proxy action that will",
          "+     * be routed by the remote cluster to this node.",
          "+     *",
          "+     * @return preferred discovery node",
          "+     */",
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+        // also check nanos of the epoch_millis formatter if it is rounded up to the nano second",
          "+        // also check nanos of the epoch_millis formatter if it is rounded up to the nano second",
          "+            // field boost is ignored on a single term query",
          "+                            // Shard should now be active since we did recover:",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Test that specifying a type while include_type_name is false",
          "+        // results in an illegal argument exception.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return whether there are any runnable tasks.",
          "+     */",
          "+    /**",
          "+     * @return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.",
          "+     */",
          "+    /**",
          "+     * @return the current (simulated) time, in milliseconds.",
          "+     */",
          "+    /**",
          "+     * Runs an arbitrary runnable task.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for immediate execution.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for future execution.",
          "+     */",
          "+    /**",
          "+     * Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with the mapping definition nested",
          "+     * under the given type name.",
          "+     */",
          "+    /**",
          "+     * Creates a new empty shard and starts it.",
          "+     *",
          "+     * @param primary controls whether the shard will be a primary or a replica.",
          "+     * @param settings the settings to use for this shard",
          "+     */",
          "+    /**",
          "+     * Creates request options designed to be used when making a call that can return warnings, for example a",
          "+     * deprecated request. The options will ensure that the given warnings are returned if all nodes are on",
          "+     * {@link Version#CURRENT} and will allow (but not require) the warnings if any node is running an older version.",
          "+     *",
          "+     * @param warnings The expected warnings.",
          "+     */",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+     */",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+    /**",
          "+     * Max bytes a node can recover per second.",
          "+     */",
          "+    /**",
          "+     * The leader must open resources for a ccr recovery. If there is no activity for this interval of time,",
          "+     * the leader will close the restore session.",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                // Only retry is the shard follow task is not stopped.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // TODO: Currently blocking actions might occur in the session closed callbacks. This dispatch",
          "+            //  may be unnecessary when we remove these callbacks.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+                    // This is currently safe to do because calling `onResponse` will serialize the bytes to the network layer data",
          "+                    // structure on the same thread. So the bytes will be copied before the reference is released.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: There should be some local timeout. And if the remote cluster returns an unknown session",
          "+        //  response, we should be able to retry by creating a new session.",
          "+        /**",
          "+         * Read bytes into the reference from the file. This method will return the offset in the file where",
          "+         * the read completed.",
          "+         *",
          "+         * @param fileName to read",
          "+         * @param reference to read bytes into",
          "+         * @return the offset of the file after the read is complete",
          "+         * @throws IOException if the read fails",
          "+         */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: Assert that x-pack ccr feature is not enabled once feature functionality has been added",
          "+        // Concurrently index new docs with mapping changes",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Test scope is important to ensure that other tests added to this suite do not interfere with the expectation in",
          "+ * testStatsWhenNoPersistentTasksMetaDataExists that the cluster state does not contain any persistent tasks metadata.",
          "+ */",
          "+    /**",
          "+     * Previously we would throw a NullPointerException when there was no persistent tasks metadata in the cluster state. This tests",
          "+     * maintains that we do not make this mistake again.",
          "+     *",
          "+     * @throws InterruptedException if we are interrupted waiting on the latch to countdown",
          "+     */",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Cancel just before attempting to fetch operations:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // The tasks will not be rescheduled as the sessions are closed.",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // Request a second file to ensure that original file is not leaked",
          "+        // Exception will be thrown if file is not closed.",
          "+        // Session starts as not idle. First task will mark it as idle",
          "+        // Task is still scheduled",
          "+        // Accessing session marks it as not-idle",
          "+            // Check session exists",
          "+        // Task is still scheduled",
          "+        // Task is cancelled when the session times out",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+ * A {@link LifecycleAction} which sets the index to be read-only.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A {@link LifecycleAction} which sets the index's priority. The higher the priority, the faster the recovery.",
          "+ */",
          "+    //package private for testing",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * Converts a CCR following index into a normal, standalone index, once the index is ready to be safely separated.",
          "+ *",
          "+ * \\'Readiness\\' is composed of two conditions:",
          "+ * 1) The index must have {@link LifecycleSettings#LIFECYCLE_INDEXING_COMPLETE} set to {@code true}, which is",
          "+ *      done automatically by {@link RolloverAction} (or manually).",
          "+ * 2) The index must be up to date with the leader, defined as the follower checkpoint being",
          "+ *      equal to the global checkpoint for all shards.",
          "+ */",
          "+        // There are no settings to change, so therefor this action should be safe:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */"
        ]
      },
      "'412cdefa78a072144776670cce0b0293e76c45da'": {
        "cm": "'Add TLSv1 deprecation checks for LDAP connections'",
        "comments": []
      },
      "'e324de5cfed38c678699092839d2ac5ad76d51dd'": {
        "cm": "'Fix broken LDAP tests'",
        "comments": []
      },
      "'7b6cbe32b130c3856399f7442be999f811016384'": {
        "cm": "'Add TLSv1 deprecation to SAML metadata loading'",
        "comments": []
      },
      "'db004169c22d60dc624526f3c81dfe6da9d8b3f5'": {
        "cm": "'Merge branch '6.x' into warn-use-tls10'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object and also uses request options instead of headers.",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object and also uses request objects instead of headers.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 22 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This class represents a trust configuration that corresponds to the default trusted CAs of the JDK",
          "+ */",
          "+    /**",
          "+     * Create a trust config that uses System properties to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * Create a trust config that uses supplied {@link BiFunction} to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * @param trustStorePassword the password for the truststore. It applies only when PKCS#11 tokens are used, is null otherwise",
          "+     */",
          "+    /**",
          "+     * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore",
          "+     * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where",
          "+     * we only need to pass the password for reading Private Key entries ).",
          "+     *",
          "+     * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise",
          "+     */",
          "+/*",
          "+ */",
          "+/**",
          "+ * A bare-minimum ASN.1 DER decoder, just having enough functions to",
          "+ * decode PKCS#1 private keys in order to remain JCE/JVM agnostic.",
          "+ * <p>",
          "+ * Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/",
          "+ * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java",
          "+ */",
          "+    // Constructed Flag",
          "+    // Tag and data types",
          "+        // getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't",
          "+        // force us into allocating a very large array",
          "+    /**",
          "+     * Decode the length of the field. Can only support length",
          "+     * encoding up to 4 octets.",
          "+     * <p>",
          "+     *          In BER/DER encoding, length can be encoded in 2 forms:",
          "+     * </p>",
          "+     * <ul>",
          "+     * <li>Short form. One octet. Bit 8 has value \\'0\\' and bits 7-1",
          "+     * give the length.",
          "+     * </li>",
          "+     * <li>Long form. Two to 127 octets (only 4 is supported here).",
          "+     * Bit 8 of first octet has value \\'1\\' and bits 7-1 give the",
          "+     * number of additional length octets. Second and following",
          "+     * octets give the length, base 256, most significant digit first.",
          "+     * </li>",
          "+     * </ul>",
          "+     *",
          "+     * @return The length as integer",
          "+     */",
          "+        // A single byte short length",
          "+        // We can't handle length longer than 4 bytes",
          "+    /**",
          "+     * An ASN.1 TLV. The object is not parsed. It can",
          "+     * only handle integers.",
          "+     *",
          "+     * @author zhang",
          "+     */",
          "+        /**",
          "+         * Construct a ASN.1 TLV. The TLV could be either a",
          "+         * constructed or primitive entity.",
          "+         * <p>",
          "+         *     The first byte in DER encoding is made of following fields:",
          "+         * </p>",
          "+         * <pre>",
          "+         * -------------------------------------------------",
          "+         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|",
          "+         * -------------------------------------------------",
          "+         * |  Class    | CF  |     +      Type             |",
          "+         * -------------------------------------------------",
          "+         * </pre>",
          "+         * <ul>",
          "+         * <li>Class: Universal, Application, Context or Private",
          "+         * <li>CF: Constructed flag. If 1, the field is constructed.",
          "+         * <li>Type: This is actually called tag in ASN.1. It",
          "+         * indicates data type (Integer, String) or a construct",
          "+         * (sequence, choice, set).",
          "+         * </ul>",
          "+         *",
          "+         * @param tag    Tag or Identifier",
          "+         * @param length Length of the field",
          "+         * @param value  Encoded octet string for the field.",
          "+         */",
          "+        /**",
          "+         * For constructed field, return a parser for its content.",
          "+         *",
          "+         * @return A parser for the construct.",
          "+         */",
          "+        /**",
          "+         * Get the value as integer",
          "+         *",
          "+         * @return BigInteger",
          "+         */",
          "+                    // octet string is basically a byte array",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that does nothing (provides a null key manager)",
          "+ */",
          "+        // Enforce a single instance",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A variety of utility methods for working with or constructing {@link KeyStore} instances.",
          "+ */",
          "+    /**",
          "+     * Make a best guess about the \\'type\\' (see {@link KeyStore#getType()}) of the keystore file located at the given {@code Path}.",
          "+     * This method only references the <em>file name</em> of the keystore, it does not look at its contents.",
          "+     */",
          "+    /**",
          "+     * Read the given keystore file.",
          "+     *",
          "+     * @throws SslConfigException       If there is a problem reading from the provided path",
          "+     * @throws GeneralSecurityException If there is a problem with the keystore contents",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with a single key entry.",
          "+     * @param certificateChain A certificate chain (ordered from subject to issuer)",
          "+     * @param privateKey The private key that corresponds to the subject certificate (index 0 of {@code certificateChain})",
          "+     * @param password The password for the private key",
          "+     *",
          "+     * @throws GeneralSecurityException If there is a problem with the provided certificates/key",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with multiple trusted cert entries.",
          "+     * @param certificates The root certificates to trust",
          "+     */",
          "+            // This should never happen so callers really shouldn't be forced to deal with it themselves.",
          "+    /**",
          "+     * Creates a {@link X509ExtendedKeyManager} based on the key material in the provided {@link KeyStore}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link X509ExtendedTrustManager} based on the trust material in the provided {@link KeyStore}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that reads from PEM formatted paths.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link org.elasticsearch.common.ssl.SslTrustConfig} that reads a list of PEM encoded trusted certificates (CAs) from the file",
          "+ * system.",
          "+ * Strictly speaking, this class does not require PEM certificates, and will load any file that can be read by",
          "+ * {@link java.security.cert.CertificateFactory#generateCertificate(InputStream)}.",
          "+ */",
          "+    /**",
          "+     * Construct a new trust config for the provided paths.",
          "+     * The paths are stored as-is, and are not read until {@link #createTrustManager()} is called.",
          "+     * This means that",
          "+     * <ol>",
          "+     * <li>validation of the file (contents and accessibility) is deferred, and this constructor will <em>not fail</em> on missing",
          "+     * of invalid files.</li>",
          "+     * <li>",
          "+     * if the contents of the files are modified, then subsequent calls {@link #createTrustManager()} will return a new trust",
          "+     * manager that trust a different set of CAs.",
          "+     * </li>",
          "+     * </ol>",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of a file. Supports PKCS#1, PKCS#8",
          "+     * encoded formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys",
          "+     *",
          "+     * @param keyPath           the path for the key file",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return a private key from the contents of the file",
          "+     */",
          "+    /**",
          "+     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslEC",
          "+    /**",
          "+     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslDsa",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an plaintext private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader the {@link BufferedReader} containing the key file contents",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an EC private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link ECPrivateKeySpec}",
          "+     */",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an RSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link RSAPrivateCrtKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an DSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link DSAPrivateKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an encrypted private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader     the {@link BufferedReader} containing the key file contents",
          "+     * @param keyPassword The password for the encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Decrypts the password protected contents using the algorithm and IV that is specified in the PEM Headers of the file",
          "+     *",
          "+     * @param pemHeaders       The Proc-Type and DEK-Info PEM headers that have been extracted from the key file",
          "+     * @param keyContents      The key as a base64 encoded String",
          "+     * @param passwordSupplier A password supplier for the encrypted (password protected) key",
          "+     * @return the decrypted key bytes",
          "+     * @throws GeneralSecurityException if the key can't be decrypted",
          "+     * @throws IOException              if the PEM headers are missing or malformed",
          "+     */",
          "+            //We only handle PEM encryption",
          "+                //malformed pem",
          "+    /**",
          "+     * Creates a {@link Cipher} from the contents of the DEK-Info header of a PEM file. RFC 1421 indicates that supported algorithms are",
          "+     * defined in RFC 1423. RFC 1423 only defines DES-CBS and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3",
          "+     * different variants of 128, 192, 256 bit keys )",
          "+     *",
          "+     * @param dekHeaderValue The value of the the DEK-Info PEM header",
          "+     * @param password       The password with which the key is encrypted",
          "+     * @return a cipher of the appropriate algorithm and parameters to be used for decryption",
          "+     * @throws GeneralSecurityException if the algorithm is not available in the used security provider, or if the key is inappropriate",
          "+     * for the cipher",
          "+     * @throws IOException if the DEK-Info PEM header is invalid",
          "+     */",
          "+    /**",
          "+     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF",
          "+     * that uses n rounds of salted MD5 (as many times as needed to get the necessary number of key bytes)",
          "+     * <p>",
          "+     * https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html",
          "+     */",
          "+    /**",
          "+     * Converts a hexadecimal string to a byte array",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded EC key to an {@link ECPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link ECPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded RSA key to a {@link RSAPrivateCrtKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link RSAPrivateCrtKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded DSA key to a {@link DSAPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link DSAPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded private key and reads its algorithm identifier Object OID.",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return A string identifier for the key algorithm (RSA, DSA, or EC)",
          "+     * @throws GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The client authentication mode that is used for SSL servers.",
          "+ */",
          "+    /**",
          "+     * Never request a client certificate.",
          "+     */",
          "+            // nothing to do here",
          "+    /**",
          "+     * Request a client certificate, but do not enforce that one is provided.",
          "+     */",
          "+    /**",
          "+     * Request and require a client certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if client authentication is enabled",
          "+     */",
          "+    /**",
          "+     * Configure client authentication of the provided {@link SSLParameters}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A base exception for problems that occur while trying to configure SSL.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A object encapsulating all necessary configuration for an SSL context (client or server).",
          "+ * The configuration itself is immutable, but the {@link #getKeyConfig() key config} and",
          "+ * {@link #getTrustConfig() trust config} may depend on reading key and certificate material",
          "+ * from files (see {@link #getDependentFiles()}, and the content of those files may change.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are used by this SSL configuration. If the contents of these files change, then any",
          "+     * subsequent call to {@link #createSslContext()} (or similar methods) may create a context with different behaviour.",
          "+     * It is recommended that these files be monitored for changes, and a new ssl-context is created whenever any of the files are modified.",
          "+     */",
          "+    /**",
          "+     * Dynamically create a new SSL context based on the current state of the configuration.",
          "+     * Because the {@link #getKeyConfig() key config} and {@link #getTrustConfig() trust config} may change based on the",
          "+     * contents of their referenced files (see {@link #getDependentFiles()}, consecutive calls to this method may",
          "+     * return ssl-contexts with different configurations.",
          "+     */",
          "+    /**",
          "+     * Picks the best (highest security / most recent standard) SSL/TLS protocol (/version) that is supported by the",
          "+     * {@link #getSupportedProtocols() configured protocols}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Utility class for handling the standard setting keys for use in SSL configuration.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationLoader",
          "+ */",
          "+    /**",
          "+     * The SSL/TLS protocols (i.e. versions) that should be used",
          "+     */",
          "+    /**",
          "+     * The SSL/TLS cipher suites that should be used",
          "+     */",
          "+    /**",
          "+     * Whether certificate and/or hostname verification should be used",
          "+     */",
          "+    /**",
          "+     * When operating as a server, whether to request/require client certificates",
          "+     */",
          "+    // Trust",
          "+    /**",
          "+     * A list of paths to PEM formatted certificates that should be trusted as CAs",
          "+     */",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used as a trust-store",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #TRUSTSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link TrustManagerFactory#getAlgorithm() trust management algorithm} to use when configuring trust",
          "+     * with a {@link #TRUSTSTORE_PATH truststore}.",
          "+     */",
          "+    // Key Management",
          "+    // -- Keystore",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used for key management",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a secure setting.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #KEYSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link javax.net.ssl.KeyManagerFactory#getAlgorithm() key management algorithm} to use when",
          "+     * connstructing a Key manager from a {@link #KEYSTORE_PATH keystore}.",
          "+     */",
          "+    // -- PEM",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the certificate to be used as part of key management",
          "+     */",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the private key for the configured {@link #CERTIFICATE}.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a secure setting.",
          "+     * This (or the {@link #KEY_LEGACY_PASSPHRASE legacy fallback}) is required if the key file is encrypted.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, non-list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch",
          "+     * keystore.",
          "+     */",
          "+    /**",
          "+     * @return {@code true} if the provided key is a deprecated setting",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Loads {@link SslConfiguration} from settings.",
          "+ * This class handles the logic of interpreting the various \\'ssl.*\\' configuration settings and their interactions",
          "+ * (as well as being aware of dependencies and conflicts between different settings).",
          "+ * The constructed {@code SslConfiguration} has sensible defaults for any settings that are not explicitly configured,",
          "+ * and these defaults can be overridden through the various {@code setDefaultXyz} methods.",
          "+ * It is {@code abstract} because this library has minimal dependencies, so the extraction of the setting values from",
          "+ * the underlying setting source must be handled by the code that makes use of this class.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationKeys",
          "+ */",
          "+    /**",
          "+     * Construct a new loader with the \\'standard\\' default values.",
          "+     *",
          "+     * @param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it",
          "+     *                      must end in a \\'.\\' (period). For example, if the prefix is {@code \\'reindex.ssl.\\'} then the keys that are",
          "+     *                      passed to methods like {@link #getSettingAsString(String)} will be in the form",
          "+     *                      {@code \\'reindex.ssl.verification_mode\\'}, and those same keys will be reported in error messages (via",
          "+     *                      {@link SslConfigException}).",
          "+     */",
          "+    /**",
          "+     * Change the default trust config.",
          "+     * The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs",
          "+     */",
          "+    /**",
          "+     * Change the default key config.",
          "+     * The initial key config is {@link EmptyKeyConfig}, which does not provide any keys",
          "+     */",
          "+    /**",
          "+     * Change the default verification mode.",
          "+     * The initial verification mode is {@link SslVerificationMode#FULL}.",
          "+     */",
          "+    /**",
          "+     * Change the default client authentication mode.",
          "+     * The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.",
          "+     */",
          "+    /**",
          "+     * Change the default supported ciphers.",
          "+     * The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.",
          "+     *",
          "+     * @see #loadDefaultCiphers()",
          "+     */",
          "+    /**",
          "+     * Change the default SSL/TLS protocol list.",
          "+     * The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS}",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a string, and this class will convert it to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source.",
          "+     * This method will be called for any setting keys that are marked as being",
          "+     * {@link SslConfigurationKeys#getSecureStringKeys() secure} settings.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a list of strings, and this class will convert the values to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Resolve all necessary configuration settings, and load a {@link SslConfiguration}.",
          "+     *",
          "+     * @param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch",
          "+     *                 configuration directory.",
          "+     * @throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.",
          "+     */",
          "+            // No AES? Things are going to be very weird, but technically that means we don't have 256 bit AES, so ...",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a key manager at runtime.",
          "+ * The method for constructing the key manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createKeyManager()} method will read these files dynamically, so the behaviour of this key config may change whenever",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedKeyManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the key manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a trust manager at runtime.",
          "+ * The method for constructing the trust manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createTrustManager()} method will read these files dynamically, so the behaviour of this trust config may change if",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedTrustManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the trust manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents the verification mode to be used for SSL connections.",
          "+ */",
          "+    /**",
          "+     * Verify neither the hostname, nor the provided certificate.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, but do not verify the hostname.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, and also verify that the hostname to which this client is connected",
          "+     * matches one of the Subject-Alternative-Names in the certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if hostname verification is enabled",
          "+     */",
          "+    /**",
          "+     * @return true if certificate verification is enabled",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that builds a Key Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path          The path to the keystore file",
          "+     * @param storePassword The password for the keystore",
          "+     * @param type          The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                      See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param keyPassword   The password for the key(s) within the keystore",
          "+     *                      (see {@link javax.net.ssl.KeyManagerFactory#init(KeyStore, char[])}).",
          "+     * @param algorithm     The algorithm to use for the Key Manager (see {@link KeyManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 private key entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that builds a Trust Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path      The path to the keystore file",
          "+     * @param password  The password for the keystore",
          "+     * @param type      The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                  See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param algorithm The algorithm to use for the Trust Manager (see {@link javax.net.ssl.TrustManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 trusted certificate entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that trusts all certificates. Used when {@link SslVerificationMode#isCertificateVerificationEnabled()} is",
          "+ * {@code false}.",
          "+ * This class cannot be used on FIPS-140 JVM as it has its own trust manager implementation.",
          "+ */",
          "+        // single instances",
          "+    /**",
          "+     * The {@link X509ExtendedTrustManager} that will trust all certificates.",
          "+     * All methods are implemented as a no-op and do not throw exceptions regardless of the certificate presented.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This is a sample of the CAs that we expect on every JRE.",
          "+        // We can safely change this list if the JRE's issuer list changes, but we want to assert something useful.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // When running on BC-FIPS, an invalid file format behaves like an empty file",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * A test for non-trust, non-key configurations.",
          "+     * These are straight forward and can all be tested together",
          "+     */",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Because (a) cannot load a JKS as a PKCS12 & (b) the password is wrong.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // Parse the user agent in the ECS (Elastic Common Schema) format",
          "+            // Deprecated format, removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by VERSION), to be removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by just using OS), to be removed in 7.0",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+    /**",
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases"
        ]
      }
    }
  },
  "elastic/elasticsearch_37784": {
    "id": "elastic/elasticsearch_37784",
    "body": "'This commit introduces a NetworkMessage class. This class has two\\r\\nsubclasses - InboundMessage and OutboundMessage. These messages can\\r\\nbe serialized and deserialized independent of the transport. This allows\\r\\nmore granular testing. Additionally, the serialization mechanism is now\\r\\na simple Supplier. This builds the framework to eventually move the\\r\\nserialization of transport messages to the network thread. This is the\\r\\none serialization component that is not currently performed on the\\r\\nnetwork thread (transport deserialization and http serialization and\\r\\ndeserialization are all on the network thread).'",
    "cms": [
      "'Extract message serialization from `TcpTransport` (#37034)\\n\\nThis commit introduces a NetworkMessage class. This class has two\\nsubclasses - InboundMessage and OutboundMessage. These messages can\\nbe serialized and deserialized independent of the transport. This allows\\nmore granular testing. Additionally, the serialization mechanism is now\\na simple Supplier. This builds the framework to eventually move the\\nserialization of transport messages to the network thread. This is the\\none serialization component that is not currently performed on the\\nnetwork thread (transport deserialization and http serialization and\\ndeserialization are all on the network thread).'",
      "'Fix version issue'",
      "'Merge remote-tracking branch 'upstream/6.x' into backport_message_changes'"
    ],
    "commits": {
      "'2d79d2bfe8e79d9514f323b7a02f617bd8e65475'": {
        "cm": "'Extract message serialization from `TcpTransport` (#37034)\\n\\nThis commit introduces a NetworkMessage class. This class has two\\nsubclasses - InboundMessage and OutboundMessage. These messages can\\nbe serialized and deserialized independent of the transport. This allows\\nmore granular testing. Additionally, the serialization mechanism is now\\na simple Supplier. This builds the framework to eventually move the\\nserialization of transport messages to the network thread. This is the\\none serialization component that is not currently performed on the\\nnetwork thread (transport deserialization and http serialization and\\ndeserialization are all on the network thread).'",
        "comments": [
          "+ * {@link CompressibleBytesOutputStream#close()} will NOT close the underlying stream. The byte stream passed",
          "+ * in the constructor must be closed individually.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have additional bytes to read, outside of the header",
          "+        // for handshakes we are compatible with N-2 since otherwise we can't figure out our initial version",
          "+        // since we are compatible with N-1 and N+1 so we always send our minCompatVersion as the initial version in the",
          "+        // handshake. This looks odd but it's required to establish the connection correctly we check for real compatibility",
          "+        // once the connection is established",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a transport message sent over the network. Subclasses implement serialization and",
          "+ * deserialization.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // This should not happen as the bytes are already serialized",
          "+    /**",
          "+     * sends a message to the given channel, using the given callbacks.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // The compressible bytes stream will not close the underlying bytes stream",
          "+        // we have to call materializeBytes() here before accessing the bytes. A CompressibleBytesOutputStream",
          "+        // might be implementing compression. And materializeBytes() ensures that some marker bytes (EOS marker)",
          "+        // are written. Otherwise we barf on the decompressing end when we read past EOF on purpose in the",
          "+        // #validateRequest method. this might be a problem in deflate after all but it's important to write",
          "+        // the marker bytes.",
          "+     * @param channel the channel the message is from",
          "+            // Place the context with the headers from the message",
          "+                    // This is not an Elasticsearch transport message.",
          "+        // Closing compression stream does not close underlying stream",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // For handshake we are compatible with N-2",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                // we flip the isHandshake bit back and act like the handler is not found"
        ]
      },
      "'fa866935c6977cfa172bec1dc326a9aee981badf'": {
        "cm": "'Fix version issue'",
        "comments": []
      },
      "'ab4d6c6bc8fb4da81232b5a8baaaf026f994fa2e'": {
        "cm": "'Merge remote-tracking branch 'upstream/6.x' into backport_message_changes'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed."
        ]
      }
    }
  },
  "elastic/elasticsearch_37782": {
    "id": "elastic/elasticsearch_37782",
    "body": "'This deprecates the `xpack.watcher.history.cleaner_service.enabled` setting,\\r\\nsince all newly created `.watch-history` indices in 7.0 will use ILM to manage\\r\\ntheir retention.\\r\\n\\r\\nIn 8.0 the setting itself and cleanup actions will be removed.\\r\\n\\r\\nResolves #32041'",
    "cms": [
      "'Deprecate xpack.watcher.history.cleaner_service.enabled\\n\\nThis deprecates the `xpack.watcher.history.cleaner_service.enabled` setting,\\nsince all newly created `.watch-history` indices in 7.0 will use ILM to manage\\ntheir retention.\\n\\nIn 8.0 the setting itself and cleanup actions will be removed.\\n\\nResolves #32041'",
      "'Merge remote-tracking branch 'origin/master' into deprecate-watch-history-cleaner'"
    ],
    "commits": {
      "'04c6503ff34f563e5570d9c5af4d0101a4c283e5'": {
        "cm": "'Deprecate xpack.watcher.history.cleaner_service.enabled\\n\\nThis deprecates the `xpack.watcher.history.cleaner_service.enabled` setting,\\nsince all newly created `.watch-history` indices in 7.0 will use ILM to manage\\ntheir retention.\\n\\nIn 8.0 the setting itself and cleanup actions will be removed.\\n\\nResolves #32041'",
        "comments": []
      },
      "'20ca4be6bafb2641a89c448318051fc37d960b6f'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into deprecate-watch-history-cleaner'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // ensures we don't block",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      }
    }
  },
  "elastic/elasticsearch_37781": {
    "id": "elastic/elasticsearch_37781",
    "body": "'Section titles are mostly uppercase, only a few cases where query DSL parameters\\r\\nor Java method names are used as the title they should be lowercased.\\r\\n'",
    "cms": [
      "'Uppercasing some docs section title\\n\\nSection titles are mostly uppercase, only a few cases where query DSL parameters\\nor Java method names are used as the title they should be lowercased.'"
    ],
    "commits": {
      "'05883c491b0bc9e66bed438323787e4c0ed22bff'": {
        "cm": "'Uppercasing some docs section title\\n\\nSection titles are mostly uppercase, only a few cases where query DSL parameters\\nor Java method names are used as the title they should be lowercased.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37775": {
    "id": "elastic/elasticsearch_37775",
    "body": "'This PR adds join validation around cluster UUIDs, preventing a node to join a cluster if it was previously part of another cluster.\\r\\n\\r\\nThe PR introduces a new flag to the cluster state, `clusterUUIDCommitted`, which denotes whether the node has locked into a cluster with the given uuid. When a cluster is committed, this flag will turn to true, and subsequent cluster state updates will keep the information about committal.\\r\\n\\r\\nNote that coordinating-only nodes are still free to switch clusters at will (after restart), as they don't carry any persistent state.'",
    "cms": [
      "'Enforce cluster uuid'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
      "'more tests'",
      "'wip'",
      "'seems to work now'",
      "'add warning log'",
      "'fix testMixedClusterFormation'",
      "'fix test'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
      "'feedback'",
      "'add test'",
      "'use constant'",
      "'add assertion'",
      "' longer fail time'",
      "'rewrite assertion using Zen1 BWC term'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
      "'add TODO'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
      "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'"
    ],
    "commits": {
      "'91127415ea665febf0484e3e98764501e949de32'": {
        "cm": "'Enforce cluster uuid'",
        "comments": []
      },
      "'965cbe53cbe6d07e4b6727d16652498d3cfe3e1e'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      },
      "'afa6c1b2d468b52d759276e1e916ed424ba8485a'": {
        "cm": "'more tests'",
        "comments": [
          "+    /**",
          "+     * Whether the current node with the given cluster state is locked into the cluster with the UUID returned by {@link #clusterUUID()},",
          "+     * meaning that it will not accept any cluster state with a different clusterUUID.",
          "+     */"
        ]
      },
      "'265eb44562cc5b3ed04af24e4f82b4215d060afd'": {
        "cm": "'wip'",
        "comments": [
          "+//        if (!metaData1.clusterUUID.equals(metaData2.clusterUUID)) {",
          "+//            return false;",
          "+//        }",
          "+//        if (metaData1.clusterUUIDCommitted != metaData2.clusterUUIDCommitted) {",
          "+//            return false;",
          "+//        }",
          "+        // reset clusterUUIDCommitted to let node join again",
          "+        //clusterNodes.replaceAll(cn -> cn == clusterNode ? cn.restartedNode() : cn);"
        ]
      },
      "'7f8f97f247e953a077ad6e6625d4e23acfa3bb37'": {
        "cm": "'seems to work now'",
        "comments": [
          "+        // reset clusterUUIDCommitted (and node / cluster state term) to let node join again"
        ]
      },
      "'f93e0b49a21c10d36480be6b8aff5e498db60773'": {
        "cm": "'add warning log'",
        "comments": []
      },
      "'c890ad4e9a374a64e6c33ad8e913126a6cdbdd6e'": {
        "cm": "'fix testMixedClusterFormation'",
        "comments": []
      },
      "'861ad05b250e41930fdae783f1699bb1998b5e41'": {
        "cm": "'fix test'",
        "comments": []
      },
      "'f67c82bf6870bdc4344a0f58b456b6c91bb2d360'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // ensures we don't block",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name.",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals"
        ]
      },
      "'a0f3f796b01c6d9f2114e022c2d1656a81ae9f2d'": {
        "cm": "'feedback'",
        "comments": [
          "+         * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,",
          "+         * marked as committed."
        ]
      },
      "'1280e22d909ac2ec2704b4688bae2dcc6687f585'": {
        "cm": "'add test'",
        "comments": []
      },
      "'3dc2c625e53548ca689c0f69c133bde05e673be7'": {
        "cm": "'use constant'",
        "comments": []
      },
      "'23558dff23bd47250cb62321a9029656ac327249'": {
        "cm": "'add assertion'",
        "comments": [
          "+            // if we receive a commit from a Zen1 master that has not recovered its state yet, the cluster uuid might not been known yet."
        ]
      },
      "'b7be853c73d88b459e53eda1355fc0ec6fb2a4ac'": {
        "cm": "' longer fail time'",
        "comments": []
      },
      "'2697b4403c479a614357712d1e5446712e4c5718'": {
        "cm": "'rewrite assertion using Zen1 BWC term'",
        "comments": []
      },
      "'9994b41bdb19d4b3b43cf216976d3826510c7abc'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": [
          "+    /**",
          "+     * Retrieves the mappings on an index or indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated",
          "+     * feature. The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the mappings on an index on indices using the Get Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html\\'>",
          "+     * Get Mapping API on elastic.co</a>",
          "+     * @param getMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getMapping(GetMappingsRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which",
          "+     * accepts a new request object.",
          "+     * @deprecated This method uses old request and response objects which still refer to types, a deprecated feature.",
          "+     * The method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be",
          "+     * used instead, which accepts a new request object.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Indicates whether the receiving node should operate based on local index information or",
          "+     * forward requests, where needed, to other nodes. If running locally, request will not",
          "+     * raise errors if local index information is missing.",
          "+     */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // 24 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    // Because the client-side class does not have a toXContent method, we test xContent serialization by creating",
          "+    // a random client object, converting it to a server object then serializing it to xContent, and finally",
          "+    // parsing it back as a client object. We check equality between the original client object, and the parsed one.",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+ * Exception indicating that not all requested operations from {@link LuceneChangesSnapshot}",
          "+ * are available.",
          "+                        // Flatten multipoints",
          "+    /**",
          "+     * A callback when a new retention lease is created. In practice, this callback invokes the retention lease sync action, to sync",
          "+     * retention leases to replicas.",
          "+     */",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     * Adds a new retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+     * @param shardId             the shard ID",
          "+     * @param allocationId        the allocation ID",
          "+     * @param indexSettings       the index settings",
          "+     * @param globalCheckpoint    the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onNewRetentionLease a callback when a new retention lease is created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Write action responsible for syncing retention leases to replicas. This action is deliberately a write action so that if a replica misses",
          "+ * a retention lease sync then that shard will be marked as stale.",
          "+ */",
          "+    /**",
          "+     * Sync the specified retention leases for the specified shard. The callback is invoked when the sync succeeds or fails.",
          "+     *",
          "+     * @param shardId         the shard to sync",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback to invoke when the sync completes normally or abnormally",
          "+     */",
          "+            // we have to execute under the system context so that if security is enabled the sync is authorized",
          "+        // we flush to ensure that retention leases are committed",
          "+        // we flush to ensure that retention leases are committed",
          "+            // ignore",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A functional interface that represents a method for syncing retention leases to replica shards after a new retention lease is added on",
          "+ * the primary.",
          "+ */",
          "+    /**",
          "+     * Represents a method that when invoked syncs retention leases to replica shards after a new retention lease is added on the primary.",
          "+     * The specified listener is invoked when the syncing completes with success or failure.",
          "+     *",
          "+     * @param shardId         the shard ID",
          "+     * @param retentionLeases the retention leases to sync",
          "+     * @param listener        the callback when sync completes",
          "+     */",
          "+    /**",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned.",
          "+     *",
          "+     * @return the retention leases",
          "+     */",
          "+     * Adds a new retention lease.",
          "+     * @param listener                the callback when the retention lease is successfully added and synced to replicas",
          "+     * @return the new retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease already exists",
          "+     */",
          "+    /**",
          "+     * Renews an existing retention lease.",
          "+     *",
          "+     * @param id                      the identifier of the retention lease",
          "+     * @param retainingSequenceNumber the retaining sequence number",
          "+     * @param source                  the source of the retention lease",
          "+     * @return the renewed retention lease",
          "+     * @throws IllegalArgumentException if the specified retention lease does not exist",
          "+    /**",
          "+     * Updates retention leases on a replica.",
          "+     *",
          "+     * @param retentionLeases the retention leases",
          "+     */",
          "+         * @param retentionLeaseSyncer   a callback when this shard syncs retention leases",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+ */",
          "+        //No node available for cluster",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetFieldMappingsResponse.",
          "+    /**",
          "+     * For xContent roundtrip testing we force the xContent output to still contain types because the parser",
          "+     * still expects them. The new typeless parsing is implemented in the client side GetMappingsResponse.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+        // the retention leases on the shard should be flushed",
          "+        // we should forward the request containing the current retention leases to the replica",
          "+        // we should start with an empty replication response",
          "+        // the retention leases on the shard should be updated",
          "+        // the retention leases on the shard should be flushed",
          "+        // the result should indicate success",
          "+        // execution happens on the test thread, so no need to register an actual listener to callback",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // we will add multiple retention leases and expect to see them synced to all replicas",
          "+            // check retention leases have been committed on the primary",
          "+            // check current retention leases have been synced to all replicas",
          "+                // check retention leases have been committed on the replica",
          "+                // Always true because we include 'other' in the agg",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Convert geo point into a hash string (bucket string ID)",
          "+     */",
          "+    /**",
          "+     * Create a new named {@link GeoGridAggregationBuilder}-derived builder",
          "+     */",
          "+            // Intentionally not writing any docs",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGrid}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Instantiate a {@link InternalGeoGridBucket}-derived class using the same parameters as constructor.",
          "+     */",
          "+    /**",
          "+     * Encode longitude and latitude with a given precision as a long hash.",
          "+     */",
          "+    /**",
          "+     * Generate a random precision according to the rules of the given aggregation.",
          "+     */",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+                                        // ignore, this is an expected exception",
          "+            // Make it easy to detect this error in ShardFollowNodeTask:",
          "+            // (adding a metadata header instead of introducing a new exception that extends ElasticsearchException)",
          "+        // Do restore from repository here and after that",
          "+        // start() should be invoked and stats should be reset",
          "+        // For now handle like any other failure:",
          "+        // need a more robust approach to avoid the scenario where an outstanding request",
          "+        // can trigger another restore while the shard was restored already.",
          "+        // https://github.com/elastic/elasticsearch/pull/37562#discussion_r250009367",
          "+     * A good starting name for the index storing the job's results.",
          "+     * This defaults to the shared results index if a specific index name is not set.",
          "+     * This method must <em>only</em> be used during initial job creation.",
          "+     * After that the read/write aliases must always be used to access the job's",
          "+     * results index, as the underlying index may roll or be reindexed.",
          "+     * @return The job's initial results index name",
          "+     * Get the unmodified <code>results_index_name</code> field from the job.",
          "+     * This is provided to allow a job to be copied via the builder.",
          "+     * After creation this does not necessarily reflect the actual concrete",
          "+     * index used by the job.  A job's results must always be read and written",
          "+     * using the read and write aliases.",
          "+     * @return The job's configured \\'index name\\'",
          "+     * The number of buckets with few records compared to the overall counts.",
          "+            // intentionally empty",
          "+            // intentionally empty",
          "+        // Make the job's results span an extra two indices, i.e. three in total.",
          "+        // To do this the job's results alias needs to encompass all three indices.",
          "+        // Step 8. If we did not drop the indices and after DBQ state done, we delete the aliases",
          "+        // Step 7. If we did not delete the indices, we run a delete by query",
          "+        // Step 6. If we have any hits, that means we are NOT the only job on these indices, and should not delete the indices.",
          "+        // If we do not have any hits, we can drop the indices and then skip the DBQ and alias deletion.",
          "+        // Step 5. Determine if we are on shared indices by looking at whether the initial index was \\'.ml-anomalies-shared\\'",
          "+        // or whether the indices that the job's results alias points to contain any documents from other jobs.",
          "+        // TODO: this check is currently assuming that a job's results indices are either ALL shared or ALL",
          "+        // dedicated to the job.  We have considered functionality like rolling jobs that generate large",
          "+        // volumes of results from shared to dedicated indices.  On deletion such a job would have a mix of",
          "+        // shared indices requiring DBQ and dedicated indices that could be simply dropped.  The current",
          "+        // functionality would apply DBQ to all these indices, which is safe but suboptimal.  So this functionality",
          "+        // should be revisited when we add rolling results index functionality, especially if we add the ability",
          "+        // to switch a job over to a dedicated index for future results.",
          "+                    // The job may no longer be using the initial shared index, but if it started off on a",
          "+                    // shared index then it will still be on a shared index even if it's been reindexed",
          "+                        // don't bother searching the index any further, we are on the default shared",
          "+                        // don't bother searching the index any further - it's already been closed or deleted",
          "+        // Step 4. Get the job as the initial result index name is required",
          "+    // TODO: remove this method when Java time formats are the default",
          "+                        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the \\'8\\' prefix when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+        // TODO: remove the call to jodaBwcJavaTimestampFormatsForIngestPipeline() when Java time formats are the default",
          "+    // This is because parsing timestamps using Joda formats generates warnings.",
          "+    // Eventually we'll probably just remove the checks that the Joda formats",
          "+    // are valid, and at that point this method can be removed too.",
          "+    // This method is using the Joda BWC layer.  When that's removed, this method",
          "+    // can be deleted - we'll just validate the Java time formats after that.",
          "+    // Also remove enableWarningsCheck() above if this method is removed."
        ]
      },
      "'48dc33f7a51cdb75c9558984df43378e0b6a544e'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": [
          "+        // The injected Unfollow step will run pretty rapidly here, so we need",
          "+        // to wait for it to settle into the \\'stable\\' step of waiting to be",
          "+        // ready to roll over",
          "+            // tag::ilm-explain-lifecycle-execute",
          "+            // end::ilm-explain-lifecycle-execute",
          "+            // tag::ilm-explain-lifecycle-response",
          "+            // end::ilm-explain-lifecycle-response",
          "+             */",
          "+            // parse the logs and ensure that Elasticsearch died with the expected cause",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test confirms JSON log structure is properly formatted and can be parsed.",
          "+ * It has to be in a <code>org.elasticsearch.common.logging</code> package to use <code>PrefixLogger</code>",
          "+ */",
          "+                    //message field will have a single line with json escaped",
          "+                    //stacktrace field will have each json line will in a separate array element",
          "+        // need to use custom config path so we can use a custom log4j2.properties file for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This test verifies that Elasticsearch can startup successfully with a custom logging config using variables introduced in",
          "+ * <code>ESJsonLayout</code>",
          "+ * The intention is to confirm that users can still run their Elasticsearch instances with previous configurations.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Formats log events as strings in a json format.",
          "+ * <p>",
          "+ * The class is wrapping the {@link PatternLayout} with a pattern to format into json. This gives more flexibility and control over how the",
          "+ * log messages are formatted in {@link org.apache.logging.log4j.core.layout.JsonLayout}",
          "+ */",
          "+    /**",
          "+     * Fields used in a pattern to format a json log line:",
          "+     * <ul>",
          "+     * <li>type - the type of logs. These represent appenders and help docker distinguish log streams.</li>",
          "+     * <li>timestamp - ISO8601 with additional timezone ID</li>",
          "+     * <li>level - INFO, WARN etc</li>",
          "+     * <li>component - logger name, most of the times class name</li>",
          "+     * <li>cluster.name - taken from sys:es.logs.cluster_name system property because it is always set</li>",
          "+     * <li>node.name - taken from NodeNamePatternConverter, as it can be set in runtime as hostname when not set in elasticsearch.yml</li>",
          "+     * <li>node_and_cluster_id - in json as node.id and cluster.uuid - taken from NodeAndClusterIdConverter and present",
          "+     * once clusterStateUpdate is first received</li>",
          "+     * <li>message - a json escaped message. Multiline messages will be converted to single line with new line explicitly",
          "+     * replaced to \\",
          "+     * <li>exceptionAsJson - in json as a stacktrace field. Only present when throwable is passed as a parameter when using a logger.",
          "+     * Taken from JsonThrowablePatternConverter</li>",
          "+     * </ul>",
          "+     */",
          "+/*",
          "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
          "+ * contributor license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright ownership.",
          "+ * The ASF licenses this file to You under the Apache license, Version 2.0",
          "+ * (the \\'License\\'); you may not use this file except in compliance with",
          "+ * the License. You may obtain a copy of the License at",
          "+ *",
          "+ *      http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing, software",
          "+ * distributed under the License is distributed on an \\'AS IS\\' BASIS,",
          "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "+ * See the license for the specific language governing permissions and",
          "+ * limitations under the license.",
          "+ */",
          "+/**",
          "+ * Outputs the Throwable portion of the LoggingEvent as a Json formatted field with array",
          "+ * \\'exception\\': [ \\'stacktrace\\', \\'lines\\', \\'as\\', \\'array\\', \\'elements\\' ]",
          "+ *",
          "+ * Reusing @link org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter which already converts a Throwable from",
          "+ * LoggingEvent into a multiline string",
          "+ */",
          "+    /**",
          "+     * Private as only expected to be used by log4j2 newInstance method",
          "+     */",
          "+    /**",
          "+     * Gets an instance of the class.",
          "+     *",
          "+     * @param config  The current Configuration.",
          "+     * @param options pattern options, may be null.  If first element is \\'short\\',",
          "+     *                only the first line of the throwable will be formatted.",
          "+     * @return instance of class.",
          "+     */",
          "+    /**",
          "+     * {@inheritDoc}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Pattern converter to format the node_and_cluster_id variable into JSON fields <code>node.id</code> and <code>cluster.uuid</code>.",
          "+ * Keeping those two fields together assures that they will be atomically set and become visible in logs at the same time.",
          "+ */",
          "+    /**",
          "+     * Called by log4j2 to initialize this converter.",
          "+     */",
          "+    /**",
          "+     * Updates only once the clusterID and nodeId.",
          "+     * Subsequent executions will throw {@link org.apache.lucene.util.SetOnce.AlreadySetException}.",
          "+     *",
          "+     * @param nodeId      a nodeId received from cluster state update",
          "+     * @param clusterUUID a clusterId received from cluster state update",
          "+     */",
          "+    /**",
          "+     * Formats the node.id and cluster.uuid into json fields.",
          "+     *",
          "+     * @param event - a log event is ignored in this method as it uses the nodeId and clusterId to format",
          "+     */",
          "+        // nodeId/clusterUuid not received yet, not appending",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The {@link NodeAndClusterIdStateListener} listens to cluster state changes and ONLY when receives the first update",
          "+ * it sets the clusterUUID and nodeID in log4j pattern converter {@link NodeAndClusterIdConverter}.",
          "+ * Once the first update is received, it will automatically be de-registered from subsequent updates.",
          "+ */",
          "+    /**",
          "+     * Subscribes for the first cluster state update where nodeId and clusterId is present",
          "+     * and sets these values in {@link NodeAndClusterIdConverter}.",
          "+     */",
          "+     * A callback when a new retention lease is created or an existing retention lease expires. In practice, this callback invokes the",
          "+     * retention lease sync action, to sync retention leases to replicas.",
          "+     * Get all non-expired retention leases tracked on this shard. An unmodifiable copy of the retention leases is returned. Note that only",
          "+     * the primary shard calculates which leases are expired, and if any have expired, syncs the retention leases to any replicas.",
          "+                // the primary calculates the non-expired retention leases and syncs them to replicas",
          "+                    // early out as no retention leases have expired",
          "+                // clean up the expired retention leases",
          "+            /*",
          "+             * At this point, we were either in primary mode and have updated the non-expired retention leases into the tracking map, or",
          "+             * we were in replica mode and merely need to copy the existing retention leases since a replica does not calculate the",
          "+             * non-expired retention leases, instead receiving them on syncs from the primary.",
          "+             */",
          "+     * @param shardId               the shard ID",
          "+     * @param allocationId          the allocation ID",
          "+     * @param indexSettings         the index settings",
          "+     * @param globalCheckpoint      the last known global checkpoint for this shard, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * @param onSyncRetentionLeases a callback when a new retention lease is created or an existing retention lease expires",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //confirms exception is correctly parsed",
          "+            // leases do not expire on replicas until synced from the primary",
          "+                    // we do not want to hold a lock on the replication tracker in the callback!",
          "+            // assert that the new retention lease callback was invoked",
          "+            // reset the invocation marker so that we can assert the callback was not invoked when renewing the lease",
          "+            // reset the invocation marker so that we can assert the callback was invoked if any leases are expired",
          "+            // randomly expire some leases",
          "+            // calculate the expired leases and update our tracking map",
          "+            // getting the leases has the side effect of calculating which leases are expired and invoking the sync callback",
          "+            // the current leases should equal our tracking map",
          "+            // the callback should only be invoked if there were expired leases",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+        // we will add multiple retention leases, wait for some to expire, and assert a consistent view between the primary and the replicas",
          "+            // check current retention leases have been synced to all replicas",
          "+            // sleep long enough that *possibly* the current retention lease has expired, and certainly that any previous have",
          "+            /*",
          "+             * Check that expiration of retention leases has been synced to all replicas. We have to assert busy since syncing happens in",
          "+             * the background.",
          "+             */",
          "+                // retention leases can be expired on replicas, so we can only assert on primaries here",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a single log line in a json format.",
          "+ * Parsing log lines with this class confirms the json format of logs",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Tests that extend this class verify that all json layout fields appear in the first few log lines after startup",
          "+ * Fields available upon process startup: <code>type</code>, <code>timestamp</code>, <code>level</code>, <code>component</code>,",
          "+ * <code>message</code>, <code>node.name</code>, <code>cluster.name</code>.",
          "+ * Whereas <code>node.id</code> and <code>cluster.uuid</code> are available later once the first clusterState has been received.",
          "+ *",
          "+ *",
          "+ * <code>node.name</code>, <code>cluster.name</code>, <code>node.id</code>, <code>cluster.uuid</code>",
          "+ * should not change across all log lines",
          "+ *",
          "+ * Note that this won't pass for nodes in clusters that don't have the node name defined in elasticsearch.yml <strong>and</strong> start",
          "+ * with DEBUG or TRACE level logging. Those nodes log a few lines before the node.name is set by <code>LogConfigurator.setNodeName</code>.",
          "+ */",
          "+    /**",
          "+     * Number of lines in the log file to check for the <code>node.name</code>, <code>node.id</code> or <code>cluster.uuid</code>. We don't",
          "+     * just check the entire log file because it could be quite long",
          "+     */",
          "+    /**",
          "+     * The node name to expect in the log file.",
          "+     */",
          "+    /**",
          "+     * Open the log file. This is delegated to subclasses because the test",
          "+     * framework doesn't have permission to read from the log file but",
          "+     * subclasses can grant themselves that permission.",
          "+     */",
          "+                      // all lines should have the same nodeName and clusterName",
          "+            //once the nodeId and clusterId are received, they should be the same on remaining lines",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Returns a stream of json log lines.",
          "+ * This is intended to be used for easy and readable assertions for logger tests",
          "+ */",
          "+            // Make sure the mapping is ready on the shard before we execute the index request; otherwise the index request",
          "+            // will perform a dynamic mapping update which however will be blocked because the latch is remained closed.",
          "+            // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Create a policy with just a Shrink action on the follower",
          "+                        // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+            // Follow the index",
          "+            // Make sure it actually took",
          "+            // This should now be in the \\'warm\\' phase waiting for the index to be ready to unfollow",
          "+            // Set the indexing_complete flag on the leader so the index will actually unfollow",
          "+            // Wait for the setting to get replicated",
          "+            // We can't reliably check that the index is unfollowed, because ILM",
          "+            // moves through the unfollow and shrink actions so fast that the",
          "+            // index often disappears between assertBusy checks",
          "+            // Wait for the index to continue with its lifecycle and be shrunk",
          "+            // Wait for the index to complete its policy",
          "+                            // Sometimes throw in an extraneous unfollow just to check it doesn't break anything",
          "+        // Move to a step from the injected unfollow action",
          "+        // If we get an OK on this request we have successfully moved to the injected step",
          "+        // Make sure we actually move on to and execute the shrink action",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Assert appropriate task state and assignment numbers",
          "+        // Set the upgrade mode setting",
          "+        // Assert state for tasks still exists and that the upgrade setting is set",
          "+        //Disable the setting",
          "+            // If we are waiting for an upgrade to complete, we should not assign to a node",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Don't want folks spamming this endpoint while it is in progress, only allow one request to be handled at a time",
          "+        // Noop, nothing for us to do, simply return fast to the caller",
          "+        // <4> We have unassigned the tasks, respond to the listener.",
          "+                // Wait for our tasks to all stop",
          "+        // <3> After isolating the datafeeds, unassign the tasks",
          "+        /*",
          "+                 * Before `upgrade_mode: true`, there were unassigned tasks because node task assignment was maxed out (tasks A, B)",
          "+                 * There were assigned tasks executing fine (tasks C, D)",
          "+                 * While `upgrade_mode: true` all are attempting to be re-assigned, but cannot and end up with the AWAITING_UPGRADE reason",
          "+                 * `upgrade_mode: false` opens the flood gates, all tasks are still attempting to re-assign",
          "+                 * A or B could be re-assigned before either C or D. Thus, previously erred tasks are now executing fine, and previously",
          "+         */",
          "+                // State change was not acknowledged, we either timed out or ran into some exception",
          "+                // We should not continue and alert failure to the end user",
          "+                // Did we change from disabled -> enabled?",
          "+                            // Wait for jobs to not be \\'Awaiting upgrade\\'",
          "+                            // Datafeeds to wait for a non-\\'Awaiting upgrade\\' assignment and for the job task allocations to converge",
          "+                            // If we do not wait, deleting datafeeds, or attempting to unallocate them again causes issues as the",
          "+                            // job's task allocationId could have changed during either process.",
          "+        //<1> Change MlMetadata to indicate that upgrade_mode is now enabled",
          "+    /**",
          "+     * Unassigns all Job and Datafeed tasks.",
          "+     * <p>",
          "+     * The reason for unassigning both types is that we want the Datafeed to attempt re-assignment once `upgrade_mode` is",
          "+     * disabled.",
          "+     * <p>",
          "+     * If we do not force an allocation change for the Datafeed tasks, they will never start again, since they were isolated.",
          "+     * <p>",
          "+     * Datafeed tasks keep the state as `started` and Jobs stay `opened`",
          "+     *",
          "+     * @param tasksCustomMetaData Current state of persistent tasks",
          "+     * @param listener            Alerted when tasks are unassignd",
          "+     */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // TODO: remove deprecated endpoint in 8.0.0",
          "+        // test the fields is not overwritten"
        ]
      },
      "'c3e0aa2572b21cae9785025ef73e72934972a15a'": {
        "cm": "'add TODO'",
        "comments": [
          "+        // TODO: use elasticsearch-node detach-cluster tool once it's implemented"
        ]
      },
      "'a13ffe96487c69a7470aa90075b3e75049a4e8cd'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": []
      },
      "'bcbeb33d03168d7d1546e7cf826d1fa6785a2e99'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into enforce-clusteruuid'",
        "comments": [
          "+        // handling of start join messages on the local node will be dispatched to the generic thread-pool",
          "+        // explicitly move node to candidate state so that the next cluster state update task yields an onNoLongerMaster event",
          "+     * @param currentMaster  The current master. Unless retired, we prefer to keep the current master in the config.",
          "+         *  - nonRetiredMaster",
          "+         *  - nonRetiredNotMasterInConfigNotLiveIds",
          "+            // live master first, then other live nodes, preferring the current config, and if we need more then use non-live nodes",
          "+        // removing the master from the voting configuration immediately triggers the master to step down",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37772": {
    "id": "elastic/elasticsearch_37772",
    "body": "'Some of our newer endpoints and indices were missing from\\r\\nthe tests.'",
    "cms": [
      "'[ML] Fix gaps in reserved roles tests\\n\\nSome of our newer endpoints and indices were missing from\\nthe tests.'",
      "'Merge branch 'master' into fix_gaps_in_roles_tests'"
    ],
    "commits": {
      "'ba46f4125150b915bfbc0e5e0f8a6ecb967b456e'": {
        "cm": "'[ML] Fix gaps in reserved roles tests\\n\\nSome of our newer endpoints and indices were missing from\\nthe tests.'",
        "comments": []
      },
      "'f8198e6cc04f567d770dd06d8d6f319e2fe46ec1'": {
        "cm": "'Merge branch 'master' into fix_gaps_in_roles_tests'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // ensures we don't block",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing"
        ]
      }
    }
  },
  "elastic/elasticsearch_37770": {
    "id": "elastic/elasticsearch_37770",
    "body": "'`TooManyJobsIT` occasionally fails with the the mysterious message `Had to resort to force-closing job, something went wrong?`. The something that went wrong is closing all jobs in the test teardown\\r\\n\\r\\n```\\r\\n   > Throwable #1: java.lang.RuntimeException: Had to resort to force-closing job, something went wrong?\\r\\n...\\r\\n   > Caused by: java.util.concurrent.ExecutionException: RemoteTransportException[[node_t1][127.0.0.1:33786][cluster:admin/xpack/ml/job/close]]; \\r\\nnested: IllegalStateException[Timed out when waiting for persistent tasks after 20s];\\r\\n```\\r\\n\\r\\nThe close request timed out after 20 seconds which isn't surprising in this case as there were 285 jobs to close. TooManyJobsIT is testing that the `xpack.ml.max_open_jobs` limit is respected and doesn't have to create hundreds of jobs to do so as `xpack.ml.max_open_jobs` is set by the test. \\r\\n\\r\\nCloses #30300'",
    "cms": ["'Increase close job timeout and lower the max number'"],
    "commits": {
      "'5c9cb77a22c1ef13f5680d5877fa8350f4eddc17'": {
        "cm": "'Increase close job timeout and lower the max number'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37769": {
    "id": "elastic/elasticsearch_37769",
    "body": "'Made the test tolerant to index upgrade being run\\r\\nin between the old/mixed/upgraded portions.  This\\r\\ncan occur because the rolling upgrade tests all\\r\\nshare the same indices.\\r\\n\\r\\nFixes #37763'",
    "cms": [
      "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.\\n\\nFixes #37763'",
      "'Merge branch 'master' into fix_mapping_upgrade_test'"
    ],
    "commits": {
      "'6686323c2d80e92f86f81ce22c7c30f4440aa29c'": {
        "cm": "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.\\n\\nFixes #37763'",
        "comments": [
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      },
      "'eb31a5c955cb15f57ef5c3e59005b6840a769e44'": {
        "cm": "'Merge branch 'master' into fix_mapping_upgrade_test'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37768": {
    "id": "elastic/elasticsearch_37768",
    "body": "'In some cases we only have a string collection instead of a string list that we want to serialize out. We have a convenience method for writing a list of strings, but no such method for writing a collection of strings. Yet, a list of strings is a collection of strings, so we can simply liberalize StreamOutput#writeStringList to be more generous in the collections that it accepts and write out collections of strings too. On the other side, we do not have a convenience method for reading a list of strings. This commit addresses both of these issues.'",
    "cms": [
      "'Liberalize StreamOutput#writeStringList\\n\\nIn some cases we only have a string collection instead of a string list\\nthat we want to serialize out. We have a convenience method for writing\\na list of strings, but no such method for writing a collection of\\nstrings. Yet, a list of strings is a collection of strings, so we can\\nsimply liberalize StreamOutput#writeStringList to be more generous in\\nthe collections that it accepts and write out collections of strings\\ntoo. On the other side, we do not have a convenience method for reading\\na list of strings. This commit addresses both of these issues.'",
      "'Fix Javadocs'",
      "'Use method reference'",
      "'No new collection needed'",
      "'Fix imports'"
    ],
    "commits": {
      "'679c4056fbeec21cf48a91ae665833dad6c941fb'": {
        "cm": "'Liberalize StreamOutput#writeStringList\\n\\nIn some cases we only have a string collection instead of a string list\\nthat we want to serialize out. We have a convenience method for writing\\na list of strings, but no such method for writing a collection of\\nstrings. Yet, a list of strings is a collection of strings, so we can\\nsimply liberalize StreamOutput#writeStringList to be more generous in\\nthe collections that it accepts and write out collections of strings\\ntoo. On the other side, we do not have a convenience method for reading\\na list of strings. This commit addresses both of these issues.'",
        "comments": [
          "+     * Reads a list of objects.",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection"
        ]
      },
      "'f17f5f3e8654753fa0b1e3ded2bde86117947962'": {
        "cm": "'Fix Javadocs'",
        "comments": [
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     * @throws IOException if an I/O exception occurs reading the list"
        ]
      },
      "'9edfd608aa754f9924373e850d6f31fa68678e4d'": {
        "cm": "'Use method reference'",
        "comments": []
      },
      "'c54d54a3669813a2c88bdf202d3268f072d00eaf'": {
        "cm": "'No new collection needed'",
        "comments": []
      },
      "'4e9b0a96cb44b2181ef9667baf0f060f9378603c'": {
        "cm": "'Fix imports'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37767": {
    "id": "elastic/elasticsearch_37767",
    "body": "'connectivity to the remote connection is failing.\\r\\n\\r\\nRelates to #37681'",
    "cms": [
      "'Fail with a dedicated exception if remote connection is missing or\\nconnectivity to the remote connection is failing.\\n\\nRelates to #37681'",
      "'Merge remote-tracking branch 'es/master' into dedicated_so_such_remote_cluster_exception'",
      "'extend from ResourceNotFoundException'"
    ],
    "commits": {
      "'369cca2c8c87aed2f2f60e39dcd432e64f5a17ef'": {
        "cm": "'Fail with a dedicated exception if remote connection is missing or\\nconnectivity to the remote connection is failing.\\n\\nRelates to #37681'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+ */",
          "+        //No node available for cluster",
          "+                                        // ignore, this is an expected exception"
        ]
      },
      "'72f7189830e75abd3d15e917a0059bce51888ad6'": {
        "cm": "'Merge remote-tracking branch 'es/master' into dedicated_so_such_remote_cluster_exception'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      },
      "'d3d871e3f90cf3848a66bf018b45a8f4295900df'": {
        "cm": "'extend from ResourceNotFoundException'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37766": {
    "id": "elastic/elasticsearch_37766",
    "body": "'This change of the function name is necessary for conformity\\r\\nwith feature queries.\\r\\n\\r\\nCloses #37714'",
    "cms": [
      "'Change `rational` to `saturation` in script_score\\n\\nThis change of the function name is necessary for conformity\\nwith feature queries.\\n\\nCloses #37714'"
    ],
    "commits": {
      "'e2a805c2dd6d94eb6f61922a9a129933ee6bb18f'": {
        "cm": "'Change `rational` to `saturation` in script_score\\n\\nThis change of the function name is necessary for conformity\\nwith feature queries.\\n\\nCloses #37714'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37764": {
    "id": "elastic/elasticsearch_37764",
    "body": "'Reverts #36259 in part to make randomized test fail if no tests are ran.\\r\\nThis is useful when filtering tests as it's easy to make a typo and\\r\\nthink the test ran trough successfully.\\r\\n\\r\\n'",
    "cms": [
      "'Fail randomized testing tasks if no tests ran\\n\\nReverts #36259 in part to make randomized test fail if no tests are ran.\\nThis is useful when filtering tests as it's easy to make a typo and\\nthink the test ran trough successfully.'",
      "'Merge remote-tracking branch 'origin/master' into fail-build-if-no-tests'"
    ],
    "commits": {
      "'d79e59506ec142e2e17919b2afb3da30cc23cdb5'": {
        "cm": "'Fail randomized testing tasks if no tests ran\\n\\nReverts #36259 in part to make randomized test fail if no tests are ran.\\nThis is useful when filtering tests as it's easy to make a typo and\\nthink the test ran trough successfully.'",
        "comments": []
      },
      "'345399342b724d1311d86dc80bfa656ccf57eddb'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into fail-build-if-no-tests'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      }
    }
  },
  "elastic/elasticsearch_37762": {
    "id": "elastic/elasticsearch_37762",
    "body": "'The plugin builder plugin generates warnings for these.\\r\\nThere's no immediate impact as we don't have a shared build cache.\\r\\n\\r\\n'",
    "cms": [
      "'Add path sensitivity annotations\\n\\nThe plugin builder plugin generates warnings for these.\\nThere's no immediate impact as we don't have a shared build cache.'",
      "'Merge remote-tracking branch 'origin/master' into fix-buildsrc-warnings'"
    ],
    "commits": {
      "'a7781807a1b400cb3df20e617f7b55283c8128ea'": {
        "cm": "'Add path sensitivity annotations\\n\\nThe plugin builder plugin generates warnings for these.\\nThere's no immediate impact as we don't have a shared build cache.'",
        "comments": []
      },
      "'104b69c462bb9124e30ee4c6fc0b7165c8b918da'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into fix-buildsrc-warnings'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      }
    }
  },
  "elastic/elasticsearch_37759": {
    "id": "elastic/elasticsearch_37759",
    "body": "'When upgrading from 5.4 to 5.5 to 6.7 (inclusive) it was\\r\\nnecessary to ensure there was a mapping for type \\'doc\\' on\\r\\nthe ML state index before opening a job.  This was because\\r\\n5.4 created a multi-type ML state index.\\r\\n\\r\\nIn version 7.x we can be sure that any such 5.4 index is no\\r\\nlonger in use.  It would have had to be reindexed into the\\r\\n6.x index format prior to the upgrade to version 7.x.'",
    "cms": [
      "'[ML] No need to add state doc mapping on job open in 7.x\\n\\nWhen upgrading from 5.4 to 5.5 to 6.7 (inclusive) it was\\nnecessary to ensure there was a mapping for type \\'doc\\' on\\nthe ML state index before opening a job.  This was because\\n5.4 created a multi-type ML state index.\\n\\nIn version 7.x we can be sure that any such 5.4 index is no\\nlonger in use.  It would have had to be reindexed into the\\n6.x index format prior to the upgrade to version 7.x.'",
      "'Merge branch 'master' into no_need_to_check_for_doc_mappings_on_job_open'",
      "'Remove redundant import'"
    ],
    "commits": {
      "'4f342c8ce31081970063ecd50cc07463cb703787'": {
        "cm": "'[ML] No need to add state doc mapping on job open in 7.x\\n\\nWhen upgrading from 5.4 to 5.5 to 6.7 (inclusive) it was\\nnecessary to ensure there was a mapping for type \\'doc\\' on\\nthe ML state index before opening a job.  This was because\\n5.4 created a multi-type ML state index.\\n\\nIn version 7.x we can be sure that any such 5.4 index is no\\nlonger in use.  It would have had to be reindexed into the\\n6.x index format prior to the upgrade to version 7.x.'",
        "comments": []
      },
      "'01302e42dc13f61c5c81506b521a5d5d0b8d1c33'": {
        "cm": "'Merge branch 'master' into no_need_to_check_for_doc_mappings_on_job_open'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // initial configuration should not have a place holder for local node",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // ensures we don't block",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // audit trail service construction",
          "+            // .security index is not managed by using templates anymore",
          "+            // the only available output type is \\'logfile\\', but the optputs=<list> is to keep compatibility with previous reporting format"
        ]
      },
      "'a73a820c996e23b5897628c25ac53838d120f1f9'": {
        "cm": "'Remove redundant import'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37758": {
    "id": "elastic/elasticsearch_37758",
    "body": "'This change moves the update to the results index mappings\\r\\nfrom the open job action to the code that starts the\\r\\nautodetect process.\\r\\n\\r\\nWhen a rolling upgrade is performed we need to update the\\r\\nmappings for already-open jobs that are reassigned from an\\r\\nold version node to a new version node, but the open job\\r\\naction is not called in this case.\\r\\n\\r\\nBackport of #37706'",
    "cms": [
      "'[ML] Update ML results mappings on process start\\n\\nThis change moves the update to the results index mappings\\nfrom the open job action to the code that starts the\\nautodetect process.\\n\\nWhen a rolling upgrade is performed we need to update the\\nmappings for already-open jobs that are reassigned from an\\nold version node to a new version node, but the open job\\naction is not called in this case.\\n\\nCloses #37607'",
      "'Uses ElasticsearchMappings's own logger'",
      "'Fix compilation'",
      "'Adjusting mappings structure for 6.x'",
      "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.'"
    ],
    "commits": {
      "'9eb59a527f2deb9672d881531fc8d1565a25d326'": {
        "cm": "'[ML] Update ML results mappings on process start\\n\\nThis change moves the update to the results index mappings\\nfrom the open job action to the code that starts the\\nautodetect process.\\n\\nWhen a rolling upgrade is performed we need to update the\\nmappings for already-open jobs that are reassigned from an\\nold version node to a new version node, but the open job\\naction is not called in this case.\\n\\nCloses #37607'",
        "comments": [
          "+            // The index has never been created yet",
          "+        // Start the process",
          "+                            // We need to fork, otherwise we restore model state from a network thread (several GET api calls):",
          "+                                        // No need to log here as the persistent task framework will log it",
          "+                                            // Don't leave a partially initialised process hanging around",
          "+        // Try adding the results doc mapping - this updates to the latest version if an old mapping is present",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // If upgrading from a version prior to v6.6.0 the set of templates",
          "+        // to wait for is different",
          "+    /**",
          "+     * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results",
          "+     * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade",
          "+     */",
          "+                // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded",
          "+            // TODO: as the years go by, the field we assert on here should be changed",
          "+            // to the most recent field we've added that is NOT of type \\'keyword\\'"
        ]
      },
      "'0701dc0f2bcdb4a628a9453d66c04177ca4862f0'": {
        "cm": "'Uses ElasticsearchMappings's own logger'",
        "comments": []
      },
      "'9d54a89ea6d92d9bd0dbc7b4c5df526214b33fec'": {
        "cm": "'Fix compilation'",
        "comments": []
      },
      "'24542d02f4989b888bb71638ab9bef6bb51fa456'": {
        "cm": "'Adjusting mappings structure for 6.x'",
        "comments": []
      },
      "'cd93664da9fc3b561e0bec67ce8d2c632739b88c'": {
        "cm": "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.'",
        "comments": [
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      }
    }
  },
  "elastic/elasticsearch_37756": {
    "id": "elastic/elasticsearch_37756",
    "body": "'The cluster state task executor in charge of processing shard failed requests (`ShardFailedClusterStateTaskExecutor`) has unit tests but the executor that processes shard started request has no unit tests (`ShardStartedClusterStateTaskExecutor`).\\r\\n\\r\\nThis pull request adds unit tests for this executor. It also adds a test for started shard request in ShardStateActionTests and cleans up the tests a bit there.'",
    "cms": [
      "'Add unit tests to ShardStateAction'",
      "'Adapt ClusterAllocationExplainActionTests'",
      "'check that shards are started'",
      "'apply feedback'",
      "'Fix imports'"
    ],
    "commits": {
      "'09c44a3607754992edea089d62fcd01a5f207260'": {
        "cm": "'Add unit tests to ShardStateAction'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id"
        ]
      },
      "'f63b0adb1d26b89450e75d103704344fd08df326'": {
        "cm": "'Adapt ClusterAllocationExplainActionTests'",
        "comments": []
      },
      "'7223d31e5578cad6667c452f4eb324890c71d505'": {
        "cm": "'check that shards are started'",
        "comments": []
      },
      "'1093049a847e964e3196240ad3bebf6f16db96da'": {
        "cm": "'apply feedback'",
        "comments": []
      },
      "'0d3442ae5b64aa52363eaa60171b5cb3d567afbf'": {
        "cm": "'Fix imports'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37754": {
    "id": "elastic/elasticsearch_37754",
    "body": "'This change adds a docker compose configuration that's used with\\r\\nthe `elasticsearch.test.fixtures` plugin to start up the image\\r\\nand check that the TCP ports are up.\\r\\n\\r\\nWe can build on this to add other checks for cluster health,\\r\\nrun REST tests, etc.\\r\\n\\r\\nWe can add multiple containers and configurations to the compose\\r\\nfile (e.x. test different env vars) and form clusters.\\r\\n\\r\\nTo achieve this, the plugin was changed to allow a single Gradle project to host both the fixture and the tests that use it.\\r\\n\\r\\nAn added benefit is that docker based test fixtures have their images cached in CI images ( we do  a compose pull when building this image ), so by using the same mechanism we also get to pull everything down for the docker images and will be able to reclaim some of the build time we lost when we added the docker image build. '",
    "cms": [
      "'Ground work to start up the docker image in the build\\n\\nThis change adds a docker compose configuration that's used with\\nthe `elasticsearch.test.fixtures` plugin to start up the image\\nand check that the TCP ports are up.\\n\\nWe can build on this to add other checks for culster health,\\nrun REST tests, etc.\\n\\nWe can add multiple containers and configurations to the compose\\nfile (e.x. test different env vars) and form clusters.'",
      "'Fix task dependencies in the fixtures project'",
      "'PR review'",
      "'Merge remote-tracking branch 'origin/master' into docker-image-tests'"
    ],
    "commits": {
      "'2270d74e207fd3727bf9a17062603f867f1b7c95'": {
        "cm": "'Ground work to start up the docker image in the build\\n\\nThis change adds a docker compose configuration that's used with\\nthe `elasticsearch.test.fixtures` plugin to start up the image\\nand check that the TCP ports are up.\\n\\nWe can build on this to add other checks for culster health,\\nrun REST tests, etc.\\n\\nWe can add multiple containers and configurations to the compose\\nfile (e.x. test different env vars) and form clusters.'",
        "comments": [
          "+            // conventions are not honored when the tasks are disabled"
        ]
      },
      "'2d7320c982141f6c9bcd6f06acf4b8b03723438f'": {
        "cm": "'Fix task dependencies in the fixtures project'",
        "comments": []
      },
      "'772f62ddab4a587753b1f98045b5f7db33681e80'": {
        "cm": "'PR review'",
        "comments": []
      },
      "'c948a14b5d940f2ee150c97f3da2c84bc2ddd31c'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into docker-image-tests'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37753": {
    "id": "elastic/elasticsearch_37753",
    "body": "'This change moves the update to the results index mappings\\r\\nfrom the open job action to the code that starts the\\r\\nautodetect process.\\r\\n\\r\\nWhen a rolling upgrade is performed we need to update the\\r\\nmappings for already-open jobs that are reassigned from an\\r\\nold version node to a new version node, but the open job\\r\\naction is not called in this case.\\r\\n\\r\\nBackport of #37706'",
    "cms": [
      "'[ML] Update ML results mappings on process start\\n\\nThis change moves the update to the results index mappings\\nfrom the open job action to the code that starts the\\nautodetect process.\\n\\nWhen a rolling upgrade is performed we need to update the\\nmappings for already-open jobs that are reassigned from an\\nold version node to a new version node, but the open job\\naction is not called in this case.\\n\\nCloses #37607'",
      "'Uses ElasticsearchMappings's own logger'",
      "'Fix compilation'",
      "'Adjusting mappings structure for 6.x'",
      "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.'",
      "'Merge branch '6.x' into update_results_mappings_on_process_start_6x'"
    ],
    "commits": {
      "'d3b2fa6c08ab9fb5640d47473578eb6c46e429b5'": {
        "cm": "'[ML] Update ML results mappings on process start\\n\\nThis change moves the update to the results index mappings\\nfrom the open job action to the code that starts the\\nautodetect process.\\n\\nWhen a rolling upgrade is performed we need to update the\\nmappings for already-open jobs that are reassigned from an\\nold version node to a new version node, but the open job\\naction is not called in this case.\\n\\nCloses #37607'",
        "comments": [
          "+            // The index has never been created yet",
          "+        // Start the process",
          "+        // Make sure the state index and alias exist",
          "+        // Try adding the results doc mapping - this updates to the latest version if an old mapping is present",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // If upgrading from a version prior to v6.6.0 the set of templates",
          "+        // to wait for is different",
          "+    /**",
          "+     * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results",
          "+     * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade",
          "+     */",
          "+                // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded",
          "+            // TODO: as the years go by, the field we assert on here should be changed",
          "+            // to the most recent field we've added that is NOT of type \\'keyword\\'"
        ]
      },
      "'4d40813d4dee39bb26b791aec824e9476838b136'": {
        "cm": "'Uses ElasticsearchMappings's own logger'",
        "comments": []
      },
      "'663df193a1b99a75689e2cc27a24fd9aced21247'": {
        "cm": "'Fix compilation'",
        "comments": []
      },
      "'21a90b354717c14712ef345865d7d914c671d639'": {
        "cm": "'Adjusting mappings structure for 6.x'",
        "comments": []
      },
      "'963574b1d36cce18415d354425a80ae5ba5c433a'": {
        "cm": "'[TEST] Fix MlMappingsUpgradeIT testMappingsUpgrade\\n\\nMade the test tolerant to index upgrade being run\\nin between the old/mixed/upgraded portions.  This\\ncan occur because the rolling upgrade tests all\\nshare the same indices.'",
        "comments": [
          "+        // Use a custom index because other rolling upgrade tests meddle with the shared index",
          "+            // The name of the concrete index underlying the results index alias may or may not have been changed",
          "+            // by the upgrade process (depending on what other tests are being run and the order they're run in),",
          "+            // so navigating to the next level of the tree must account for both cases"
        ]
      },
      "'44ec7f963a6741a0f9f67d63819c31f4e7f79e81'": {
        "cm": "'Merge branch '6.x' into update_results_mappings_on_process_start_6x'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This class represents a trust configuration that corresponds to the default trusted CAs of the JDK",
          "+ */",
          "+    /**",
          "+     * Create a trust config that uses System properties to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * Create a trust config that uses supplied {@link BiFunction} to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * @param trustStorePassword the password for the truststore. It applies only when PKCS#11 tokens are used, is null otherwise",
          "+     */",
          "+    /**",
          "+     * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore",
          "+     * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where",
          "+     * we only need to pass the password for reading Private Key entries ).",
          "+     *",
          "+     * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise",
          "+     */",
          "+/*",
          "+ */",
          "+/**",
          "+ * A bare-minimum ASN.1 DER decoder, just having enough functions to",
          "+ * decode PKCS#1 private keys in order to remain JCE/JVM agnostic.",
          "+ * <p>",
          "+ * Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/",
          "+ * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java",
          "+ */",
          "+    // Constructed Flag",
          "+    // Tag and data types",
          "+        // getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't",
          "+        // force us into allocating a very large array",
          "+    /**",
          "+     * Decode the length of the field. Can only support length",
          "+     * encoding up to 4 octets.",
          "+     * <p>",
          "+     *          In BER/DER encoding, length can be encoded in 2 forms:",
          "+     * </p>",
          "+     * <ul>",
          "+     * <li>Short form. One octet. Bit 8 has value \\'0\\' and bits 7-1",
          "+     * give the length.",
          "+     * </li>",
          "+     * <li>Long form. Two to 127 octets (only 4 is supported here).",
          "+     * Bit 8 of first octet has value \\'1\\' and bits 7-1 give the",
          "+     * number of additional length octets. Second and following",
          "+     * octets give the length, base 256, most significant digit first.",
          "+     * </li>",
          "+     * </ul>",
          "+     *",
          "+     * @return The length as integer",
          "+     */",
          "+        // A single byte short length",
          "+        // We can't handle length longer than 4 bytes",
          "+    /**",
          "+     * An ASN.1 TLV. The object is not parsed. It can",
          "+     * only handle integers.",
          "+     *",
          "+     * @author zhang",
          "+     */",
          "+        /**",
          "+         * Construct a ASN.1 TLV. The TLV could be either a",
          "+         * constructed or primitive entity.",
          "+         * <p>",
          "+         *     The first byte in DER encoding is made of following fields:",
          "+         * </p>",
          "+         * <pre>",
          "+         * -------------------------------------------------",
          "+         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|",
          "+         * -------------------------------------------------",
          "+         * |  Class    | CF  |     +      Type             |",
          "+         * -------------------------------------------------",
          "+         * </pre>",
          "+         * <ul>",
          "+         * <li>Class: Universal, Application, Context or Private",
          "+         * <li>CF: Constructed flag. If 1, the field is constructed.",
          "+         * <li>Type: This is actually called tag in ASN.1. It",
          "+         * indicates data type (Integer, String) or a construct",
          "+         * (sequence, choice, set).",
          "+         * </ul>",
          "+         *",
          "+         * @param tag    Tag or Identifier",
          "+         * @param length Length of the field",
          "+         * @param value  Encoded octet string for the field.",
          "+         */",
          "+        /**",
          "+         * For constructed field, return a parser for its content.",
          "+         *",
          "+         * @return A parser for the construct.",
          "+         */",
          "+        /**",
          "+         * Get the value as integer",
          "+         *",
          "+         * @return BigInteger",
          "+         */",
          "+                    // octet string is basically a byte array",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that does nothing (provides a null key manager)",
          "+ */",
          "+        // Enforce a single instance",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A variety of utility methods for working with or constructing {@link KeyStore} instances.",
          "+ */",
          "+    /**",
          "+     * Make a best guess about the \\'type\\' (see {@link KeyStore#getType()}) of the keystore file located at the given {@code Path}.",
          "+     * This method only references the <em>file name</em> of the keystore, it does not look at its contents.",
          "+     */",
          "+    /**",
          "+     * Read the given keystore file.",
          "+     *",
          "+     * @throws SslConfigException       If there is a problem reading from the provided path",
          "+     * @throws GeneralSecurityException If there is a problem with the keystore contents",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with a single key entry.",
          "+     * @param certificateChain A certificate chain (ordered from subject to issuer)",
          "+     * @param privateKey The private key that corresponds to the subject certificate (index 0 of {@code certificateChain})",
          "+     * @param password The password for the private key",
          "+     *",
          "+     * @throws GeneralSecurityException If there is a problem with the provided certificates/key",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with multiple trusted cert entries.",
          "+     * @param certificates The root certificates to trust",
          "+     */",
          "+            // This should never happen so callers really shouldn't be forced to deal with it themselves.",
          "+    /**",
          "+     * Creates a {@link X509ExtendedKeyManager} based on the key material in the provided {@link KeyStore}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link X509ExtendedTrustManager} based on the trust material in the provided {@link KeyStore}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that reads from PEM formatted paths.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link org.elasticsearch.common.ssl.SslTrustConfig} that reads a list of PEM encoded trusted certificates (CAs) from the file",
          "+ * system.",
          "+ * Strictly speaking, this class does not require PEM certificates, and will load any file that can be read by",
          "+ * {@link java.security.cert.CertificateFactory#generateCertificate(InputStream)}.",
          "+ */",
          "+    /**",
          "+     * Construct a new trust config for the provided paths.",
          "+     * The paths are stored as-is, and are not read until {@link #createTrustManager()} is called.",
          "+     * This means that",
          "+     * <ol>",
          "+     * <li>validation of the file (contents and accessibility) is deferred, and this constructor will <em>not fail</em> on missing",
          "+     * of invalid files.</li>",
          "+     * <li>",
          "+     * if the contents of the files are modified, then subsequent calls {@link #createTrustManager()} will return a new trust",
          "+     * manager that trust a different set of CAs.",
          "+     * </li>",
          "+     * </ol>",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of a file. Supports PKCS#1, PKCS#8",
          "+     * encoded formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys",
          "+     *",
          "+     * @param keyPath           the path for the key file",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return a private key from the contents of the file",
          "+     */",
          "+    /**",
          "+     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslEC",
          "+    /**",
          "+     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslDsa",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an plaintext private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader the {@link BufferedReader} containing the key file contents",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an EC private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link ECPrivateKeySpec}",
          "+     */",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an RSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link RSAPrivateCrtKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an DSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link DSAPrivateKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an encrypted private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader     the {@link BufferedReader} containing the key file contents",
          "+     * @param keyPassword The password for the encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Decrypts the password protected contents using the algorithm and IV that is specified in the PEM Headers of the file",
          "+     *",
          "+     * @param pemHeaders       The Proc-Type and DEK-Info PEM headers that have been extracted from the key file",
          "+     * @param keyContents      The key as a base64 encoded String",
          "+     * @param passwordSupplier A password supplier for the encrypted (password protected) key",
          "+     * @return the decrypted key bytes",
          "+     * @throws GeneralSecurityException if the key can't be decrypted",
          "+     * @throws IOException              if the PEM headers are missing or malformed",
          "+     */",
          "+            //We only handle PEM encryption",
          "+                //malformed pem",
          "+    /**",
          "+     * Creates a {@link Cipher} from the contents of the DEK-Info header of a PEM file. RFC 1421 indicates that supported algorithms are",
          "+     * defined in RFC 1423. RFC 1423 only defines DES-CBS and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3",
          "+     * different variants of 128, 192, 256 bit keys )",
          "+     *",
          "+     * @param dekHeaderValue The value of the the DEK-Info PEM header",
          "+     * @param password       The password with which the key is encrypted",
          "+     * @return a cipher of the appropriate algorithm and parameters to be used for decryption",
          "+     * @throws GeneralSecurityException if the algorithm is not available in the used security provider, or if the key is inappropriate",
          "+     * for the cipher",
          "+     * @throws IOException if the DEK-Info PEM header is invalid",
          "+     */",
          "+    /**",
          "+     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF",
          "+     * that uses n rounds of salted MD5 (as many times as needed to get the necessary number of key bytes)",
          "+     * <p>",
          "+     * https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html",
          "+     */",
          "+    /**",
          "+     * Converts a hexadecimal string to a byte array",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded EC key to an {@link ECPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link ECPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded RSA key to a {@link RSAPrivateCrtKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link RSAPrivateCrtKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded DSA key to a {@link DSAPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link DSAPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded private key and reads its algorithm identifier Object OID.",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return A string identifier for the key algorithm (RSA, DSA, or EC)",
          "+     * @throws GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The client authentication mode that is used for SSL servers.",
          "+ */",
          "+    /**",
          "+     * Never request a client certificate.",
          "+     */",
          "+            // nothing to do here",
          "+    /**",
          "+     * Request a client certificate, but do not enforce that one is provided.",
          "+     */",
          "+    /**",
          "+     * Request and require a client certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if client authentication is enabled",
          "+     */",
          "+    /**",
          "+     * Configure client authentication of the provided {@link SSLParameters}",
          "+     */",
          "+ * A base exception for problems that occur while trying to configure SSL.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A object encapsulating all necessary configuration for an SSL context (client or server).",
          "+ * The configuration itself is immutable, but the {@link #getKeyConfig() key config} and",
          "+ * {@link #getTrustConfig() trust config} may depend on reading key and certificate material",
          "+ * from files (see {@link #getDependentFiles()}, and the content of those files may change.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are used by this SSL configuration. If the contents of these files change, then any",
          "+     * subsequent call to {@link #createSslContext()} (or similar methods) may create a context with different behaviour.",
          "+     * It is recommended that these files be monitored for changes, and a new ssl-context is created whenever any of the files are modified.",
          "+     */",
          "+    /**",
          "+     * Dynamically create a new SSL context based on the current state of the configuration.",
          "+     * Because the {@link #getKeyConfig() key config} and {@link #getTrustConfig() trust config} may change based on the",
          "+     * contents of their referenced files (see {@link #getDependentFiles()}, consecutive calls to this method may",
          "+     * return ssl-contexts with different configurations.",
          "+     */",
          "+    /**",
          "+     * Picks the best (highest security / most recent standard) SSL/TLS protocol (/version) that is supported by the",
          "+     * {@link #getSupportedProtocols() configured protocols}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Utility class for handling the standard setting keys for use in SSL configuration.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationLoader",
          "+ */",
          "+    /**",
          "+     * The SSL/TLS protocols (i.e. versions) that should be used",
          "+     */",
          "+    /**",
          "+     * The SSL/TLS cipher suites that should be used",
          "+     */",
          "+    /**",
          "+     * Whether certificate and/or hostname verification should be used",
          "+     */",
          "+    /**",
          "+     * When operating as a server, whether to request/require client certificates",
          "+     */",
          "+    // Trust",
          "+    /**",
          "+     * A list of paths to PEM formatted certificates that should be trusted as CAs",
          "+     */",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used as a trust-store",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #TRUSTSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link TrustManagerFactory#getAlgorithm() trust management algorithm} to use when configuring trust",
          "+     * with a {@link #TRUSTSTORE_PATH truststore}.",
          "+     */",
          "+    // Key Management",
          "+    // -- Keystore",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used for key management",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a secure setting.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #KEYSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link javax.net.ssl.KeyManagerFactory#getAlgorithm() key management algorithm} to use when",
          "+     * connstructing a Key manager from a {@link #KEYSTORE_PATH keystore}.",
          "+     */",
          "+    // -- PEM",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the certificate to be used as part of key management",
          "+     */",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the private key for the configured {@link #CERTIFICATE}.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a secure setting.",
          "+     * This (or the {@link #KEY_LEGACY_PASSPHRASE legacy fallback}) is required if the key file is encrypted.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, non-list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch",
          "+     * keystore.",
          "+     */",
          "+    /**",
          "+     * @return {@code true} if the provided key is a deprecated setting",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Loads {@link SslConfiguration} from settings.",
          "+ * This class handles the logic of interpreting the various \\'ssl.*\\' configuration settings and their interactions",
          "+ * (as well as being aware of dependencies and conflicts between different settings).",
          "+ * The constructed {@code SslConfiguration} has sensible defaults for any settings that are not explicitly configured,",
          "+ * and these defaults can be overridden through the various {@code setDefaultXyz} methods.",
          "+ * It is {@code abstract} because this library has minimal dependencies, so the extraction of the setting values from",
          "+ * the underlying setting source must be handled by the code that makes use of this class.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationKeys",
          "+ */",
          "+    /**",
          "+     * Construct a new loader with the \\'standard\\' default values.",
          "+     *",
          "+     * @param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it",
          "+     *                      must end in a \\'.\\' (period). For example, if the prefix is {@code \\'reindex.ssl.\\'} then the keys that are",
          "+     *                      passed to methods like {@link #getSettingAsString(String)} will be in the form",
          "+     *                      {@code \\'reindex.ssl.verification_mode\\'}, and those same keys will be reported in error messages (via",
          "+     *                      {@link SslConfigException}).",
          "+     */",
          "+    /**",
          "+     * Change the default trust config.",
          "+     * The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs",
          "+     */",
          "+    /**",
          "+     * Change the default key config.",
          "+     * The initial key config is {@link EmptyKeyConfig}, which does not provide any keys",
          "+     */",
          "+    /**",
          "+     * Change the default verification mode.",
          "+     * The initial verification mode is {@link SslVerificationMode#FULL}.",
          "+     */",
          "+    /**",
          "+     * Change the default client authentication mode.",
          "+     * The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.",
          "+     */",
          "+    /**",
          "+     * Change the default supported ciphers.",
          "+     * The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.",
          "+     *",
          "+     * @see #loadDefaultCiphers()",
          "+     */",
          "+    /**",
          "+     * Change the default SSL/TLS protocol list.",
          "+     * The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS}",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a string, and this class will convert it to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source.",
          "+     * This method will be called for any setting keys that are marked as being",
          "+     * {@link SslConfigurationKeys#getSecureStringKeys() secure} settings.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a list of strings, and this class will convert the values to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Resolve all necessary configuration settings, and load a {@link SslConfiguration}.",
          "+     *",
          "+     * @param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch",
          "+     *                 configuration directory.",
          "+     * @throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.",
          "+     */",
          "+            // No AES? Things are going to be very weird, but technically that means we don't have 256 bit AES, so ...",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a key manager at runtime.",
          "+ * The method for constructing the key manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createKeyManager()} method will read these files dynamically, so the behaviour of this key config may change whenever",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedKeyManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the key manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a trust manager at runtime.",
          "+ * The method for constructing the trust manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createTrustManager()} method will read these files dynamically, so the behaviour of this trust config may change if",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedTrustManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the trust manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents the verification mode to be used for SSL connections.",
          "+ */",
          "+    /**",
          "+     * Verify neither the hostname, nor the provided certificate.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, but do not verify the hostname.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, and also verify that the hostname to which this client is connected",
          "+     * matches one of the Subject-Alternative-Names in the certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if hostname verification is enabled",
          "+     */",
          "+    /**",
          "+     * @return true if certificate verification is enabled",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that builds a Key Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path          The path to the keystore file",
          "+     * @param storePassword The password for the keystore",
          "+     * @param type          The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                      See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param keyPassword   The password for the key(s) within the keystore",
          "+     *                      (see {@link javax.net.ssl.KeyManagerFactory#init(KeyStore, char[])}).",
          "+     * @param algorithm     The algorithm to use for the Key Manager (see {@link KeyManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 private key entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that builds a Trust Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path      The path to the keystore file",
          "+     * @param password  The password for the keystore",
          "+     * @param type      The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                  See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param algorithm The algorithm to use for the Trust Manager (see {@link javax.net.ssl.TrustManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 trusted certificate entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that trusts all certificates. Used when {@link SslVerificationMode#isCertificateVerificationEnabled()} is",
          "+ * {@code false}.",
          "+ * This class cannot be used on FIPS-140 JVM as it has its own trust manager implementation.",
          "+ */",
          "+        // single instances",
          "+    /**",
          "+     * The {@link X509ExtendedTrustManager} that will trust all certificates.",
          "+     * All methods are implemented as a no-op and do not throw exceptions regardless of the certificate presented.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This is a sample of the CAs that we expect on every JRE.",
          "+        // We can safely change this list if the JRE's issuer list changes, but we want to assert something useful.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // When running on BC-FIPS, an invalid file format behaves like an empty file",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * A test for non-trust, non-key configurations.",
          "+     * These are straight forward and can all be tested together",
          "+     */",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Because (a) cannot load a JKS as a PKCS12 & (b) the password is wrong.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+            // Parse the user agent in the ECS (Elastic Common Schema) format",
          "+            // Deprecated format, removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by VERSION), to be removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by just using OS), to be removed in 7.0",
          "+        // SnapshotInProgressException was introduced after CoordinationStateRejectedException (id = 150),",
          "+        // which was not backported from 7.0.",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+     * @see org.elasticsearch.indices.recovery.RecoveryTarget#indexTranslogOperations(List, int, long, long, ActionListener)",
          "+            // For a sequence based recovery, the target can keep its local translog",
          "+                /*",
          "+                 * add shard to replication group (shard will receive replication requests from this point on) now that engine is open.",
          "+                 * This means that any document indexed into the primary after this will be replicated to this replica as well",
          "+                 * make sure to do this before sampling the max sequence number in the next step, to ensure that we send",
          "+                 * all documents up to maxSeqNo in phase2.",
          "+                 */",
          "+                /*",
          "+                 * We need to wait for all operations up to the current max to complete, otherwise we can not guarantee that all",
          "+                 * operations in the required range will be available for replaying from the translog of the source.",
          "+                 */",
          "+     * @param listener                   a listener which will be notified with the local checkpoint on the target.",
          "+            // We need to synchronized Snapshot#next() because it's called by different threads through sendBatch.",
          "+            // Even though those calls are not concurrent, Snapshot#next() uses non-synchronized state and is not multi-thread-compatible.",
          "+                    // check if this request is past bytes threshold, and if so, send it off",
          "+        // send the leftover operations or if no operations were sent, request the target to respond with its local checkpoint",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+            /*",
          "+             * The maxSeenAutoIdTimestampOnPrimary received from the primary is at least the highest auto_id_timestamp from any operation",
          "+             * will be replayed. Bootstrapping this timestamp here will disable the optimization for original append-only requests",
          "+             * (source of these operations) replicated via replication. Without this step, we may have duplicate documents if we",
          "+             * replay these operations first (without timestamp), then optimize append-only requests (with timestamp).",
          "+             */",
          "+            /*",
          "+             * Bootstrap the max_seq_no_of_updates from the primary to make sure that the max_seq_no_of_updates on this replica when",
          "+             * replaying any of these operations will be at least the max_seq_no_of_updates on the primary when that op was executed on.",
          "+             */",
          "+            // update stats only after all operations completed (to ensure that mapping updates don't mess with stats)",
          "+            // roll over / flush / trim if needed",
          "+     * @param listener                            a listener which will be notified with the local checkpoint on the target",
          "+     *                                            after these operations are successfully indexed on the target.",
          "+        // before 6.0.0 we responded with an empty response so we have to maintain that",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+    /**",
          "+     * @return the number of composite buckets. Defaults to {@code 10}.",
          "+     */",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Thrown on the attempt to execute an action that requires",
          "+ * that no snapshot is in progress.",
          "+ */",
          "+ * {@link CompressibleBytesOutputStream#close()} will NOT close the underlying stream. The byte stream passed",
          "+ * in the constructor must be closed individually.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have additional bytes to read, outside of the header",
          "+        // for handshakes we are compatible with N-2 since otherwise we can't figure out our initial version",
          "+        // since we are compatible with N-1 and N+1 so we always send our minCompatVersion as the initial version in the",
          "+        // handshake. This looks odd but it's required to establish the connection correctly we check for real compatibility",
          "+        // once the connection is established",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a transport message sent over the network. Subclasses implement serialization and",
          "+ * deserialization.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+ */",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // This should not happen as the bytes are already serialized",
          "+    /**",
          "+     * sends a message to the given channel, using the given callbacks.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // The compressible bytes stream will not close the underlying bytes stream",
          "+        // we have to call materializeBytes() here before accessing the bytes. A CompressibleBytesOutputStream",
          "+        // might be implementing compression. And materializeBytes() ensures that some marker bytes (EOS marker)",
          "+        // are written. Otherwise we barf on the decompressing end when we read past EOF on purpose in the",
          "+        // #validateRequest method. this might be a problem in deflate after all but it's important to write",
          "+        // the marker bytes.",
          "+     * @param channel the channel the message is from",
          "+            // Place the context with the headers from the message",
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+                    // This is not an Elasticsearch transport message.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id"
        ]
      }
    }
  },
  "elastic/elasticsearch_37752": {
    "id": "elastic/elasticsearch_37752",
    "body": "'The filtering by follower index was completely broken.\\r\\nAlso the wrong persistent tasks were selected, causing the\\r\\nwrong status to be reported.\\r\\n\\r\\nThe fix itself is small, but this PR adds more tests.\\r\\n\\r\\nCloses #37738\\r\\n\\r\\nNote: marking this issue as non-issue (instead of a bug), because the follow info api has not been released yet.'",
    "cms": [
      "'Fix follow index filtering in follow info api.\\n\\nThe filtering by follower index was completely broken.\\nAlso the wrong persistent tasks were selected, causing the\\nwrong status to be reported.\\n\\nCloses #37738'",
      "'only select shard follow tasks'"
    ],
    "commits": {
      "'dabd1d50aec5b65c68eab288ef688f0b43f655db'": {
        "cm": "'Fix follow index filtering in follow info api.\\n\\nThe filtering by follower index was completely broken.\\nAlso the wrong persistent tasks were selected, causing the\\nwrong status to be reported.\\n\\nCloses #37738'",
        "comments": [
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */"
        ]
      },
      "'b10caab400959e189de37afc3b96a68ee2e9cee7'": {
        "cm": "'only select shard follow tasks'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37750": {
    "id": "elastic/elasticsearch_37750",
    "body": "'* This test completely overrode the `reroute` method and hence did nothing but test the override itself\\r\\n   * Removed the test since it tests nothing and simplified `reroute` accordingly\\r\\n\\r\\n'",
    "cms": [
      "'Delete Redundant RoutingServiceTests\\n\\n* This test compleletly overrode the `reroute` method and hence did nothing put test the override itself\\n   * Removed the test since it tests nothing and simplified `reroute` accordingly'"
    ],
    "commits": {
      "'00bb44b2ef1922243f4e6d0204136a89582c7856'": {
        "cm": "'Delete Redundant RoutingServiceTests\\n\\n* This test compleletly overrode the `reroute` method and hence did nothing put test the override itself\\n   * Removed the test since it tests nothing and simplified `reroute` accordingly'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37748": {
    "id": "elastic/elasticsearch_37748",
    "body": "'Node started with node.data=false and node.master=false can no longer\\r\\nstart if they have index metadata. This avoids resurrecting old indexes\\r\\ninto the cluster and ensures metadata is cleaned out before\\r\\nre-purposing a node that was previously master or data node.\\r\\n\\r\\nCloses #27073 '",
    "cms": [
      "'Fail start on invalid index metadata\\n\\nNode started with node.data=false and node.master=false can no longer\\nstart if they have index metadata. This avoids resurrecting old indexes\\ninto the cluster and ensures metadata is cleaned out before\\nre-purposing a node that was previously master or data node.\\n\\nCloses #27073'",
      "'Merge remote-tracking branch 'origin/master' into fail_start_on_index_metadata'"
    ],
    "commits": {
      "'a14201d654ac094ce0f1c53db792b11c360954da'": {
        "cm": "'Fail start on invalid index metadata\\n\\nNode started with node.data=false and node.master=false can no longer\\nstart if they have index metadata. This avoids resurrecting old indexes\\ninto the cluster and ensures metadata is cleaned out before\\nre-purposing a node that was previously master or data node.\\n\\nCloses #27073'",
        "comments": [
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir."
        ]
      },
      "'dfcb25d7fa4689def5ffad0ea156268c6bad96a5'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into fail_start_on_index_metadata'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // The index has never been created yet"
        ]
      }
    }
  },
  "elastic/elasticsearch_37747": {
    "id": "elastic/elasticsearch_37747",
    "body": "'* Retry starting Minio five times in case we run into a race between finding the free port and starting it up\\r\\n* Closes #37680'",
    "cms": [
      "'Make Minio Setup more Reliable\\n\\n* Retry starting Minio five times in case we run into a race between finding the free port and starting it up\\n* Closes #37680'"
    ],
    "commits": {
      "'c4e000a6db7b770d1499053094a506196fe82708'": {
        "cm": "'Make Minio Setup more Reliable\\n\\n* Retry starting Minio five times in case we run into a race between finding the free port and starting it up\\n* Closes #37680'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37746": {
    "id": "elastic/elasticsearch_37746",
    "body": "'The assertion `assertOpsOnPrimary` does not store seq_no and primary\\r\\nterm of successful deletes to the `lastOpSeqNo` and `lastOpTerm`. This\\r\\nleads to failures of the subsequent CAS deletes or indexes with seq_no\\r\\nand term. Moreover, this assertion trips [a translog assertion](https://github.com/elastic/elasticsearch/blob/b63f9b967c544c972ff674e22eb671b98c966c7e/server/src/main/java/org/elasticsearch/index/translog/Translog.java#L536-L541) because it\\r\\nbumps the primary term of some operations but does not the primary term\\r\\nof the engine.\\r\\n\\r\\nRelates #36467\\r\\nCloses #37684'",
    "cms": [
      "'Fix InternalEngineTests#assertOpsOnPrimary\\n\\nThe assertion `assertOpsOnPrimary` does not store seq_no and primary\\nterm of successful deletes to the `lastOpSeqNo` and `lastOpTerm`. This\\nleads to failures of the subsequence CAS deletes or indexes with seq_no\\nand term. Moreover, this assertion trips a translog assertion because it\\nbumps the primary term of some operations but not the primary term of\\nthe engine.\\n\\nRelates #36467\\nCloses #37684'",
      "'Merge branch 'master' into test/engine-primary-version'",
      "'Merge branch 'master' into test/engine-primary-version'"
    ],
    "commits": {
      "'86f868d4eacdda1802b2e3fb6ea722b68116f80f'": {
        "cm": "'Fix InternalEngineTests#assertOpsOnPrimary\\n\\nThe assertion `assertOpsOnPrimary` does not store seq_no and primary\\nterm of successful deletes to the `lastOpSeqNo` and `lastOpTerm`. This\\nleads to failures of the subsequence CAS deletes or indexes with seq_no\\nand term. Moreover, this assertion trips a translog assertion because it\\nbumps the primary term of some operations but not the primary term of\\nthe engine.\\n\\nRelates #36467\\nCloses #37684'",
        "comments": []
      },
      "'14612fcbd27261c052ed4158141bf9d3c35ba2dc'": {
        "cm": "'Merge branch 'master' into test/engine-primary-version'",
        "comments": [
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs that have package-private getters.  AggregationInspectionHelper delegates to these",
          "+ * helpers when needed, and consumers should prefer to use AggregationInspectionHelper instead of these",
          "+ * helpers.",
          "+ */",
          "+        // TODO better way to know if the scripted metric received documents?",
          "+        // Could check for null too, but a script might return null on purpose...",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Provides a set of static helpers to determine if a particular type of InternalAggregation \\'has a value\\'",
          "+ * or not.  This can be difficult to determine from an external perspective because each agg uses",
          "+ * different internal bookkeeping to determine if it is empty or not (NaN, +/-Inf, 0.0, etc).",
          "+ *",
          "+ * This set of helpers aim to ease that task by codifying what \\'empty\\' is for each agg.",
          "+ *",
          "+ * It is not entirely accurate for all aggs, since some do not expose or track the needed state",
          "+ * (e.g. sum doesn't record count, so it's not clear if the sum is 0.0 because it is empty",
          "+ * or because of summing to zero).  Pipeline aggs in particular are not well supported",
          "+ * by these helpers since most share InternalSimpleValue and it's not clear which pipeline",
          "+ * generated the value.",
          "+ */",
          "+        // TODO this could be incorrect... e.g. +1 + -1",
          "+        // This is a coarse approximation, since some aggs use positive/negative infinity or NaN",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+            // The index has never been created yet",
          "+     *     ({@link ZoneId#of(String)} and must match a time zone identifier.",
          "+     * Date Histograms have a {@link ZonedDateTime} object as the key,",
          "+        // Start the process",
          "+        // Make sure the state index and alias exist",
          "+        // Try adding the results doc mapping - this updates to the latest version if an old mapping is present",
          "+        // between 1970 and 2065",
          "+        // ending date is the last second of 9999, should be sufficient",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+    /**",
          "+     * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results",
          "+     * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade",
          "+     */",
          "+                // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded",
          "+            // TODO: as the years go by, the field we assert on here should be changed",
          "+            // to the most recent field we've added that is NOT of type \\'keyword\\'"
        ]
      },
      "'dbc663b52384827c5163e0ee3f09b299b387e8c7'": {
        "cm": "'Merge branch 'master' into test/engine-primary-version'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37742": {
    "id": "elastic/elasticsearch_37742",
    "body": "'This change split out all the specific GeoHash\\r\\nclasses for the geohash_grid aggregation into\\r\\nabstract GeoGrid classes that can be re-used for\\r\\nspecific hashing types, like `geohash`'",
    "cms": [
      "'Refactor GeoHashGrid to be abstract and re-usable\\n\\nThis change split out all the specific GeoHash\\nclasses for the geohash_grid aggregation into\\nabstract GeoGrid classes that can be re-used for\\nspecific hashing types, like `geohash`'",
      "'fix review comments'",
      "'Merge remote-tracking branch 'upstream/master' into refactor-geogrid'",
      "'respond to review'",
      "'add test for InternalGeoHashGrid.create'",
      "'Merge remote-tracking branch 'upstream/master' into refactor-geogrid'"
    ],
    "commits": {
      "'33700f5e0f69329230a809e9b293659885079f57'": {
        "cm": "'Refactor GeoHashGrid to be abstract and re-usable\\n\\nThis change split out all the specific GeoHash\\nclasses for the geohash_grid aggregation into\\nabstract GeoGrid classes that can be re-used for\\nspecific hashing types, like `geohash`'",
        "comments": [
          "+     * Create a new {@link GeoGrid} aggregation with the given name.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@code geohash_grid} aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+ * precision.",
          "+ */",
          "+    /**",
          "+     * A bucket that is associated with a {@code geohash_grid} cell. The key of the bucket is the {@code geohash} of the cell",
          "+     */",
          "+    /**",
          "+     * @return  The buckets of this aggregation (each bucket representing a geohash grid cell)",
          "+     */",
          "+    /* recognized field names in JSON */",
          "+        // TODO",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+ * Represents a grid of cells where each cell's location is determined by a geohash.",
          "+ * All geohashes in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      },
      "'ffb94d1a3d7c75ce67a57150908fa9fc3c1ce5d4'": {
        "cm": "'fix review comments'",
        "comments": [
          "+     * Create a new {@link GeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */"
        ]
      },
      "'8c2544623bd29750684a6681920bd03335a395be'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into refactor-geogrid'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // The index has never been created yet",
          "+     *     ({@link ZoneId#of(String)} and must match a time zone identifier."
        ]
      },
      "'21ec4a71810efa23a02631a502367d04fd5069d9'": {
        "cm": "'respond to review'",
        "comments": [
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long"
        ]
      },
      "'99478d988bf8b617213fde7958c135dcda42413a'": {
        "cm": "'add test for InternalGeoHashGrid.create'",
        "comments": []
      },
      "'70aa1b4da6ff7743011dbd2801a275df2547a21d'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into refactor-geogrid'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools"
        ]
      }
    }
  },
  "elastic/elasticsearch_37730": {
    "id": "elastic/elasticsearch_37730",
    "body": "'Currently integration tests which use either bwc snapshot versions or\\r\\nthe current version of elasticsearch depend on project substitutions to\\r\\nlink to the build of those artifacts. Likewise, vagrant tests use\\r\\ndependency substitutions to get to bwc snapshots of rpm and debs.\\r\\nThis commit changes those to depend on the relevant project/configuration\\r\\nand removes the dependency substitutions for distributions we do not\\r\\npublish.'",
    "cms": [
      "'Use project dependency instead of substitutions for distributions\\n\\nCurrently integration tests which use either bwc snapshot versions or\\nthe current version of elasticsearch depend on project substitutions to\\nlink to the build of those artifacts. Likewise, vagrant tests use\\ndependency substitutions to get to bwc snapshots of rpm and debs.\\nThis commit changes those to depend on the relevant project/configuration\\nand removes the dependency substitutions for distributions we do not\\npublish.'",
      "'add leniency for build-tools'",
      "'more leniency...'",
      "'simplify integ test zip usage'",
      "'Merge branch 'master' into bundle_jdk6'",
      "'Merge branch 'master' into bundle_jdk6'"
    ],
    "commits": {
      "'2b5535c0e50450b6981c3f0199c5b54eb43366c1'": {
        "cm": "'Use project dependency instead of substitutions for distributions\\n\\nCurrently integration tests which use either bwc snapshot versions or\\nthe current version of elasticsearch depend on project substitutions to\\nlink to the build of those artifacts. Likewise, vagrant tests use\\ndependency substitutions to get to bwc snapshots of rpm and debs.\\nThis commit changes those to depend on the relevant project/configuration\\nand removes the dependency substitutions for distributions we do not\\npublish.'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */"
        ]
      },
      "'cafda6d8bb8ac7c6a7a46dd0d4646e0ded5c11ea'": {
        "cm": "'add leniency for build-tools'",
        "comments": []
      },
      "'a42e22313a90a42a771fe4607b23314b84f2730c'": {
        "cm": "'more leniency...'",
        "comments": []
      },
      "'f3c0dab2fe8bb8a46ecb67c06f3a04ef443c240e'": {
        "cm": "'simplify integ test zip usage'",
        "comments": []
      },
      "'7eeba03e86788206e46bb05709f7f590cb8fde6c'": {
        "cm": "'Merge branch 'master' into bundle_jdk6'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs that have package-private getters.  AggregationInspectionHelper delegates to these",
          "+ * helpers when needed, and consumers should prefer to use AggregationInspectionHelper instead of these",
          "+ * helpers.",
          "+ */",
          "+        // TODO better way to know if the scripted metric received documents?",
          "+        // Could check for null too, but a script might return null on purpose...",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Provides a set of static helpers to determine if a particular type of InternalAggregation \\'has a value\\'",
          "+ * or not.  This can be difficult to determine from an external perspective because each agg uses",
          "+ * different internal bookkeeping to determine if it is empty or not (NaN, +/-Inf, 0.0, etc).",
          "+ *",
          "+ * This set of helpers aim to ease that task by codifying what \\'empty\\' is for each agg.",
          "+ *",
          "+ * It is not entirely accurate for all aggs, since some do not expose or track the needed state",
          "+ * (e.g. sum doesn't record count, so it's not clear if the sum is 0.0 because it is empty",
          "+ * or because of summing to zero).  Pipeline aggs in particular are not well supported",
          "+ * by these helpers since most share InternalSimpleValue and it's not clear which pipeline",
          "+ * generated the value.",
          "+ */",
          "+        // TODO this could be incorrect... e.g. +1 + -1",
          "+        // This is a coarse approximation, since some aggs use positive/negative infinity or NaN",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version."
        ]
      },
      "'545f9ee588c2873d275718df79b5d585ef727b29'": {
        "cm": "'Merge branch 'master' into bundle_jdk6'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools"
        ]
      }
    }
  },
  "elastic/elasticsearch_37729": {
    "id": "elastic/elasticsearch_37729",
    "body": "'Exceptions thrown by the cluster applier service's settings and cluster appliers are bubbled up, and block the state from being applied instead of silently being ignored. In combination with the cluster state publishing lag detector, this will throw a node out of the cluster that can't properly apply cluster state updates.'",
    "cms": [
      "'Bubble exceptions up in ClusterApplierService\\n\\n- exceptions thrown by settings and cluster appliers are bubbled up, and block the state from being applied\\ninstead of silently being ignored.'",
      "'feedback'",
      "'ingest applier throws exceptions'",
      "'fix ingest test'",
      "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
      "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
      "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
      "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'"
    ],
    "commits": {
      "'facfbfba8405c14e9a60d88a7340e2218ae65e79'": {
        "cm": "'Bubble exceptions up in ClusterApplierService\\n\\n- exceptions thrown by settings and cluster appliers are bubbled up, and block the state from being applied\\ninstead of silently being ignored.'",
        "comments": [
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+        // ensures we don't block"
        ]
      },
      "'73320f0528f2392c72cf27db665ff8260f4d429d'": {
        "cm": "'feedback'",
        "comments": []
      },
      "'7422e29727df05ee4a6ef3d24c00bd1d8a1366e4'": {
        "cm": "'ingest applier throws exceptions'",
        "comments": []
      },
      "'53f7d383c1e646bbd6cc4782fb64cef22b151b8b'": {
        "cm": "'fix ingest test'",
        "comments": []
      },
      "'9825cd5998af9a0598a4b170e5cd9e153e358422'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
        "comments": [
          "+            // if the original `source` is null, the parsed source should be so too",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+            // The index has never been created yet",
          "+     *     ({@link ZoneId#of(String)} and must match a time zone identifier.",
          "+     * Date Histograms have a {@link ZonedDateTime} object as the key,",
          "+        // Start the process",
          "+        // Make sure the state index and alias exist",
          "+        // Try adding the results doc mapping - this updates to the latest version if an old mapping is present",
          "+        // between 1970 and 2065",
          "+        // ending date is the last second of 9999, should be sufficient",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+    /**",
          "+     * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results",
          "+     * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade",
          "+     */",
          "+                // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded",
          "+            // TODO: as the years go by, the field we assert on here should be changed",
          "+            // to the most recent field we've added that is NOT of type \\'keyword\\'"
        ]
      },
      "'0ce6c6d0ea27a57b1d36352d21bd31b999712c95'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
        "comments": [
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      },
      "'51bc7f8a1402766ca477deeab9b099e7e7f5ec00'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
        "comments": [
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start"
        ]
      },
      "'e4c57efc951c5ed4940517481f3627a20df3f98f'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into strict-cluster-applier-service'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37728": {
    "id": "elastic/elasticsearch_37728",
    "body": "'This PR adds an \\'API changes\\' section to the Breaking changes page (https://www.elastic.co/guide/en/elasticsearch/reference/6.6/breaking-changes-6.6.html) and adds a subsection for the Watcher changes implemented in https://github.com/elastic/elasticsearch/pull/34951'",
    "cms": [
      "'[DOCS] Breaking change for Watcher metric stats names'",
      "'[DOCS] Creates API changes section'",
      "'[DOCS] Removes ML anchor'"
    ],
    "commits": {
      "'324aecab00bc320d2820676118e0aead155ba8e6'": {
        "cm": "'[DOCS] Breaking change for Watcher metric stats names'",
        "comments": []
      },
      "'76e6d5ed4cc6aa862c58d63aee5432b797bb4ccf'": {
        "cm": "'[DOCS] Creates API changes section'",
        "comments": []
      },
      "'81b85b87389d946b285680c51d06124da4e661a1'": {
        "cm": "'[DOCS] Removes ML anchor'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37727": {
    "id": "elastic/elasticsearch_37727",
    "body": "'This switches the format of the user agent processor to use the schema from [ECS](https://github.com/elastic/ecs).\\r\\nSo rather than something like this:\\r\\n\\r\\n```\\r\\n{\\r\\n  \\'patch\\' : \\'3538\\',\\r\\n  \\'major\\' : \\'70\\',\\r\\n  \\'minor\\' : \\'0\\',\\r\\n  \\'os\\' : \\'Mac OS X 10.14.1\\',\\r\\n  \\'os_minor\\' : \\'14\\',\\r\\n  \\'os_major\\' : \\'10\\',\\r\\n  \\'name\\' : \\'Chrome\\',\\r\\n  \\'os_name\\' : \\'Mac OS X\\',\\r\\n  \\'device\\' : \\'Other\\'\\r\\n}\\r\\n```\\r\\n\\r\\nThe structure is now like this:\\r\\n\\r\\n```\\r\\n{\\r\\n  \\'name\\' : \\'Chrome\\',\\r\\n  \\'original\\' : \\'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\\',\\r\\n  \\'os\\' : {\\r\\n    \\'name\\' : \\'Mac OS X\\',\\r\\n    \\'version\\' : \\'10.14.1\\',\\r\\n    \\'full\\' : \\'Mac OS X 10.14.1\\'\\r\\n  },\\r\\n  \\'device\\' : \\'Other\\',\\r\\n  \\'version\\' : \\'70.0.3538.102\\'\\r\\n}\\r\\n```\\r\\n\\r\\nThis new can be configured by setting `\\'ecs\\': true` in the processor\\r\\nconfiguration, and will be the default for 7.0. Leaving `ecs` unset or set as\\r\\n`false` is deprecated.\\r\\n\\r\\nResolves #37329\\r\\n\\r\\nThis PR is against the 6.x branch and will be forward-ported with the deprecated parts removed (I will open a subsequent PR for that).'",
    "cms": [
      "'Add ECS schema for user-agent injest processor\\n\\nThis switches the format of the user agent processor to use the schema from ECS.\\nSo rather than something like this:\\n\\n```\\n{\\n  \\'patch\\' : \\'3538\\',\\n  \\'major\\' : \\'70\\',\\n  \\'minor\\' : \\'0\\',\\n  \\'os\\' : \\'Mac OS X 10.14.1\\',\\n  \\'os_minor\\' : \\'14\\',\\n  \\'os_major\\' : \\'10\\',\\n  \\'name\\' : \\'Chrome\\',\\n  \\'os_name\\' : \\'Mac OS X\\',\\n  \\'device\\' : \\'Other\\'\\n}\\n```\\n\\nThe structure is now like this:\\n\\n```\\n{\\n  \\'name\\' : \\'Chrome\\',\\n  \\'original\\' : \\'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\\',\\n  \\'os\\' : {\\n    \\'name\\' : \\'Mac OS X\\',\\n    \\'version\\' : \\'10.14.1\\',\\n    \\'full\\' : \\'Mac OS X 10.14.1\\'\\n  },\\n  \\'device\\' : \\'Other\\',\\n  \\'version\\' : \\'70.0.3538.102\\'\\n}\\n```\\n\\nThis new can be configured by setting `\\'ecs\\': true` in the processor\\nconfiguration, and will be the default for 7.0. Leaving `ecs` unset or set as\\n`false` is deprecated.\\n\\nResolves #37329'",
      "'Fix/add  documentation'",
      "'Remove extra trailing brace'",
      "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
      "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
      "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
      "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
      "'Add deprecation warning for deprecated properties'",
      "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'"
    ],
    "commits": {
      "'f7aa7de2e415f0bda2a760f1fe96ae9d0d9926c7'": {
        "cm": "'Add ECS schema for user-agent injest processor\\n\\nThis switches the format of the user agent processor to use the schema from ECS.\\nSo rather than something like this:\\n\\n```\\n{\\n  \\'patch\\' : \\'3538\\',\\n  \\'major\\' : \\'70\\',\\n  \\'minor\\' : \\'0\\',\\n  \\'os\\' : \\'Mac OS X 10.14.1\\',\\n  \\'os_minor\\' : \\'14\\',\\n  \\'os_major\\' : \\'10\\',\\n  \\'name\\' : \\'Chrome\\',\\n  \\'os_name\\' : \\'Mac OS X\\',\\n  \\'device\\' : \\'Other\\'\\n}\\n```\\n\\nThe structure is now like this:\\n\\n```\\n{\\n  \\'name\\' : \\'Chrome\\',\\n  \\'original\\' : \\'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\\',\\n  \\'os\\' : {\\n    \\'name\\' : \\'Mac OS X\\',\\n    \\'version\\' : \\'10.14.1\\',\\n    \\'full\\' : \\'Mac OS X 10.14.1\\'\\n  },\\n  \\'device\\' : \\'Other\\',\\n  \\'version\\' : \\'70.0.3538.102\\'\\n}\\n```\\n\\nThis new can be configured by setting `\\'ecs\\': true` in the processor\\nconfiguration, and will be the default for 7.0. Leaving `ecs` unset or set as\\n`false` is deprecated.\\n\\nResolves #37329'",
        "comments": [
          "+            // Parse the user agent in the ECS (Elastic Common Schema) format",
          "+            // Deprecated format, removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by VERSION), to be removed in 7.0",
          "+        // Deprecated in 6.7 (superceded by just using OS), to be removed in 7.0"
        ]
      },
      "'5ba7839d5b5bf5513e79408754fe8a317c236d96'": {
        "cm": "'Fix/add  documentation'",
        "comments": []
      },
      "'abe6ce5afbc151b97289587c36e66d72822729ec'": {
        "cm": "'Remove extra trailing brace'",
        "comments": []
      },
      "'2608cea1a01f661a981fec44a511d3c37168ec21'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+        // SnapshotInProgressException was introduced after CoordinationStateRejectedException (id = 150),",
          "+        // which was not backported from 7.0.",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Thrown on the attempt to execute an action that requires",
          "+ * that no snapshot is in progress.",
          "+ */",
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Test that specifying a type while include_type_name is false",
          "+        // results in an illegal argument exception.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return whether there are any runnable tasks.",
          "+     */",
          "+    /**",
          "+     * @return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.",
          "+     */",
          "+    /**",
          "+     * @return the current (simulated) time, in milliseconds.",
          "+     */",
          "+    /**",
          "+     * Runs an arbitrary runnable task.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for immediate execution.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for future execution.",
          "+     */",
          "+    /**",
          "+     * Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with the mapping definition nested",
          "+     * under the given type name.",
          "+     */",
          "+    /**",
          "+     * Creates request options designed to be used when making a call that can return warnings, for example a",
          "+     * deprecated request. The options will ensure that the given warnings are returned if all nodes are on",
          "+     * {@link Version#CURRENT} and will allow (but not require) the warnings if any node is running an older version.",
          "+     *",
          "+     * @param warnings The expected warnings.",
          "+     */",
          "+    /**",
          "+     * The leader must open resources for a ccr recovery. If there is no activity for this interval of time,",
          "+     * the leader will close the restore session.",
          "+     */",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // The tasks will not be rescheduled as the sessions are closed.",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // Session starts as not idle. First task will mark it as idle",
          "+        // Task is still scheduled",
          "+        // Accessing session marks it as not-idle",
          "+            // Check session exists",
          "+        // Task is still scheduled",
          "+        // Task is cancelled when the session times out",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+        // Only allow a proxy action if the underlying action is allowed",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up"
        ]
      },
      "'88d78f6dd1ad414f4da7193c6e8200cae92120e4'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
        "comments": [
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * @see org.elasticsearch.indices.recovery.RecoveryTarget#indexTranslogOperations(List, int, long, long, ActionListener)",
          "+            // For a sequence based recovery, the target can keep its local translog",
          "+                /*",
          "+                 * add shard to replication group (shard will receive replication requests from this point on) now that engine is open.",
          "+                 * This means that any document indexed into the primary after this will be replicated to this replica as well",
          "+                 * make sure to do this before sampling the max sequence number in the next step, to ensure that we send",
          "+                 * all documents up to maxSeqNo in phase2.",
          "+                 */",
          "+                /*",
          "+                 * We need to wait for all operations up to the current max to complete, otherwise we can not guarantee that all",
          "+                 * operations in the required range will be available for replaying from the translog of the source.",
          "+                 */",
          "+     * @param listener                   a listener which will be notified with the local checkpoint on the target.",
          "+            // We need to synchronized Snapshot#next() because it's called by different threads through sendBatch.",
          "+            // Even though those calls are not concurrent, Snapshot#next() uses non-synchronized state and is not multi-thread-compatible.",
          "+                    // check if this request is past bytes threshold, and if so, send it off",
          "+        // send the leftover operations or if no operations were sent, request the target to respond with its local checkpoint",
          "+            /*",
          "+             * The maxSeenAutoIdTimestampOnPrimary received from the primary is at least the highest auto_id_timestamp from any operation",
          "+             * will be replayed. Bootstrapping this timestamp here will disable the optimization for original append-only requests",
          "+             * (source of these operations) replicated via replication. Without this step, we may have duplicate documents if we",
          "+             * replay these operations first (without timestamp), then optimize append-only requests (with timestamp).",
          "+             */",
          "+            /*",
          "+             * Bootstrap the max_seq_no_of_updates from the primary to make sure that the max_seq_no_of_updates on this replica when",
          "+             * replaying any of these operations will be at least the max_seq_no_of_updates on the primary when that op was executed on.",
          "+             */",
          "+            // update stats only after all operations completed (to ensure that mapping updates don't mess with stats)",
          "+            // roll over / flush / trim if needed",
          "+     * @param listener                            a listener which will be notified with the local checkpoint on the target",
          "+     *                                            after these operations are successfully indexed on the target.",
          "+        // before 6.0.0 we responded with an empty response so we have to maintain that",
          "+                            // Shard should now be active since we did recover:"
        ]
      },
      "'490f43829fc68a0eb0a4e8d466cf84d4d2870dd5'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+        // numbers only are always an epoch timestamp",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+    /**",
          "+     * Get the job Ids of anomaly detector job tasks that do",
          "+     * not have an assignment.",
          "+     *",
          "+     * @param tasks Persistent tasks. If null an empty set is returned.",
          "+     * @param nodes The cluster nodes",
          "+     * @return The job Ids of tasks to do not have an assignment.",
          "+     */",
          "+    /**",
          "+     * The job tasks that do not have an allocation as determined by",
          "+     * {@link PersistentTasksClusterService#needsReassignment(PersistentTasksCustomMetaData.Assignment, DiscoveryNodes)}",
          "+     *",
          "+     * @param tasks Persistent tasks. If null an empty set is returned.",
          "+     * @param nodes The cluster nodes",
          "+     * @return Unallocated job tasks",
          "+     */",
          "+     * Get the datafeed Ids of started datafeed tasks",
          "+     * that do not have an assignment.",
          "+     *",
          "+     * @param tasks Persistent tasks. If null an empty set is returned.",
          "+     * @param nodes The cluster nodes",
          "+     * @return The job Ids of tasks to do not have an assignment.",
          "+     * The datafeed tasks that do not have an allocation as determined by",
          "+     * {@link PersistentTasksClusterService#needsReassignment(PersistentTasksCustomMetaData.Assignment, DiscoveryNodes)}",
          "+     * @param tasks Persistent tasks. If null an empty set is returned.",
          "+     * @param nodes The cluster nodes",
          "+     * @return Unallocated datafeed tasks",
          "+     *     False if the job has an allocated persistent task",
          "+     *     and does not have a persistent task or its persistent",
          "+     *     task is un-allocated",
          "+     *     False if the datafeed has an allocated persistent task",
          "+     *     True otherwise i.e. the datafeed is present and does not have a persistent",
          "+     *     task or its persistent task is un-allocated",
          "+ * index documents for closed or unallocated tasks.",
          "+ *     - Find all job and datafeed configs that do not have an associated persistent",
          "+ *       task or the persistent task is unallocated",
          "+ * 3. Remove config from the clusterstate and update persistent task parameters",
          "+ *       must prefer to use the clusterstate config at this stage",
          "+ *     - Job and datafeed tasks opened prior to v6.6.0 need to be updated with new",
          "+ *       parameters",
          "+ * index. At this point the clusterstate config is preferred and all update",
          "+ * operations will function on that rather than the index.",
          "+    /**",
          "+     * Find any unallocated datafeed and job tasks and update their persistent",
          "+     * task parameters if they have missing fields that were added in v6.6. If",
          "+     * a task exists with a missing field it must have been created in an earlier",
          "+     * version and survived an elasticsearch upgrade.",
          "+     *",
          "+     * If there are no unallocated tasks the {@code currentTasks} argument is returned.",
          "+     *",
          "+     * @param jobs          Job configs",
          "+     * @param datafeeds     Datafeed configs",
          "+     * @param currentTasks  The persistent tasks",
          "+     * @param nodes         The nodes in the cluster",
          "+     * @return  The updated tasks",
          "+     */",
          "+                    // copy and update the job parameters",
          "+                    // replace with the updated params",
          "+                    // replace with the updated params",
          "+     * Find the configurations for all closed jobs and the jobs that",
          "+     * do not have an allocation in the cluster state.",
          "+     * Closed jobs are those that do not have an associated persistent task,",
          "+     * unallocated jobs have a task but no executing node",
          "+     * Find the configurations for stopped datafeeds and datafeeds that do",
          "+     * not have an allocation in the cluster state.",
          "+     * Stopped datafeeds are those that do not have an associated persistent task,",
          "+     * unallocated datafeeds have a task but no executing node.",
          "+            // If the task parameters do not have a job field then the job",
          "+            // was first opened on a pre v6.6 node and has not been migrated",
          "+        // job tasks",
          "+        // datafeed tasks",
          "+        // The unallocated task should be modifed",
          "+        // the allocated task should not be modified",
          "+        // unallocated datafeed should be updated",
          "+        // allocated datafeed will not be updated",
          "+                                // When the histogram in SQL is applied on DATE type instead of DATETIME, the interval",
          "+                                // specified is truncated to the multiple of a day. If the interval specified is less",
          "+                                // than 1 day, then the interval used will be `INTERVAL '1' DAY`.",
          "+    // For testing",
          "+    // since ODBC and JDBC interpret precision for Date as display size",
          "+    /**",
          "+     * Creates an date for SQL DATE type from the millis since epoch.",
          "+     */",
          "+     * Creates a datetime from the millis since epoch (thus the time-zone is UTC).",
          "+     * Creates a datetime from the millis since epoch then translates the date into the given timezone.",
          "+    /**",
          "+     * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.",
          "+     */",
          "+            // double check back and forth conversion",
          "+            // double check back and forth conversion",
          "+        // dates/datetimes and intervals",
          "+        // wait for the closed and open jobs and datafeed to be migrated",
          "+        // The persistent task params for the job & datafeed left open",
          "+        // during upgrade should be updated with new fields",
          "+        // wait for the closed job and datafeed to be migrated",
          "+        // The open job and datafeed may or may not be migrated depending on how they were allocated.",
          "+        // Migration will only occur once all nodes in the cluster are v6.6.0 or higher",
          "+        // open jobs will only be migrated once they become unallocated. The open job",
          "+        // will only meet these conditions if it is running on the last node to be",
          "+        // upgraded",
          "+        // if the open job wasn't migrated previously it should be now after it has been closed",
          "+        // and the job left open can be deleted",
          "+                // if the job is migrated the datafeed should also be",
          "+            // if migrated the persistent task params should have been updated"
        ]
      },
      "'e88ba824c2e3dfdddf416994dbee172006a19cf7'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+ * {@link CompressibleBytesOutputStream#close()} will NOT close the underlying stream. The byte stream passed",
          "+ * in the constructor must be closed individually.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have additional bytes to read, outside of the header",
          "+        // for handshakes we are compatible with N-2 since otherwise we can't figure out our initial version",
          "+        // since we are compatible with N-1 and N+1 so we always send our minCompatVersion as the initial version in the",
          "+        // handshake. This looks odd but it's required to establish the connection correctly we check for real compatibility",
          "+        // once the connection is established",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a transport message sent over the network. Subclasses implement serialization and",
          "+ * deserialization.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // This should not happen as the bytes are already serialized",
          "+    /**",
          "+     * sends a message to the given channel, using the given callbacks.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // The compressible bytes stream will not close the underlying bytes stream",
          "+        // we have to call materializeBytes() here before accessing the bytes. A CompressibleBytesOutputStream",
          "+        // might be implementing compression. And materializeBytes() ensures that some marker bytes (EOS marker)",
          "+        // are written. Otherwise we barf on the decompressing end when we read past EOF on purpose in the",
          "+        // #validateRequest method. this might be a problem in deflate after all but it's important to write",
          "+        // the marker bytes.",
          "+     * @param channel the channel the message is from",
          "+            // Place the context with the headers from the message",
          "+                    // This is not an Elasticsearch transport message.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Closing compression stream does not close underlying stream",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // Check that the thread context is not deleted.",
          "+        // Check that deserialize does not overwrite current thread context.",
          "+        // For handshake we are compatible with N-2",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                // we flip the isHandshake bit back and act like the handler is not found"
        ]
      },
      "'f087784cbd806775534ca6b840a69f49cb61750a'": {
        "cm": "'Add deprecation warning for deprecated properties'",
        "comments": []
      },
      "'9931f27361d8603b3784e64a82b57053b1ce21b9'": {
        "cm": "'Merge remote-tracking branch 'origin/6.x' into ingest-user-agent-ecs-6x'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * This class represents a trust configuration that corresponds to the default trusted CAs of the JDK",
          "+ */",
          "+    /**",
          "+     * Create a trust config that uses System properties to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * Create a trust config that uses supplied {@link BiFunction} to determine the TrustStore type, and the relevant password.",
          "+     */",
          "+    /**",
          "+     * @param trustStorePassword the password for the truststore. It applies only when PKCS#11 tokens are used, is null otherwise",
          "+     */",
          "+    /**",
          "+     * When a PKCS#11 token is used as the system default keystore/truststore, we need to pass the keystore",
          "+     * password when loading, even for reading certificates only ( as opposed to i.e. JKS keystores where",
          "+     * we only need to pass the password for reading Private Key entries ).",
          "+     *",
          "+     * @return the KeyStore used as truststore for PKCS#11 initialized with the password, null otherwise",
          "+     */",
          "+/*",
          "+ */",
          "+/**",
          "+ * A bare-minimum ASN.1 DER decoder, just having enough functions to",
          "+ * decode PKCS#1 private keys in order to remain JCE/JVM agnostic.",
          "+ * <p>",
          "+ * Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/",
          "+ * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java",
          "+ */",
          "+    // Constructed Flag",
          "+    // Tag and data types",
          "+        // getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't",
          "+        // force us into allocating a very large array",
          "+    /**",
          "+     * Decode the length of the field. Can only support length",
          "+     * encoding up to 4 octets.",
          "+     * <p>",
          "+     *          In BER/DER encoding, length can be encoded in 2 forms:",
          "+     * </p>",
          "+     * <ul>",
          "+     * <li>Short form. One octet. Bit 8 has value \\'0\\' and bits 7-1",
          "+     * give the length.",
          "+     * </li>",
          "+     * <li>Long form. Two to 127 octets (only 4 is supported here).",
          "+     * Bit 8 of first octet has value \\'1\\' and bits 7-1 give the",
          "+     * number of additional length octets. Second and following",
          "+     * octets give the length, base 256, most significant digit first.",
          "+     * </li>",
          "+     * </ul>",
          "+     *",
          "+     * @return The length as integer",
          "+     */",
          "+        // A single byte short length",
          "+        // We can't handle length longer than 4 bytes",
          "+    /**",
          "+     * An ASN.1 TLV. The object is not parsed. It can",
          "+     * only handle integers.",
          "+     *",
          "+     * @author zhang",
          "+     */",
          "+        /**",
          "+         * Construct a ASN.1 TLV. The TLV could be either a",
          "+         * constructed or primitive entity.",
          "+         * <p>",
          "+         *     The first byte in DER encoding is made of following fields:",
          "+         * </p>",
          "+         * <pre>",
          "+         * -------------------------------------------------",
          "+         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|",
          "+         * -------------------------------------------------",
          "+         * |  Class    | CF  |     +      Type             |",
          "+         * -------------------------------------------------",
          "+         * </pre>",
          "+         * <ul>",
          "+         * <li>Class: Universal, Application, Context or Private",
          "+         * <li>CF: Constructed flag. If 1, the field is constructed.",
          "+         * <li>Type: This is actually called tag in ASN.1. It",
          "+         * indicates data type (Integer, String) or a construct",
          "+         * (sequence, choice, set).",
          "+         * </ul>",
          "+         *",
          "+         * @param tag    Tag or Identifier",
          "+         * @param length Length of the field",
          "+         * @param value  Encoded octet string for the field.",
          "+         */",
          "+        /**",
          "+         * For constructed field, return a parser for its content.",
          "+         *",
          "+         * @return A parser for the construct.",
          "+         */",
          "+        /**",
          "+         * Get the value as integer",
          "+         *",
          "+         * @return BigInteger",
          "+         */",
          "+                    // octet string is basically a byte array",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that does nothing (provides a null key manager)",
          "+ */",
          "+        // Enforce a single instance",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A variety of utility methods for working with or constructing {@link KeyStore} instances.",
          "+ */",
          "+    /**",
          "+     * Make a best guess about the \\'type\\' (see {@link KeyStore#getType()}) of the keystore file located at the given {@code Path}.",
          "+     * This method only references the <em>file name</em> of the keystore, it does not look at its contents.",
          "+     */",
          "+    /**",
          "+     * Read the given keystore file.",
          "+     *",
          "+     * @throws SslConfigException       If there is a problem reading from the provided path",
          "+     * @throws GeneralSecurityException If there is a problem with the keystore contents",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with a single key entry.",
          "+     * @param certificateChain A certificate chain (ordered from subject to issuer)",
          "+     * @param privateKey The private key that corresponds to the subject certificate (index 0 of {@code certificateChain})",
          "+     * @param password The password for the private key",
          "+     *",
          "+     * @throws GeneralSecurityException If there is a problem with the provided certificates/key",
          "+     */",
          "+    /**",
          "+     * Construct an in-memory keystore with multiple trusted cert entries.",
          "+     * @param certificates The root certificates to trust",
          "+     */",
          "+            // This should never happen so callers really shouldn't be forced to deal with it themselves.",
          "+    /**",
          "+     * Creates a {@link X509ExtendedKeyManager} based on the key material in the provided {@link KeyStore}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link X509ExtendedTrustManager} based on the trust material in the provided {@link KeyStore}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that reads from PEM formatted paths.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link org.elasticsearch.common.ssl.SslTrustConfig} that reads a list of PEM encoded trusted certificates (CAs) from the file",
          "+ * system.",
          "+ * Strictly speaking, this class does not require PEM certificates, and will load any file that can be read by",
          "+ * {@link java.security.cert.CertificateFactory#generateCertificate(InputStream)}.",
          "+ */",
          "+    /**",
          "+     * Construct a new trust config for the provided paths.",
          "+     * The paths are stored as-is, and are not read until {@link #createTrustManager()} is called.",
          "+     * This means that",
          "+     * <ol>",
          "+     * <li>validation of the file (contents and accessibility) is deferred, and this constructor will <em>not fail</em> on missing",
          "+     * of invalid files.</li>",
          "+     * <li>",
          "+     * if the contents of the files are modified, then subsequent calls {@link #createTrustManager()} will return a new trust",
          "+     * manager that trust a different set of CAs.",
          "+     * </li>",
          "+     * </ol>",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of a file. Supports PKCS#1, PKCS#8",
          "+     * encoded formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys",
          "+     *",
          "+     * @param keyPath           the path for the key file",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return a private key from the contents of the file",
          "+     */",
          "+    /**",
          "+     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslEC",
          "+    /**",
          "+     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in them",
          "+     * is redundant",
          "+     *",
          "+     * @throws IOException if the EC Parameter footer is missing",
          "+     */",
          "+        // Verify that the key starts with the correct header before passing it to parseOpenSslDsa",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an plaintext private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader the {@link BufferedReader} containing the key file contents",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an EC private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link ECPrivateKeySpec}",
          "+     */",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an RSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link RSAPrivateCrtKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an DSA private key encoded in",
          "+     * OpenSSL traditional format.",
          "+     *",
          "+     * @param bReader          the {@link BufferedReader} containing the key file contents",
          "+     * @param passwordSupplier A password supplier for the potentially encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link DSAPrivateKeySpec}",
          "+     */",
          "+                // Unencrypted",
          "+            // Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt",
          "+    /**",
          "+     * Creates a {@link PrivateKey} from the contents of {@code bReader} that contains an encrypted private key encoded in",
          "+     * PKCS#8",
          "+     *",
          "+     * @param bReader     the {@link BufferedReader} containing the key file contents",
          "+     * @param keyPassword The password for the encrypted (password protected) key",
          "+     * @return {@link PrivateKey}",
          "+     * @throws IOException              if the file can't be read",
          "+     * @throws GeneralSecurityException if the private key can't be generated from the {@link PKCS8EncodedKeySpec}",
          "+     */",
          "+    /**",
          "+     * Decrypts the password protected contents using the algorithm and IV that is specified in the PEM Headers of the file",
          "+     *",
          "+     * @param pemHeaders       The Proc-Type and DEK-Info PEM headers that have been extracted from the key file",
          "+     * @param keyContents      The key as a base64 encoded String",
          "+     * @param passwordSupplier A password supplier for the encrypted (password protected) key",
          "+     * @return the decrypted key bytes",
          "+     * @throws GeneralSecurityException if the key can't be decrypted",
          "+     * @throws IOException              if the PEM headers are missing or malformed",
          "+     */",
          "+            //We only handle PEM encryption",
          "+                //malformed pem",
          "+    /**",
          "+     * Creates a {@link Cipher} from the contents of the DEK-Info header of a PEM file. RFC 1421 indicates that supported algorithms are",
          "+     * defined in RFC 1423. RFC 1423 only defines DES-CBS and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3",
          "+     * different variants of 128, 192, 256 bit keys )",
          "+     *",
          "+     * @param dekHeaderValue The value of the the DEK-Info PEM header",
          "+     * @param password       The password with which the key is encrypted",
          "+     * @return a cipher of the appropriate algorithm and parameters to be used for decryption",
          "+     * @throws GeneralSecurityException if the algorithm is not available in the used security provider, or if the key is inappropriate",
          "+     * for the cipher",
          "+     * @throws IOException if the DEK-Info PEM header is invalid",
          "+     */",
          "+    /**",
          "+     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF",
          "+     * that uses n rounds of salted MD5 (as many times as needed to get the necessary number of key bytes)",
          "+     * <p>",
          "+     * https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html",
          "+     */",
          "+    /**",
          "+     * Converts a hexadecimal string to a byte array",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded EC key to an {@link ECPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link ECPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded RSA key to a {@link RSAPrivateCrtKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link RSAPrivateCrtKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded DSA key to a {@link DSAPrivateKeySpec} using a minimal {@link DerParser}",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return {@link DSAPrivateKeySpec}",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+    /**",
          "+     * Parses a DER encoded private key and reads its algorithm identifier Object OID.",
          "+     *",
          "+     * @param keyBytes the private key raw bytes",
          "+     * @return A string identifier for the key algorithm (RSA, DSA, or EC)",
          "+     * @throws GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown",
          "+     * @throws IOException if the DER encoded key can't be parsed",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The client authentication mode that is used for SSL servers.",
          "+ */",
          "+    /**",
          "+     * Never request a client certificate.",
          "+     */",
          "+            // nothing to do here",
          "+    /**",
          "+     * Request a client certificate, but do not enforce that one is provided.",
          "+     */",
          "+    /**",
          "+     * Request and require a client certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if client authentication is enabled",
          "+     */",
          "+    /**",
          "+     * Configure client authentication of the provided {@link SSLParameters}",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A base exception for problems that occur while trying to configure SSL.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A object encapsulating all necessary configuration for an SSL context (client or server).",
          "+ * The configuration itself is immutable, but the {@link #getKeyConfig() key config} and",
          "+ * {@link #getTrustConfig() trust config} may depend on reading key and certificate material",
          "+ * from files (see {@link #getDependentFiles()}, and the content of those files may change.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are used by this SSL configuration. If the contents of these files change, then any",
          "+     * subsequent call to {@link #createSslContext()} (or similar methods) may create a context with different behaviour.",
          "+     * It is recommended that these files be monitored for changes, and a new ssl-context is created whenever any of the files are modified.",
          "+     */",
          "+    /**",
          "+     * Dynamically create a new SSL context based on the current state of the configuration.",
          "+     * Because the {@link #getKeyConfig() key config} and {@link #getTrustConfig() trust config} may change based on the",
          "+     * contents of their referenced files (see {@link #getDependentFiles()}, consecutive calls to this method may",
          "+     * return ssl-contexts with different configurations.",
          "+     */",
          "+    /**",
          "+     * Picks the best (highest security / most recent standard) SSL/TLS protocol (/version) that is supported by the",
          "+     * {@link #getSupportedProtocols() configured protocols}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Utility class for handling the standard setting keys for use in SSL configuration.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationLoader",
          "+ */",
          "+    /**",
          "+     * The SSL/TLS protocols (i.e. versions) that should be used",
          "+     */",
          "+    /**",
          "+     * The SSL/TLS cipher suites that should be used",
          "+     */",
          "+    /**",
          "+     * Whether certificate and/or hostname verification should be used",
          "+     */",
          "+    /**",
          "+     * When operating as a server, whether to request/require client certificates",
          "+     */",
          "+    // Trust",
          "+    /**",
          "+     * A list of paths to PEM formatted certificates that should be trusted as CAs",
          "+     */",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used as a trust-store",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #TRUSTSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #TRUSTSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link TrustManagerFactory#getAlgorithm() trust management algorithm} to use when configuring trust",
          "+     * with a {@link #TRUSTSTORE_PATH truststore}.",
          "+     */",
          "+    // Key Management",
          "+    // -- Keystore",
          "+    /**",
          "+     * The path to a KeyStore file (in a format supported by this JRE) that should be used for key management",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a secure setting.",
          "+     */",
          "+    /**",
          "+     * The password for the file configured in {@link #KEYSTORE_PATH}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a secure setting.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The password for the key within the {@link #KEYSTORE_PATH configured keystore}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     * If no key password is specified, it will default to the keystore password.",
          "+     */",
          "+    /**",
          "+     * The {@link KeyStore#getType() keystore type} for the file configured in {@link #KEYSTORE_PATH}.",
          "+     */",
          "+    /**",
          "+     * The {@link javax.net.ssl.KeyManagerFactory#getAlgorithm() key management algorithm} to use when",
          "+     * connstructing a Key manager from a {@link #KEYSTORE_PATH keystore}.",
          "+     */",
          "+    // -- PEM",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the certificate to be used as part of key management",
          "+     */",
          "+    /**",
          "+     * The path to a PEM formatted file that contains the private key for the configured {@link #CERTIFICATE}.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a secure setting.",
          "+     * This (or the {@link #KEY_LEGACY_PASSPHRASE legacy fallback}) is required if the key file is encrypted.",
          "+     */",
          "+    /**",
          "+     * The password to read the configured {@link #KEY}, as a non-secure setting.",
          "+     * The use of this setting {@link #isDeprecated(String) is deprecated}.",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, non-list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a non-secure, list setting",
          "+     */",
          "+    /**",
          "+     * The list of keys that are used to load a secure setting (such as a password) that would typically be stored in the elasticsearch",
          "+     * keystore.",
          "+     */",
          "+    /**",
          "+     * @return {@code true} if the provided key is a deprecated setting",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Loads {@link SslConfiguration} from settings.",
          "+ * This class handles the logic of interpreting the various \\'ssl.*\\' configuration settings and their interactions",
          "+ * (as well as being aware of dependencies and conflicts between different settings).",
          "+ * The constructed {@code SslConfiguration} has sensible defaults for any settings that are not explicitly configured,",
          "+ * and these defaults can be overridden through the various {@code setDefaultXyz} methods.",
          "+ * It is {@code abstract} because this library has minimal dependencies, so the extraction of the setting values from",
          "+ * the underlying setting source must be handled by the code that makes use of this class.",
          "+ *",
          "+ * @see SslConfiguration",
          "+ * @see SslConfigurationKeys",
          "+ */",
          "+    /**",
          "+     * Construct a new loader with the \\'standard\\' default values.",
          "+     *",
          "+     * @param settingPrefix The prefix to apply to all settings that are loaded. It may be the empty string, otherwise it",
          "+     *                      must end in a \\'.\\' (period). For example, if the prefix is {@code \\'reindex.ssl.\\'} then the keys that are",
          "+     *                      passed to methods like {@link #getSettingAsString(String)} will be in the form",
          "+     *                      {@code \\'reindex.ssl.verification_mode\\'}, and those same keys will be reported in error messages (via",
          "+     *                      {@link SslConfigException}).",
          "+     */",
          "+    /**",
          "+     * Change the default trust config.",
          "+     * The initial trust config is {@link DefaultJdkTrustConfig}, which trusts the JDK's default CA certs",
          "+     */",
          "+    /**",
          "+     * Change the default key config.",
          "+     * The initial key config is {@link EmptyKeyConfig}, which does not provide any keys",
          "+     */",
          "+    /**",
          "+     * Change the default verification mode.",
          "+     * The initial verification mode is {@link SslVerificationMode#FULL}.",
          "+     */",
          "+    /**",
          "+     * Change the default client authentication mode.",
          "+     * The initial client auth mode is {@link SslClientAuthenticationMode#OPTIONAL}.",
          "+     */",
          "+    /**",
          "+     * Change the default supported ciphers.",
          "+     * The initial cipher list depends on the availability of {@link #has256BitAES() 256 bit AES}.",
          "+     *",
          "+     * @see #loadDefaultCiphers()",
          "+     */",
          "+    /**",
          "+     * Change the default SSL/TLS protocol list.",
          "+     * The initial protocol list is defined by {@link #DEFAULT_PROTOCOLS}",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for basic string settings (see {@link SslConfigurationKeys#getStringKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a string, and this class will convert it to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred secure settings source.",
          "+     * This method will be called for any setting keys that are marked as being",
          "+     * {@link SslConfigurationKeys#getSecureStringKeys() secure} settings.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Clients of this class should implement this method to load a fully-qualified key from the preferred settings source.",
          "+     * This method will be called for list settings (see {@link SslConfigurationKeys#getListKeys()}).",
          "+     * <p>",
          "+     * The setting should be returned as a list of strings, and this class will convert the values to the relevant type.",
          "+     *",
          "+     * @throws Exception If a {@link RuntimeException} is thrown, it will be rethrown unwrapped. All checked exceptions are wrapped in",
          "+     *                   {@link SslConfigException} before being rethrown.",
          "+     */",
          "+    /**",
          "+     * Resolve all necessary configuration settings, and load a {@link SslConfiguration}.",
          "+     *",
          "+     * @param basePath The base path to use for any settings that represent file paths. Typically points to the Elasticsearch",
          "+     *                 configuration directory.",
          "+     * @throws SslConfigException For any problems with the configuration, or with loading the required SSL classes.",
          "+     */",
          "+            // No AES? Things are going to be very weird, but technically that means we don't have 256 bit AES, so ...",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a key manager at runtime.",
          "+ * The method for constructing the key manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createKeyManager()} method will read these files dynamically, so the behaviour of this key config may change whenever",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedKeyManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the key manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An interface for building a trust manager at runtime.",
          "+ * The method for constructing the trust manager is implementation dependent.",
          "+ */",
          "+    /**",
          "+     * @return A collection of files that are read by this config object.",
          "+     * The {@link #createTrustManager()} method will read these files dynamically, so the behaviour of this trust config may change if",
          "+     * any of these files are modified.",
          "+     */",
          "+    /**",
          "+     * @return A new {@link X509ExtendedTrustManager}.",
          "+     * @throws SslConfigException if there is a problem configuring the trust manager.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents the verification mode to be used for SSL connections.",
          "+ */",
          "+    /**",
          "+     * Verify neither the hostname, nor the provided certificate.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, but do not verify the hostname.",
          "+     */",
          "+    /**",
          "+     * Verify the provided certificate against the trust chain, and also verify that the hostname to which this client is connected",
          "+     * matches one of the Subject-Alternative-Names in the certificate.",
          "+     */",
          "+    /**",
          "+     * @return true if hostname verification is enabled",
          "+     */",
          "+    /**",
          "+     * @return true if certificate verification is enabled",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslKeyConfig} that builds a Key Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path          The path to the keystore file",
          "+     * @param storePassword The password for the keystore",
          "+     * @param type          The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                      See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param keyPassword   The password for the key(s) within the keystore",
          "+     *                      (see {@link javax.net.ssl.KeyManagerFactory#init(KeyStore, char[])}).",
          "+     * @param algorithm     The algorithm to use for the Key Manager (see {@link KeyManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 private key entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that builds a Trust Manager from a keystore file.",
          "+ */",
          "+    /**",
          "+     * @param path      The path to the keystore file",
          "+     * @param password  The password for the keystore",
          "+     * @param type      The {@link KeyStore#getType() type} of the keystore (typically \\'PKCS12\\' or \\'jks\\').",
          "+     *                  See {@link KeyStoreUtil#inferKeyStoreType(Path)}.",
          "+     * @param algorithm The algorithm to use for the Trust Manager (see {@link javax.net.ssl.TrustManagerFactory#getAlgorithm()}).",
          "+     */",
          "+    /**",
          "+     * Verifies that the keystore contains at least 1 trusted certificate entry.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link SslTrustConfig} that trusts all certificates. Used when {@link SslVerificationMode#isCertificateVerificationEnabled()} is",
          "+ * {@code false}.",
          "+ * This class cannot be used on FIPS-140 JVM as it has its own trust manager implementation.",
          "+ */",
          "+        // single instances",
          "+    /**",
          "+     * The {@link X509ExtendedTrustManager} that will trust all certificates.",
          "+     * All methods are implemented as a no-op and do not throw exceptions regardless of the certificate presented.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This is a sample of the CAs that we expect on every JRE.",
          "+        // We can safely change this list if the JRE's issuer list changes, but we want to assert something useful.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // When running on BC-FIPS, an invalid file format behaves like an empty file",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * A test for non-trust, non-key configurations.",
          "+     * These are straight forward and can all be tested together",
          "+     */",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+            // If this is not set, the loader will guess from the extension",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Because (a) cannot load a JKS as a PKCS12 & (b) the password is wrong.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * @return the number of composite buckets. Defaults to {@code 10}.",
          "+     */",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+ */",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+    /**",
          "+     * Testcase for https://github.com/elastic/elasticsearch/issues/37303",
          "+     */",
          "+                //since the value(49.95) is a constant, variance should be 0",
          "+                                        // ignore, this is an expected exception"
        ]
      }
    }
  },
  "elastic/elasticsearch_37726": {
    "id": "elastic/elasticsearch_37726",
    "body": "'Closes #37061\\r\\n\\r\\nWe used to use a map and `[:].withDefault{key -> return []}` , then we do `requiredJavaVersions.get(version).add(task)` on the line where we got the `null` form the get call. \\r\\n\\r\\nThe get should return an empty list instead of null, but this doesn't seem to be the case. Relevant SO: https://stackoverflow.com/questions/24738903/creating-map-using-withdefault-causing-null-when-putting-element\\r\\n'",
    "cms": ["'Don't use Groovy's `withDefault`\\n\\nCloses #37061'"],
    "commits": {
      "'caed0ca0a02609b9c377163daf78ce9bb6e1023e'": {
        "cm": "'Don't use Groovy's `withDefault`\\n\\nCloses #37061'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37725": {
    "id": "elastic/elasticsearch_37725",
    "body": "'Now that warning headers no longer contain a timestamp of when the warning was generated, we no longer need to extract the warning value from the warning to determine whether or not the warning value is duplicated. Instead, we can compare strings directly.\\r\\n\\r\\nFurther, when de-duplicating warning headers, are constantly rebuilding sets. Instead of doing that, we can carry about the set with us and rebuild it if we find a new warning value.\\r\\n\\r\\nThis commit applies both of these optimizations.\\r\\n\\r\\nRelates #35754\\r\\nRelates #37530\\r\\nRelates #37597\\r\\nRelates #37622'",
    "cms": [
      "'Optimize warning header de-duplication\\n\\nNow that warning headers no longer contain a timestamp of when the\\nwarning was generated, we no longer need to extract the warning value\\nfrom the warning to determine whether or not the warning value is\\nduplicated. Instead, we can compare strings directly.\\n\\nFurther, when de-duplicating warning headers, are constantly rebuilding\\nsets. Instead of doing that, we can carry about the set with us and\\nrebuild it if we find a new warning value.\\n\\nThis commit applies both of these optimizations.'",
      "'Preserve order'",
      "'Fix assertion'",
      "'Fix insertion order test'",
      "'Make class private'",
      "'Newlines'",
      "'Combiner needs to preserve order too'",
      "'Remove import'",
      "'Set can be final'",
      "'Final'",
      "'Merge remote-tracking branch 'elastic/master' into optimize-warning-head-de-duplication\\n\\n* elastic/master: (24 commits)\\n  [TEST] Mute MlMappingsUpgradeIT testMappingsUpgrade\\n  Streamline skip_unavailable handling (#37672)\\n  Only bootstrap and elect node in current voting configuration (#37712)\\n  Ensure either success or failure path for SearchOperationListener is called (#37467)\\n  Target only specific index in update settings test\\n  Add a note how to benchmark Elasticsearch\\n  Don't use Groovy's `withDefault` (#37726)\\n  Adapt SyncedFlushService (#37691)\\n  Mute FilterAggregatorTests#testRandom\\n  Switch mapping/aggregations over to java time (#36363)\\n  [ML] Update ML results mappings on process start (#37706)\\n  Modify removal_of_types.asciidoc (#37648)\\n  Fix edge case in PutMappingRequestTests (#37665)\\n  Use new bulk API endpoint in the docs (#37698)\\n  Expose sequence number and primary terms in search responses (#37639)\\n  Remove LicenseServiceClusterNotRecoveredTests (#37528)\\n  Migrate SpecificMasterNodesIT to Zen2 (#37532)\\n  Fix MetaStateFormat tests\\n  Use plain text instead of latexmath\\n  Fix a typo in a warning message in TestFixturesPlugin (#37631)\\n  ...'",
      "'Merge branch 'master' into optimize-warning-head-de-duplication\\n\\n* master:\\n  Liberalize StreamOutput#writeStringList (#37768)\\n  Add PersistentTasksClusterService::unassignPersistentTask method (#37576)\\n  Tests: disable testRandomGeoCollectionQuery on tiny polygons (#37579)\\n  Use ILM for Watcher history deletion (#37443)\\n  Make sure PutMappingRequest accepts content types other than JSON. (#37720)\\n  Retry ILM steps that fail due to SnapshotInProgressException (#37624)\\n  Use disassociate in preference to deassociate (#37704)\\n  Delete Redundant RoutingServiceTests (#37750)\\n  Always return metadata version if metadata is requested (#37674)'",
      "'Merge remote-tracking branch 'elastic/master' into optimize-warning-head-de-duplication\\n\\n* elastic/master:\\n  Use explicit version for build-tools in example plugin integ tests (#37792)\\n  Change `rational` to `saturation` in script_score (#37766)\\n  Deprecate types in get field mapping API (#37667)\\n  Add ability to listen to group of affix settings (#37679)\\n  Ensure changes requests return the latest mapping version (#37633)\\n  Make Minio Setup more Reliable (#37747)'"
    ],
    "commits": {
      "'de66ae3d44b5b6da9bb7b75762c2f0de2db78ce5'": {
        "cm": "'Optimize warning header de-duplication\\n\\nNow that warning headers no longer contain a timestamp of when the\\nwarning was generated, we no longer need to extract the warning value\\nfrom the warning to determine whether or not the warning value is\\nduplicated. Instead, we can compare strings directly.\\n\\nFurther, when de-duplicating warning headers, are constantly rebuilding\\nsets. Instead of doing that, we can carry about the set with us and\\nrebuild it if we find a new warning value.\\n\\nThis commit applies both of these optimizations.'",
        "comments": ["+    /**", "+     * Writes a list of strings", "+     */"]
      },
      "'488e5fc5bcdce81c6dfe8040bf6f8c601a8c8556'": {
        "cm": "'Preserve order'",
        "comments": [
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order"
        ]
      },
      "'bb8744da7d03e2eaa7cc408085384ed5ba7daa1e'": {
        "cm": "'Fix assertion'",
        "comments": []
      },
      "'a17adcfb7c3e7de247027922e35eb3c88194165c'": {
        "cm": "'Fix insertion order test'",
        "comments": []
      },
      "'a98049ea6959c6a64eeab7e9f6794fe94acaff4b'": {
        "cm": "'Make class private'",
        "comments": []
      },
      "'81b7d2a7d1ee2b8297262e237a3f4c393e1541a9'": {
        "cm": "'Newlines'",
        "comments": []
      },
      "'9b023914285f6a8f1ca584c94f8f6940c95bcf66'": {
        "cm": "'Combiner needs to preserve order too'",
        "comments": []
      },
      "'6a788a139590b631c2165898c1d5cb83abd2fdfd'": {
        "cm": "'Remove import'",
        "comments": []
      },
      "'4ffd045980456e0004a1002971bfafb29659690d'": {
        "cm": "'Set can be final'",
        "comments": []
      },
      "'6e1ecec8f4361e8748e40d04e52b49f41e983d56'": {
        "cm": "'Final'",
        "comments": []
      },
      "'90cdc65ecc9c5a8bad9d5c0fe1efc4761b7a9263'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into optimize-warning-head-de-duplication\\n\\n* elastic/master: (24 commits)\\n  [TEST] Mute MlMappingsUpgradeIT testMappingsUpgrade\\n  Streamline skip_unavailable handling (#37672)\\n  Only bootstrap and elect node in current voting configuration (#37712)\\n  Ensure either success or failure path for SearchOperationListener is called (#37467)\\n  Target only specific index in update settings test\\n  Add a note how to benchmark Elasticsearch\\n  Don't use Groovy's `withDefault` (#37726)\\n  Adapt SyncedFlushService (#37691)\\n  Mute FilterAggregatorTests#testRandom\\n  Switch mapping/aggregations over to java time (#36363)\\n  [ML] Update ML results mappings on process start (#37706)\\n  Modify removal_of_types.asciidoc (#37648)\\n  Fix edge case in PutMappingRequestTests (#37665)\\n  Use new bulk API endpoint in the docs (#37698)\\n  Expose sequence number and primary terms in search responses (#37639)\\n  Remove LicenseServiceClusterNotRecoveredTests (#37528)\\n  Migrate SpecificMasterNodesIT to Zen2 (#37532)\\n  Fix MetaStateFormat tests\\n  Use plain text instead of latexmath\\n  Fix a typo in a warning message in TestFixturesPlugin (#37631)\\n  ...'",
        "comments": [
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs that have package-private getters.  AggregationInspectionHelper delegates to these",
          "+ * helpers when needed, and consumers should prefer to use AggregationInspectionHelper instead of these",
          "+ * helpers.",
          "+ */",
          "+        // TODO better way to know if the scripted metric received documents?",
          "+        // Could check for null too, but a script might return null on purpose...",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Provides a set of static helpers to determine if a particular type of InternalAggregation \\'has a value\\'",
          "+ * or not.  This can be difficult to determine from an external perspective because each agg uses",
          "+ * different internal bookkeeping to determine if it is empty or not (NaN, +/-Inf, 0.0, etc).",
          "+ *",
          "+ * This set of helpers aim to ease that task by codifying what \\'empty\\' is for each agg.",
          "+ *",
          "+ * It is not entirely accurate for all aggs, since some do not expose or track the needed state",
          "+ * (e.g. sum doesn't record count, so it's not clear if the sum is 0.0 because it is empty",
          "+ * or because of summing to zero).  Pipeline aggs in particular are not well supported",
          "+ * by these helpers since most share InternalSimpleValue and it's not clear which pipeline",
          "+ * generated the value.",
          "+ */",
          "+        // TODO this could be incorrect... e.g. +1 + -1",
          "+        // This is a coarse approximation, since some aggs use positive/negative infinity or NaN",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+            // The index has never been created yet",
          "+     *     ({@link ZoneId#of(String)} and must match a time zone identifier.",
          "+     * Date Histograms have a {@link ZonedDateTime} object as the key,",
          "+        // Start the process",
          "+        // Make sure the state index and alias exist",
          "+        // Try adding the results doc mapping - this updates to the latest version if an old mapping is present",
          "+        // between 1970 and 2065",
          "+        // ending date is the last second of 9999, should be sufficient",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+    /**",
          "+     * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results",
          "+     * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade",
          "+     */",
          "+                // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded",
          "+            // TODO: as the years go by, the field we assert on here should be changed",
          "+            // to the most recent field we've added that is NOT of type \\'keyword\\'"
        ]
      },
      "'94b4687c5626f8d8b55b5697335a2568e92a324d'": {
        "cm": "'Merge branch 'master' into optimize-warning-head-de-duplication\\n\\n* master:\\n  Liberalize StreamOutput#writeStringList (#37768)\\n  Add PersistentTasksClusterService::unassignPersistentTask method (#37576)\\n  Tests: disable testRandomGeoCollectionQuery on tiny polygons (#37579)\\n  Use ILM for Watcher history deletion (#37443)\\n  Make sure PutMappingRequest accepts content types other than JSON. (#37720)\\n  Retry ILM steps that fail due to SnapshotInProgressException (#37624)\\n  Use disassociate in preference to deassociate (#37704)\\n  Delete Redundant RoutingServiceTests (#37750)\\n  Always return metadata version if metadata is requested (#37674)'",
        "comments": [
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * A utility class used for loading index lifecycle policies from the resource classpath",
          "+ */",
          "+    /**",
          "+     * Loads a built-in index lifecycle policy and returns its source.",
          "+     */",
          "+    /**",
          "+     * Loads a resource from the classpath and returns it as a {@link BytesReference}",
          "+     */",
          "+    /**",
          "+     * Parses and validates that the source is not empty.",
          "+     */",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up",
          "+    // Package visible for testing",
          "+        // ILM is required for watcher template index settings"
        ]
      },
      "'03ff725c94fac9e1a93af6988dd1a24fb015170d'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into optimize-warning-head-de-duplication\\n\\n* elastic/master:\\n  Use explicit version for build-tools in example plugin integ tests (#37792)\\n  Change `rational` to `saturation` in script_score (#37766)\\n  Deprecate types in get field mapping API (#37667)\\n  Add ability to listen to group of affix settings (#37679)\\n  Ensure changes requests return the latest mapping version (#37633)\\n  Make Minio Setup more Reliable (#37747)'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed."
        ]
      }
    }
  },
  "elastic/elasticsearch_37724": {
    "id": "elastic/elasticsearch_37724",
    "body": "'The check for old indices did not include an anchor to the specific\\r\\npart of the breaking changes list addressing the breaking change, unlike\\r\\nall the other deprecation warnings. This commit add an anchor to that\\r\\nlink.'",
    "cms": [
      "'Add anchor to doc link in old index check\\n\\nThe check for old indicies did not include an anchor to the specific\\npart of the breaking changes list addressing the breaking change, unlike\\nall the other deprecation warnings. This commit add an anchor to that\\nlink.'",
      "'Merge branch '6.x' into depcheck/improve-doc-link'"
    ],
    "commits": {
      "'4bcb75e3f1e315421f00163783ac1bc435231d6c'": {
        "cm": "'Add anchor to doc link in old index check\\n\\nThe check for old indicies did not include an anchor to the specific\\npart of the breaking changes list addressing the breaking change, unlike\\nall the other deprecation warnings. This commit add an anchor to that\\nlink.'",
        "comments": []
      },
      "'b52e4747de3cfd181c80344a4519884245ef9882'": {
        "cm": "'Merge branch '6.x' into depcheck/improve-doc-link'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Test that specifying a type while include_type_name is false",
          "+        // results in an illegal argument exception.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return whether there are any runnable tasks.",
          "+     */",
          "+    /**",
          "+     * @return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.",
          "+     */",
          "+    /**",
          "+     * @return the current (simulated) time, in milliseconds.",
          "+     */",
          "+    /**",
          "+     * Runs an arbitrary runnable task.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for immediate execution.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for future execution.",
          "+     */",
          "+    /**",
          "+     * Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with the mapping definition nested",
          "+     * under the given type name.",
          "+     */",
          "+    /**",
          "+     * Creates request options designed to be used when making a call that can return warnings, for example a",
          "+     * deprecated request. The options will ensure that the given warnings are returned if all nodes are on",
          "+     * {@link Version#CURRENT} and will allow (but not require) the warnings if any node is running an older version.",
          "+     *",
          "+     * @param warnings The expected warnings.",
          "+     */",
          "+    /**",
          "+     * The leader must open resources for a ccr recovery. If there is no activity for this interval of time,",
          "+     * the leader will close the restore session.",
          "+     */",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // The tasks will not be rescheduled as the sessions are closed.",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // Session starts as not idle. First task will mark it as idle",
          "+        // Task is still scheduled",
          "+        // Accessing session marks it as not-idle",
          "+            // Check session exists",
          "+        // Task is still scheduled",
          "+        // Task is cancelled when the session times out",
          "+        // Only allow a proxy action if the underlying action is allowed"
        ]
      }
    }
  },
  "elastic/elasticsearch_37723": {
    "id": "elastic/elasticsearch_37723",
    "body": "'backport of #37550 with changes to ID made by #37463\\r\\n\\r\\ndelete and close index actions threw IllegalArgumentExceptions\\r\\nwhen attempting to run against an index that has a snapshot\\r\\nin progress.\\r\\n\\r\\nThis change introduces a dedicated SnapshotInProgressException\\r\\nfor these scenarios. This is done to explicitly signal to clients that\\r\\nthis is the reason the action failed, and it is a retryable error.\\r\\n\\r\\nrelates to #37541.\\r\\n'",
    "cms": [
      "'Create specific exception for when snapshots are in progress (#37550)\\n\\ndelete and close index actions threw IllegalArgumentExceptions\\nwhen attempting to run against an index that has a snapshot\\nin progress.\\n\\nThis change introduces a dedicated SnapshotInProgressException\\nfor these scenarios. This is done to explicitly signal to clients that\\nthis is the reason the action failed, and it is a retryable error.\\n\\nrelates to #37541.'",
      "'add comments'"
    ],
    "commits": {
      "'0c2737ffdf98b424161c030589b77c67b13fb389'": {
        "cm": "'Create specific exception for when snapshots are in progress (#37550)\\n\\ndelete and close index actions threw IllegalArgumentExceptions\\nwhen attempting to run against an index that has a snapshot\\nin progress.\\n\\nThis change introduces a dedicated SnapshotInProgressException\\nfor these scenarios. This is done to explicitly signal to clients that\\nthis is the reason the action failed, and it is a retryable error.\\n\\nrelates to #37541.'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Thrown on the attempt to execute an action that requires",
          "+ * that no snapshot is in progress.",
          "+ */"
        ]
      },
      "'38056a0cb1200959ffbdba06bbfe6a74881b1c5f'": {
        "cm": "'add comments'",
        "comments": [
          "+        // SnapshotInProgressException was introduced after CoordinationStateRejectedException (id = 150),",
          "+        // which was not backported from 7.0."
        ]
      }
    }
  },
  "elastic/elasticsearch_37722": {
    "id": "elastic/elasticsearch_37722",
    "body": "'Thanks to @ycombinator for pointing out these omissions.'",
    "cms": [
      "'Remove additional references to 'type' from the _bulk documentation.'"
    ],
    "commits": {
      "'a4d4e26d1562bfb589e827426a865f823e0251de'": {
        "cm": "'Remove additional references to 'type' from the _bulk documentation.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37721": {
    "id": "elastic/elasticsearch_37721",
    "body": "'Replaces intermediate geo objects built by ShapeBuilders with\\r\\nobjects from the libs/geo hierarchy. This should allow us to build\\r\\nall geo functionality around a single hierarchy.\\r\\n\\r\\nFollow up for #35320\\r\\n'",
    "cms": [
      "'Geo: replace intermediate geo objects with libs/geo\\n\\nReplaces intermediate geo objects built by ShapeBuilders with\\nobjects from the libs/geo hierarchy. This should allow us to build\\nall geo functionality around a single hierarchy.\\n\\nFollow up for #35320'",
      "'Update gradle configuration'",
      "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'",
      "'Address @nknize's comments'",
      "'Update settings.gradle to remove unnecessary change'",
      "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'",
      "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'"
    ],
    "commits": {
      "'6c31cc3dde7cdb3600945788ad58eaae37e9caf3'": {
        "cm": "'Geo: replace intermediate geo objects with libs/geo\\n\\nReplaces intermediate geo objects built by ShapeBuilders with\\nobjects from the libs/geo hierarchy. This should allow us to build\\nall geo functionality around a single hierarchy.\\n\\nFollow up for #35320'",
        "comments": ["+                        // Flatten multipoints"]
      },
      "'b06a9eb752248859e3006dd16a6dfab5cd45917f'": {
        "cm": "'Update gradle configuration'",
        "comments": []
      },
      "'b0115b68a0eb64c7fb94f477f97271e00009f05c'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+    /**",
          "+     * The node-level `discovery.zen.minimum_master_nodes` setting on the master node that published this cluster state, for use in rolling",
          "+     * upgrades from 6.x to 7.x. Once all the 6.x master-eligible nodes have left the cluster, the 7.x nodes use this value to determine how",
          "+     * many master-eligible nodes must be discovered before the cluster can be bootstrapped. Note that this method returns the node-level",
          "+     * value of this setting, and ignores any cluster-level override that was set via the API. Callers are expected to combine this value",
          "+     * with any value set in the cluster-level settings. This should be removed once we no longer need support for {@link Version#V_6_7_0}.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    /**",
          "+     * Dummy {@link ElectMasterService} that is only used to choose the best 6.x master from the discovered nodes, ignoring the",
          "+     * `minimum_master_nodes` setting.",
          "+     */",
          "+                        // no Zen1 nodes found, but the last-known master was a Zen1 node, so this is a rolling upgrade",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+ * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that",
          "+ * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes",
          "+    /**",
          "+     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of",
          "+     * the snapshot.",
          "+     *",
          "+     * @param request snapshot request",
          "+     * @param listener snapshot completion listener",
          "+     */",
          "+     * @param snapshot Snapshot to listen for",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // initial configuration should not have a place holder for local node",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start"
        ]
      },
      "'8a738a1e5b747c2f9ac4aa8a8fecf73f175899fd'": {
        "cm": "'Address @nknize's comments'",
        "comments": []
      },
      "'4aa516a516fa7fcbee9562dba029d7b864fce4a3'": {
        "cm": "'Update settings.gradle to remove unnecessary change'",
        "comments": []
      },
      "'eea5c1eaa3ce40491b9fca3b3de50e477b419a87'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'",
        "comments": [
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as GeoHash longs (for efficiency's sake) but formats results as Geohash strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. If present, the mapping definition will be nested under a type name."
        ]
      },
      "'73a34c1d0a7835d7f8ef95caae3c15df8eed13a1'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into switch-to-libsgeo-object'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37720": {
    "id": "elastic/elasticsearch_37720",
    "body": "'This bug in the server-side `PutMappingRequest` was discovered while refactoring usages of `RandomCreateIndexGenerator`.'",
    "cms": [
      "'Make sure PutMappingRequest accepts content types other than JSON.'"
    ],
    "commits": {
      "'e37a2091db36ccb53d2e8fb1c2adabb948c31e74'": {
        "cm": "'Make sure PutMappingRequest accepts content types other than JSON.'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37719": {
    "id": "elastic/elasticsearch_37719",
    "body": "'Currently all proxied actions are denied for the SystemPrivilege.\\r\\nUnfortunately, there are use cases (CCR) where we would like to proxy\\r\\nactions to a remote node that are normally performed by the\\r\\nsystem context. This commit allows the system context to perform\\r\\nproxy actions if they are actions that the system context is normally\\r\\nallowed to execute.'",
    "cms": ["'Allow Actions'"],
    "commits": {
      "'3bfb0abfae5d08bb2687bfeacbaf071617bbd639'": {
        "cm": "'Allow Actions'",
        "comments": [
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+        // Only allow a proxy action if the underlying action is allowed"
        ]
      }
    }
  },
  "elastic/elasticsearch_37716": {
    "id": "elastic/elasticsearch_37716",
    "body": "'This is related to #35975. This commit adds timeout functionality to\\r\\nthe local session on a leader node. When a session is started, a timeout\\r\\nis scheduled using a repeatable runnable. If the session is not accessed\\r\\nin between two runs the session is closed. When the sssion is closed,\\r\\nthe repeating task is cancelled.\\r\\n\\r\\nAdditionally, this commit moves session uuid generation to the leader\\r\\ncluster. And renames the PutCcrRestoreSessionRequest to\\r\\nStartCcrRestoreSessionRequest to reflect that change.'",
    "cms": [
      "'Add local session timeouts to leader node (#37438)\\n\\nThis is related to #35975. This commit adds timeout functionality to\\r\\nthe local session on a leader node. When a session is started, a timeout\\r\\nis scheduled using a repeatable runnable. If the session is not accessed\\r\\nin between two runs the session is closed. When the sssion is closed,\\r\\nthe repeating task is cancelled.\\r\\n\\r\\nAdditionally, this commit moves session uuid generation to the leader\\r\\ncluster. And renames the PutCcrRestoreSessionRequest to\\r\\nStartCcrRestoreSessionRequest to reflect that change.'",
      "'Fix'"
    ],
    "commits": {
      "'629a6e30c987e1b24b5ff2eb6d4cfd99195b2cb3'": {
        "cm": "'Add local session timeouts to leader node (#37438)\\n\\nThis is related to #35975. This commit adds timeout functionality to\\r\\nthe local session on a leader node. When a session is started, a timeout\\r\\nis scheduled using a repeatable runnable. If the session is not accessed\\r\\nin between two runs the session is closed. When the sssion is closed,\\r\\nthe repeating task is cancelled.\\r\\n\\r\\nAdditionally, this commit moves session uuid generation to the leader\\r\\ncluster. And renames the PutCcrRestoreSessionRequest to\\r\\nStartCcrRestoreSessionRequest to reflect that change.'",
        "comments": [
          "+    /**",
          "+     * The leader must open resources for a ccr recovery. If there is no activity for this interval of time,",
          "+     * the leader will close the restore session.",
          "+     */",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // The tasks will not be rescheduled as the sessions are closed.",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // Session starts as not idle. First task will mark it as idle",
          "+        // Task is still scheduled",
          "+        // Accessing session marks it as not-idle",
          "+            // Check session exists",
          "+        // Task is still scheduled",
          "+        // Task is cancelled when the session times out"
        ]
      },
      "'792f2d98d73802ccfcb27fe29be7ff595e2042a7'": {
        "cm": "'Fix'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return whether there are any runnable tasks.",
          "+     */",
          "+    /**",
          "+     * @return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.",
          "+     */",
          "+    /**",
          "+     * @return the current (simulated) time, in milliseconds.",
          "+     */",
          "+    /**",
          "+     * Runs an arbitrary runnable task.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for immediate execution.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for future execution.",
          "+     */",
          "+    /**",
          "+     * Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */"
        ]
      }
    }
  },
  "elastic/elasticsearch_37715": {
    "id": "elastic/elasticsearch_37715",
    "body": "'Add release notes for 6.6. Issuing a PR so I can get a review before merging since this is my first time generating release notes for ES.'",
    "cms": [
      "'add 6.6 release notes'",
      "'resolve merge conflicts'",
      "'remove token API changes per code review'",
      "'move multiple area features into appropriate sections'",
      "'Update docs/reference/release-notes/6.6.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Update docs/reference/release-notes/6.6.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
      "'Remove category prefix from PR descriptions'",
      "'clean up labels to make them less confusing for users'",
      "'Re-sorted sections alphabetically'",
      "'Adds label for breaking changes link'",
      "'move docs infra PR to HLRC and delete unused section'",
      "'add token invalidation to correct section'",
      "'[DOCS] Re-adds coming tag'"
    ],
    "commits": {
      "'c97afd12123b6c5e414498b1ff66fe36aaf7d8c3'": {
        "cm": "'add 6.6 release notes'",
        "comments": []
      },
      "'7425d1f7cff2218b8b49f2f07b2d5de0c7d92069'": {
        "cm": "'resolve merge conflicts'",
        "comments": [
          "+                // Only retry is the shard follow task is not stopped.",
          "+            // Cancel just before attempting to fetch operations:",
          "+                        // Add the sub-map to the queue along with the current path index",
          "+                        // We exhausted the path and got a map",
          "+                        // If it is an object - it will be handled in the value extractor"
        ]
      },
      "'c6e39764277a4b2c0aea68765c4cb56ddd4d5c47'": {
        "cm": "'remove token API changes per code review'",
        "comments": []
      },
      "'72815dd0d6c4604481989801dfe75871a7c7d47d'": {
        "cm": "'move multiple area features into appropriate sections'",
        "comments": []
      },
      "'ab9aaa08bbb8b0a1a3eca9e917eb577c5de5e6c8'": {
        "cm": "'Update docs/reference/release-notes/6.6.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'f522aebbaa0cd1f8a7225ce3c3d8c688a016ad61'": {
        "cm": "'Update docs/reference/release-notes/6.6.asciidoc\\n\\nCo-Authored-By: pcsanwald <paul.sanwald@elastic.co>'",
        "comments": []
      },
      "'e9119043d5a78f57c714fc184e64cdac4d63aee0'": {
        "cm": "'Remove category prefix from PR descriptions'",
        "comments": []
      },
      "'5899df77d0d0c502953c15413c97648661888677'": {
        "cm": "'clean up labels to make them less confusing for users'",
        "comments": []
      },
      "'d362ab505304a11c09ea0fd4f64b419970fc3bbf'": {
        "cm": "'Re-sorted sections alphabetically'",
        "comments": []
      },
      "'b5e74c471a83209554361c868290b6b907cb0f78'": {
        "cm": "'Adds label for breaking changes link'",
        "comments": []
      },
      "'f18c2e04818e170521a31161180c0a939b7b5150'": {
        "cm": "'move docs infra PR to HLRC and delete unused section'",
        "comments": []
      },
      "'eea93cc77d4f01bfbd0131b9c3557925523bd025'": {
        "cm": "'add token invalidation to correct section'",
        "comments": []
      },
      "'cb66b69d685537bb39db6f9b725f74ddb6f4983e'": {
        "cm": "'[DOCS] Re-adds coming tag'",
        "comments": []
      }
    }
  },
  "elastic/elasticsearch_37713": {
    "id": "elastic/elasticsearch_37713",
    "body": "'AuthenticateResponse did not allow unknown fields. This commit fixes the\\r\\ntest and ConstructingObjectParser such that it does now allow unknown\\r\\nfields.\\r\\n\\r\\nRelates #36938\\r\\n'",
    "cms": [
      "'Update authenticate to allow unknown fields\\n\\nAuthenticateResponse did not allow unknown fields. This commit fixes the\\ntest and ConstructingObjectParser such that it does now allow unknown\\nfields.\\n\\nRelates #36938'",
      "'Merge remote-tracking branch 'upstream/master' into rest_cop_security_authenticate'"
    ],
    "commits": {
      "'8d1e5a7ea9db3a2f2dca0e93ad7e4024e8837faa'": {
        "cm": "'Update authenticate to allow unknown fields\\n\\nAuthenticateResponse did not allow unknown fields. This commit fixes the\\ntest and ConstructingObjectParser such that it does now allow unknown\\nfields.\\n\\nRelates #36938'",
        "comments": [
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality"
        ]
      },
      "'a45effbf04fe49cdd66d65aa9fe996c1215a40a9'": {
        "cm": "'Merge remote-tracking branch 'upstream/master' into rest_cop_security_authenticate'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */",
          "+/**",
          "+ * Request the mappings of specific fields",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+/**",
          "+ * Response object for {@link GetFieldMappingsRequest} API",
          "+ *",
          "+ * Note: there is a new class with the same name for the Java HLRC that uses a typeless format.",
          "+ * Any changes done to this class should go to that client class as well.",
          "+ */",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+    /**",
          "+     * Read a {@linkplain DateTimeZone}.",
          "+     */",
          "+    /**",
          "+     * Read an optional {@linkplain ZoneId}.",
          "+     */",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+    /**",
          "+     * Write a {@linkplain ZoneId} to the stream.",
          "+     */",
          "+    /**",
          "+     * Write an optional {@linkplain ZoneId} to the stream.",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+    /**",
          "+     * Adds a affix settings consumer that accepts the settings for a group of settings. The consumer is only",
          "+     * notified if at least one of the settings change.",
          "+     * <p>",
          "+     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically.",
          "+     * </p>",
          "+     */",
          "+     * Create a DateMathParser from the existing formatter",
          "+     *",
          "+     * @return The DateMathParser object",
          "+        // support the 6.x BWC compatible way of parsing java 8 dates",
          "+            //  this one here is lenient as well to retain joda time based bwc compatibility",
          "+     * @return          the parsed date as an Instant since the epoch",
          "+            // if there is already a milli of second, we need to overwrite it",
          "+        // the third formatter fails under java 8 as a printer, so fall back to this one",
          "+                // TODO only millisecond granularity here!",
          "+/** A {@link FieldMapper} for dates. */",
          "+     * Same as {@link #rangeQuery(Object, Object, boolean, boolean, ShapeRelation, ZoneId, DateMathParser, QueryShardContext)}",
          "+        // this just ensure that the pattern is actually valid, no need to keep it here",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+    /**",
          "+     * returns the sequence number of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_SEQ_NO}",
          "+     * if not requested.",
          "+     **/",
          "+    /**",
          "+     * returns the primary term of the last modification to the document, or {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}",
          "+     * if not requested. */",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+     * Same as {@link #addRange(String, ZonedDateTime, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedTo(String, ZonedDateTime)} but the key will be",
          "+     * Same as {@link #addUnboundedFrom(String, ZonedDateTime)} but the key will be",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs that have package-private getters.  AggregationInspectionHelper delegates to these",
          "+ * helpers when needed, and consumers should prefer to use AggregationInspectionHelper instead of these",
          "+ * helpers.",
          "+ */",
          "+        // TODO better way to know if the scripted metric received documents?",
          "+        // Could check for null too, but a script might return null on purpose...",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Provides a set of static helpers to determine if a particular type of InternalAggregation \\'has a value\\'",
          "+ * or not.  This can be difficult to determine from an external perspective because each agg uses",
          "+ * different internal bookkeeping to determine if it is empty or not (NaN, +/-Inf, 0.0, etc).",
          "+ *",
          "+ * This set of helpers aim to ease that task by codifying what \\'empty\\' is for each agg.",
          "+ *",
          "+ * It is not entirely accurate for all aggs, since some do not expose or track the needed state",
          "+ * (e.g. sum doesn't record count, so it's not clear if the sum is 0.0 because it is empty",
          "+ * or because of summing to zero).  Pipeline aggs in particular are not well supported",
          "+ * by these helpers since most share InternalSimpleValue and it's not clear which pipeline",
          "+ * generated the value.",
          "+ */",
          "+        // TODO this could be incorrect... e.g. +1 + -1",
          "+        // This is a coarse approximation, since some aggs use positive/negative infinity or NaN",
          "+    /**",
          "+     * Should each {@link org.elasticsearch.search.SearchHit} be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+    /**",
          "+     * Indicates whether {@link org.elasticsearch.search.SearchHit}s should be returned with the",
          "+     * sequence number and primary term of the last modification of the document.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // we have to check the primary term field as it is only assigned for non-nested documents",
          "+    /** indicates whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /** controls whether the sequence number and primary term of the last modification to each hit should be returned */",
          "+    /**",
          "+     * Returns whether this cluster is configured to be skipped when unavailable",
          "+     */",
          "+    /**",
          "+     * Returns whether the cluster identified by the provided alias is configured to be skipped when unavailable",
          "+     */",
          "+                //setting skip_unavailable to true for all the disconnected clusters will make the request succeed again",
          "+                //give transport service enough time to realize that the node is down, and to notify the connection listeners",
          "+                //so that RemoteClusterConnection is left with no connected nodes, hence it will retry connecting next",
          "+        // if it's the first master in the cluster bootstrap the cluster with this node name",
          "+                    // initial configuration should not have a place holder for local node",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+     * randomized test on {@link org.elasticsearch.common.Rounding.TimeIntervalRounding} with random interval and time zone offsets",
          "+    // this test requires tests to run with -Djava.locale.providers=COMPAT in order to work",
          "+//    public void testCustomTimeFormats() {",
          "+//        assertSameDate(\\'2010 12 06 11:05:15\\', \\'yyyy dd MM HH:mm:ss\\');",
          "+//        assertSameDate(\\'12/06\\', \\'dd/MM\\');",
          "+//        assertSameDate(\\'Nov 24 01:29:01 -0800\\', \\'MMM dd HH:mm:ss Z\\');",
          "+//",
          "+//        // also ensure that locale based dates are the same",
          "+//        assertSameDate(\\'Di., 05 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Mi., 06 Dez. 2000 02:55:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Do., 07 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//        assertSameDate(\\'Fr., 08 Dez. 2000 00:00:00 -0800\\', \\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'));",
          "+//",
          "+//        DateTime dateTimeNow = DateTime.now(DateTimeZone.UTC);",
          "+//        ZonedDateTime javaTimeNow = Instant.ofEpochMilli(dateTimeNow.getMillis()).atZone(ZoneOffset.UTC);",
          "+//        assertSamePrinterOutput(\\'E, d MMM yyyy HH:mm:ss Z\\', LocaleUtils.parse(\\'de\\'), javaTimeNow, dateTimeNow);",
          "+//    }",
          "+                        /*",
          "+                         * If dirty WriteStateException occurred, it's only safe to proceed if there is subsequent",
          "+                         * successful write of metadata and Manifest. We prefer to break here, not to over complicate test logic.",
          "+                         * See also MetaDataStateFormat#testFailRandomlyAndReadAnyState, that does not break.",
          "+                         */",
          "+                //if there was a WriteStateException we need to override current state before we continue",
          "+        // dates will break the default format, month/day of month is turned around in the format",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+        // epoch millis: 1332547200000",
          "+        // day with dst shift, only 23h long",
          "+        // day with dst shift -1h, 25h long",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return a random date between 1970 and ca 2065",
          "+     */",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version."
        ]
      }
    }
  },
  "elastic/elasticsearch_37712": {
    "id": "elastic/elasticsearch_37712",
    "body": "'Adapts bootstrapping and leader election to only trigger on nodes that are actually part of the voting configuration. As a follow-up, we will switch master-ship when the current leader is reconfigured out of the voting configuration.'",
    "cms": [
      "'Only bootstrap and elect node in current configuration'",
      "'checkstyle'",
      "'Merge remote-tracking branch 'elastic/master' into only-bootstrap-node-with-vote'"
    ],
    "commits": {
      "'8ee9f90d97ad33d24701f7803c7970d9228f12f7'": {
        "cm": "'Only bootstrap and elect node in current configuration'",
        "comments": [
          "+                    // initial configuration should not have a place holder for local node"
        ]
      },
      "'3a6eac2ece8ef5e7e905bbc57e6343a4b00c1cb2'": {
        "cm": "'checkstyle'",
        "comments": []
      },
      "'6233e8890cc90268b9b534f23b5fe0abf10350e5'": {
        "cm": "'Merge remote-tracking branch 'elastic/master' into only-bootstrap-node-with-vote'",
        "comments": [
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs that have package-private getters.  AggregationInspectionHelper delegates to these",
          "+ * helpers when needed, and consumers should prefer to use AggregationInspectionHelper instead of these",
          "+ * helpers.",
          "+ */",
          "+        // TODO better way to know if the scripted metric received documents?",
          "+        // Could check for null too, but a script might return null on purpose...",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Provides a set of static helpers to determine if a particular type of InternalAggregation \\'has a value\\'",
          "+ * or not.  This can be difficult to determine from an external perspective because each agg uses",
          "+ * different internal bookkeeping to determine if it is empty or not (NaN, +/-Inf, 0.0, etc).",
          "+ *",
          "+ * This set of helpers aim to ease that task by codifying what \\'empty\\' is for each agg.",
          "+ *",
          "+ * It is not entirely accurate for all aggs, since some do not expose or track the needed state",
          "+ * (e.g. sum doesn't record count, so it's not clear if the sum is 0.0 because it is empty",
          "+ * or because of summing to zero).  Pipeline aggs in particular are not well supported",
          "+ * by these helpers since most share InternalSimpleValue and it's not clear which pipeline",
          "+ * generated the value.",
          "+ */",
          "+        // TODO this could be incorrect... e.g. +1 + -1",
          "+        // This is a coarse approximation, since some aggs use positive/negative infinity or NaN"
        ]
      }
    }
  },
  "elastic/elasticsearch_37710": {
    "id": "elastic/elasticsearch_37710",
    "body": "'The existing JavaDateMathParserTests were using joda formatters instead\\r\\nof java ones and thus the tests were not running the expected code.\\r\\n\\r\\nThis fixes the above and some follow up failures due to that.\\r\\n\\r\\nFirst some round up formatter issues are fixed, especially when using\\r\\nepoch dates, the parsing could be wrong and result in exceptions.\\r\\n\\r\\nSecond, some dates cannot be handled the same in java8 like in joda time\\r\\ndue to more strict parsing, when used in combination with epoch dates.\\r\\n\\r\\n'",
    "cms": [
      "'Ensure JavaDateMathParserTests are calling java formatters\\n\\nThe existing JavaDateMathParserTests were using joda formatters instead\\nof java ones and thus the tests were not running the expected code.\\n\\nThis fixes the above and some follow up failures due to that.\\n\\nFirst some round up formatter issues are fixed, especially when using\\nepoch dates, the parsing could be wrong and result in exceptions.\\n\\nSecond, some dates cannot be handled the same in java8 like in joda time\\ndue to more strict parsing, when used in combination with epoch dates.'",
      "'Merge branch '6.x' into 1901-fix-java-date-math-parsers'",
      "'fix comment'",
      "'Merge branch '6.x' into 1901-fix-java-date-math-parsers'"
    ],
    "commits": {
      "'09ad14bd87f986eebc8c65de5ce68bdb6fc56711'": {
        "cm": "'Ensure JavaDateMathParserTests are calling java formatters\\n\\nThe existing JavaDateMathParserTests were using joda formatters instead\\nof java ones and thus the tests were not running the expected code.\\n\\nThis fixes the above and some follow up failures due to that.\\n\\nFirst some round up formatter issues are fixed, especially when using\\nepoch dates, the parsing could be wrong and result in exceptions.\\n\\nSecond, some dates cannot be handled the same in java8 like in joda time\\ndue to more strict parsing, when used in combination with epoch dates.'",
        "comments": []
      },
      "'45edfa7360320c2c1406c74b67f3ab3cea21d78b'": {
        "cm": "'Merge branch '6.x' into 1901-fix-java-date-math-parsers'",
        "comments": [
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object, and also uses request options instead of headers.",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+        // SnapshotInProgressException was introduced after CoordinationStateRejectedException (id = 150),",
          "+        // which was not backported from 7.0.",
          "+     * {@code 299 Elasticsearch-6.0.0 \\'warning value\\'}, the return value of this method would be {@code warning value}.",
          "+         * quote and we know the last quote is at the end of the string",
          "+         *   299 Elasticsearch-6.0.0 \\'warning value\\'",
          "+         *                           ^             ^",
          "+         *                           firstQuote    lastQuote",
          "+    /**",
          "+     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}.",
          "+     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Thrown on the attempt to execute an action that requires",
          "+ * that no snapshot is in progress.",
          "+ */",
          "+    /**",
          "+     * Unwraps a proxy action and returns the underlying action",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // Test that specifying a type while include_type_name is false",
          "+        // results in an illegal argument exception.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @return whether there are any runnable tasks.",
          "+     */",
          "+    /**",
          "+     * @return whether there are any deferred tasks, i.e. tasks that are scheduled for the future.",
          "+     */",
          "+    /**",
          "+     * @return the current (simulated) time, in milliseconds.",
          "+     */",
          "+    /**",
          "+     * Runs an arbitrary runnable task.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for immediate execution.",
          "+     */",
          "+    /**",
          "+     * Schedule a task for future execution.",
          "+     */",
          "+    /**",
          "+     * Advance the current time to the time of the next deferred task, and update the sets of deferred and runnable tasks accordingly.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ExecutorService</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue.",
          "+     */",
          "+    /**",
          "+     * @return A <code>ThreadPool</code> that uses this task queue and wraps <code>Runnable</code>s in the given wrapper.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+    /**",
          "+     * Creates a random mapping, with the mapping definition nested",
          "+     * under the given type name.",
          "+     */",
          "+    /**",
          "+     * Creates request options designed to be used when making a call that can return warnings, for example a",
          "+     * deprecated request. The options will ensure that the given warnings are returned if all nodes are on",
          "+     * {@link Version#CURRENT} and will allow (but not require) the warnings if any node is running an older version.",
          "+     *",
          "+     * @param warnings The expected warnings.",
          "+     */",
          "+    /**",
          "+     * The leader must open resources for a ccr recovery. If there is no activity for this interval of time,",
          "+     * the leader will close the restore session.",
          "+     */",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // The tasks will not be rescheduled as the sessions are closed.",
          "+            // Would throw exception if missing",
          "+            // Would throw exception if missing",
          "+        // Session starts as not idle. First task will mark it as idle",
          "+        // Task is still scheduled",
          "+        // Accessing session marks it as not-idle",
          "+            // Check session exists",
          "+        // Task is still scheduled",
          "+        // Task is cancelled when the session times out",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * Converts a CCR following index into a normal, standalone index, once the index is ready to be safely separated.",
          "+ *",
          "+ * \\'Readiness\\' is composed of two conditions:",
          "+ * 1) The index must have {@link LifecycleSettings#LIFECYCLE_INDEXING_COMPLETE} set to {@code true}, which is",
          "+ *      done automatically by {@link RolloverAction} (or manually).",
          "+ * 2) The index must be up to date with the leader, defined as the follower checkpoint being",
          "+ *      equal to the global checkpoint for all shards.",
          "+ */",
          "+        // There are no settings to change, so therefor this action should be safe:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Follow stats api needs to return stats for follower index and all shard follow tasks should be synced:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Index must have been since deleted, ignore it",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Only allow a proxy action if the underlying action is allowed",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Mock pause follow api call:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Mock pause follow api call:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Mock unfollow api call:",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+            // Policy with the same name must exist in follower cluster too:",
          "+            // Aliases are not copied from leader index, so we need to add that for the rollover action in follower cluster:",
          "+                    // Sanity check that following_index setting has been set, so that we can verify later that this setting has been unset:",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have placed both indices in the warm phase and there these indices are read-only:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+            // Create a policy on the leader",
          "+            // Policy with the same name must exist in follower cluster too:",
          "+            // Set up an auto-follow pattern",
          "+                // Create an index on the leader using the template set up above",
          "+                // Check that the new index is creeg",
          "+                // Check that it got replicated to the follower",
          "+                // Aliases are not copied from leader index, so we need to add that for the rollover action in follower cluster:",
          "+                    // Sanity check that following_index setting has been set, so that we can verify later that this setting has been unset:",
          "+                // Wait for the index to roll over on the leader",
          "+                    // Wait for the next index should have been created on the leader",
          "+                    // And the old index should have a write block and indexing complete set",
          "+                    // Wait for the setting to get replicated to the follower",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // The next index should have been created on the follower as well",
          "+                    // And the previously-follower index should be in the warm phase",
          "+                // Clean up"
        ]
      },
      "'453fcac989ec8a2a4336d9594530adbcdb65370d'": {
        "cm": "'fix comment'",
        "comments": ["+        // numbers only are always an epoch timestamp"]
      },
      "'37565c970559ff07bfeee62ec504688c790a2384'": {
        "cm": "'Merge branch '6.x' into 1901-fix-java-date-math-parsers'",
        "comments": [
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+ * (see {@link AllocationService#disassociateDeadNodes(RoutingAllocation)}.",
          "+        // It's possible for replicaNodeVersion to be null, when disassociating dead nodes",
          "+     * Reads a list of objects. The list is expected to have been written using {@link StreamOutput#writeList(List)} or",
          "+     * {@link StreamOutput#writeStreamableList(List)}.",
          "+     *",
          "+     * @return the list of objects",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+    /**",
          "+     * Reads a list of strings. The list is expected to have been written using {@link StreamOutput#writeStringCollection(Collection)}.",
          "+     *",
          "+     * @return the list of strings",
          "+     * @throws IOException if an I/O exception occurs reading the list",
          "+     */",
          "+     * Writes a collection of objects via a {@link Writer}.",
          "+     *",
          "+     * @param collection the collection of objects",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * Writes a collection of a strings. The corresponding collection can be read from a stream input using",
          "+     * {@link StreamInput#readList(Writeable.Reader)}.",
          "+     *",
          "+     * @param collection the collection of strings",
          "+     * @throws IOException if an I/O exception occurs writing the collection",
          "+     * @see org.elasticsearch.indices.recovery.RecoveryTarget#indexTranslogOperations(List, int, long, long, ActionListener)",
          "+            // For a sequence based recovery, the target can keep its local translog",
          "+                /*",
          "+                 * add shard to replication group (shard will receive replication requests from this point on) now that engine is open.",
          "+                 * This means that any document indexed into the primary after this will be replicated to this replica as well",
          "+                 * make sure to do this before sampling the max sequence number in the next step, to ensure that we send",
          "+                 * all documents up to maxSeqNo in phase2.",
          "+                 */",
          "+                /*",
          "+                 * We need to wait for all operations up to the current max to complete, otherwise we can not guarantee that all",
          "+                 * operations in the required range will be available for replaying from the translog of the source.",
          "+                 */",
          "+     * @param listener                   a listener which will be notified with the local checkpoint on the target.",
          "+            // We need to synchronized Snapshot#next() because it's called by different threads through sendBatch.",
          "+            // Even though those calls are not concurrent, Snapshot#next() uses non-synchronized state and is not multi-thread-compatible.",
          "+                    // check if this request is past bytes threshold, and if so, send it off",
          "+        // send the leftover operations or if no operations were sent, request the target to respond with its local checkpoint",
          "+            /*",
          "+             * The maxSeenAutoIdTimestampOnPrimary received from the primary is at least the highest auto_id_timestamp from any operation",
          "+             * will be replayed. Bootstrapping this timestamp here will disable the optimization for original append-only requests",
          "+             * (source of these operations) replicated via replication. Without this step, we may have duplicate documents if we",
          "+             * replay these operations first (without timestamp), then optimize append-only requests (with timestamp).",
          "+             */",
          "+            /*",
          "+             * Bootstrap the max_seq_no_of_updates from the primary to make sure that the max_seq_no_of_updates on this replica when",
          "+             * replaying any of these operations will be at least the max_seq_no_of_updates on the primary when that op was executed on.",
          "+             */",
          "+            // update stats only after all operations completed (to ensure that mapping updates don't mess with stats)",
          "+            // roll over / flush / trim if needed",
          "+     * @param listener                            a listener which will be notified with the local checkpoint on the target",
          "+     *                                            after these operations are successfully indexed on the target.",
          "+        // before 6.0.0 we responded with an empty response so we have to maintain that",
          "+    /**",
          "+     * This unassigns a task from any node, i.e. it is assigned to a {@code null} node with the provided reason.",
          "+     *",
          "+     * Since the assignment executor node is null, the {@link PersistentTasksClusterService} will attempt to reassign it to a valid",
          "+     * node quickly.",
          "+     *",
          "+     * @param taskId           the id of a persistent task",
          "+     * @param taskAllocationId the expected allocation id of the persistent task",
          "+     * @param reason           the reason for unassigning the task from any node",
          "+     * @param listener         the listener that will be called when task is unassigned",
          "+     */",
          "+     * removed from the cluster (disassociateDeadNodes). This means that the ShardRouting of the replica was failed, but it's allocation",
          "+                            // Shard should now be active since we did recover:",
          "+        // Speed up rechecks to a rate that is quicker than what settings would allow",
          "+        // Disallow re-assignment after it is unallocated to verify master and node state",
          "+            // Verify that the task is NOT running on the node",
          "+            // Verify that the task is STILL in internal cluster state",
          "+        // Allow it to be reassigned again to the same node",
          "+        // Verify it starts again",
          "+        // Complete or cancel the running task",
          "+            // Wait for the task to start",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using.",
          "+    /**",
          "+     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using.",
          "+     * TODO: Deprecate and remove this setting",
          "+     */",
          "+            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations.",
          "+            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date",
          "+            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose",
          "+            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService.",
          "+                    // if wait_for_metadata_version timeout, the response is empty",
          "+                        // ask for the next version.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+        // Pause follower1 index and check the follower info api:",
          "+        // Block the ClusterService from exposing the cluster state with the mapping change. This makes the ClusterService",
          "+        // have an older mapping version than the actual mapping version that IndexService will use to index \\'doc1\\'.",
          "+        // Make sure at least one read-request which requires mapping sync is completed.",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/*",
          "+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one",
          "+ * or more contributor license agreements. Licensed under the Elastic License;",
          "+ * you may not use this file except in compliance with the Elastic License.",
          "+ */",
          "+/**",
          "+ * This is an abstract AsyncActionStep that wraps the performed action listener, checking to see",
          "+ * if the action fails due to a snapshot being in progress. If a snapshot is in progress, it",
          "+ * registers an observer and waits to try again when a snapshot is no longer running.",
          "+ */",
          "+        // Wrap the original listener to handle exceptions caused by ongoing snapshots",
          "+    /**",
          "+     * Method to be performed during which no snapshots for the index are already underway.",
          "+     */",
          "+    /**",
          "+     * SnapshotExceptionListener is an injected listener wrapper that checks to see if a particular",
          "+     * action failed due to a {@code SnapshotInProgressException}. If it did, then it registers a",
          "+     * ClusterStateObserver listener waiting for the next time the snapshot is not running,",
          "+     * re-running the step's {@link #performAction(IndexMetaData, ClusterState, ClusterStateObserver, Listener)}",
          "+     * method when the snapshot is no longer running.",
          "+     */",
          "+                                // The index has since been deleted, mission accomplished!",
          "+                            // Re-invoke the performAction method with the new state",
          "+                        // TODO: what is a good timeout value for no new state received during this time?",
          "+                    // There was a second error trying to set up an observer,",
          "+                    // fail the original listener",
          "+    /**",
          "+     * A {@link ClusterStateObserver.Listener} that invokes the given function with the new state,",
          "+     * once no snapshots are running. If a snapshot is still running it registers a new listener",
          "+     * and tries again. Passes any exceptions to the original exception listener if they occur.",
          "+     */",
          "+                // No snapshots are running, new state is acceptable to proceed",
          "+                    // There is a snapshot running with this index name",
          "+            // There are snapshots, but none for this index, so it's okay to proceed with this state",
          "+            // This means the cluster is being shut down, so nothing to do here",
          "+            // Create the repository before taking the snapshot.",
          "+                // start snapshot",
          "+                // add policy and expect it to trigger unfollow immediately (while snapshot in progress)",
          "+                    // Ensure that 'index.lifecycle.indexing_complete' is replicated:",
          "+                    // ILM should have unfollowed the follower index, so the following_index setting should have been removed:",
          "+                    // (this controls whether the follow engine is used)",
          "+                    // Following index should have the document",
          "+                    // ILM should have completed the unfollow",
          "+                // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that index was deleted",
          "+        // assert that snapshot is still in progress and clean up",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+            // required so the shrink doesn't wait on SetSingleNodeAllocateStep",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger shrink immediately (while snapshot in progress)",
          "+        // assert that index was shrunk and original index was deleted",
          "+        // assert that snapshot succeeded",
          "+        // Create the repository before taking the snapshot.",
          "+        // create delete policy",
          "+        // create index without policy",
          "+        // index document so snapshot actually does something",
          "+        // start snapshot",
          "+        // add policy and expect it to trigger delete immediately (while snapshot in progress)",
          "+        // assert that the index froze",
          "+        // assert that snapshot is still in progress and clean up"
        ]
      }
    }
  },
  "elastic/elasticsearch_37709": {
    "id": "elastic/elasticsearch_37709",
    "body": "'Replace `threadPool().schedule()` / `catch { EsRejectedExecutionException }` pattern with direct calls to `ThreadPool#scheduleUnlessShuttingDown()`.\\r\\n\\r\\nRelates #36318\\r\\n'",
    "cms": [
      "'Refactor into appropriate uses of scheduleUnlessShuttingDown\\n\\nReplace `threadPool().schedule()` / catch\\n`EsRejectedExecutionException` pattern with direct calls to\\n`ThreadPool#scheduleUnlessShuttingDown()`.\\n\\nRelates #36318'",
      "'Address PR comment'",
      "'Merge remote-tracking branch 'origin/master' into issue#36318'",
      "'Address PR comment'",
      "'Merge branch 'master' into issue#36318'"
    ],
    "commits": {
      "'528c0dbd4664b8f98b1cdee5ccb6b6161bdb910d'": {
        "cm": "'Refactor into appropriate uses of scheduleUnlessShuttingDown\\n\\nReplace `threadPool().schedule()` / catch\\n`EsRejectedExecutionException` pattern with direct calls to\\n`ThreadPool#scheduleUnlessShuttingDown()`.\\n\\nRelates #36318'",
        "comments": [
          "+        // Submit a job that will start after DEFAULT_STARTING_INTERVAL, and reschedule itself after running",
          "+            // Submit an info update job to be run immediately"
        ]
      },
      "'822d0c71e20f8959936c2302cb9e0441c8ba9547'": {
        "cm": "'Address PR comment'",
        "comments": [
          "+                // Submit an info update job to be run immediately"
        ]
      },
      "'0138aa638db8e8c4f666e7671f0b94792e451f96'": {
        "cm": "'Merge remote-tracking branch 'origin/master' into issue#36318'",
        "comments": [
          "+    /**",
          "+      * Returns info about the unreleased version, or {@code null} if the version is released.",
          "+      */",
          "+        // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal",
          "+        // which appears to mirror jcenter, opening us up to pulling a \\'later\\' version of build-tools",
          "+    /**",
          "+     * Updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #putMapping(PutMappingRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously updates the mappings on an index using the Put Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html\\'>",
          "+     * Put Mapping API on elastic.co</a>",
          "+     * @param putMappingRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #putMappingAsync(PutMappingRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The method",
          "+     * {@link #getFieldMapping(GetFieldMappingsRequest, RequestOptions)} should be used instead, which accepts a new request object.",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #getFieldMappingAsync(GetFieldMappingsRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+    /**",
          "+     * Retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+    /**",
          "+     * Asynchronously retrieves the field mappings on an index or indices using the Get Field Mapping API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html\\'>",
          "+     * Get Field Mapping API on elastic.co</a>",
          "+     * @param getFieldMappingsRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to enable",
          "+     * @return {@code true} if the request succeeded (the user is enabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Enable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to enable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user to disable",
          "+     * @return {@code true} if the request succeeded (the user is disabled)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead",
          "+    /**",
          "+     * Disable a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user to disable",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user synchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request the request with the user's new password",
          "+     * @return {@code true} if the request succeeded (the new password was set)",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     */",
          "+     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead",
          "+    /**",
          "+     * Change the password of a user of a native realm or built-in user asynchronously.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html\\'>",
          "+     * the docs</a> for more.",
          "+     *",
          "+     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param request  the request with the user's new password",
          "+     * @param listener the listener to be notified upon request completion",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A {@link LifecycleAction} which sets the index's priority. The higher the priority, the faster the recovery.",
          "+ */",
          "+    //package private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Request the mappings of specific fields */",
          "+    /**",
          "+     * Indicate whether the receiving node should operate based on local index information or forward requests,",
          "+     * where needed, to other nodes. If running locally, request will not raise errors if running locally &amp; missing indices.",
          "+     */",
          "+    /** @param fields a list of fields to retrieve the mapping for */",
          "+    /** Indicates whether default mapping settings should be returned */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/** Response object for {@link GetFieldMappingsRequest} API */",
          "+     /**",
          "+     * Returns the fields mapping. The return map keys are indexes and fields (as specified in the request).",
          "+     */",
          "+    /**",
          "+     * Returns the mappings of a specific index and field.",
          "+     *",
          "+     * @param field field name as specified in the {@link GetFieldMappingsRequest}",
          "+     * @return FieldMappingMetaData for the requested field or null if not found.",
          "+     */",
          "+        /**",
          "+         * Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}.",
          "+         */",
          "+        //pkg-private for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Put a mapping definition into one or more indices. If an index already contains mappings,",
          "+ * the new mappings will be merged with the existing one. If there are elements that cannot",
          "+ * be merged, the request will be rejected.",
          "+ */",
          "+    /**",
          "+     * Constructs a new put mapping request against one or more indices. If no indices",
          "+     * are provided then it will be executed against all indices.",
          "+     */",
          "+    /**",
          "+     * The indices into which the mappings will be put.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     */",
          "+    /**",
          "+     * The {@link XContentType} of the mapping source.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * The mapping source definition.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * True if the privileges cover restricted internal indices too. Certain indices are reserved for internal services and should be",
          "+     * transparent to ordinary users. For that matter, when granting privileges, you also have to toggle this flag to confirm that all",
          "+     * indices, including restricted ones, are in the scope of this permission. By default this is false.",
          "+     */",
          "+                //we convert all the method names to snake case, hence we need to look for the '_async' suffix rather than 'Async'",
          "+                            //TODO xpack api are currently ignored, we need to load xpack yaml spec too",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // This is no longer true for all methods. Some methods can contain these 2 args backwards because of deprecation",
          "+            // Create leader index:",
          "+            // Follow index, so that we can query for follow stats:",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // allow random fields at the level of `index` and `index.mappings.field`",
          "+        // otherwise random field could be evaluated as index name or type name",
          "+        // if mappings is empty, means that fields are not found",
          "+    // As the client class GetFieldMappingsResponse doesn't have toXContent method, adding this method here only for the test",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // if the original `source` is null, the parsed source should be so too",
          "+            //metadata is a series of kv pairs, so we dont want to add random fields here for test equality",
          "+        // This sub object should support unknown fields, but metadata cannot contain complex extra objects or it will fail",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // This may have extra json, so lets just assume that if all of the original fields from the creation are there, then its equal",
          "+        // This is the same code that is in createTestInstance in this class.",
          "+        // EMPTY is safe here because we never use namedObject",
          "+ * An class for interfacing with java.nio. Implementations implement the underlying logic for opening",
          "+ * channels and registering them with the OS.",
          "+     * Opens and binds a server channel to accept incoming connections.",
          "+     * Opens a outgoing client channel.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * The NioSelectorGroup is a group of selectors for interfacing with java nio. When it is started it will create the",
          "+ * configured number of selectors. Each selector will be running in a dedicated thread. Server connections",
          "+ * can be bound using the {@link #bindServerChannel(InetSocketAddress, ChannelFactory)} method. Client",
          "+ * connections can be opened using the {@link #openChannel(InetSocketAddress, ChannelFactory)} method.",
          "+ * <p>",
          "+ * The logic specific to a particular channel is provided by the {@link ChannelFactory} passed to the method",
          "+ * when the channel is created. This is what allows an NioSelectorGroup to support different channel types.",
          "+ */",
          "+    /**",
          "+     * This will create an NioSelectorGroup with no dedicated acceptors. All server channels will be handled by the",
          "+     * same selectors that are handling child channels.",
          "+     *",
          "+     * @param threadFactory factory to create selector threads",
          "+     * @param selectorCount the number of selectors to be created",
          "+     * @param eventHandlerFunction function for creating event handlers",
          "+     * @throws IOException occurs if there is a problem while opening a java.nio.Selector",
          "+     */",
          "+    /**",
          "+     * This will create an NioSelectorGroup with dedicated acceptors. All server channels will be handled by a group",
          "+     * of selectors dedicated to accepting channels. These accepted channels will be handed off the",
          "+     * non-server selectors.",
          "+     *",
          "+     * @param acceptorThreadFactory factory to create acceptor selector threads",
          "+     * @param dedicatedAcceptorCount the number of dedicated acceptor selectors to be created",
          "+     * @param selectorThreadFactory factory to create non-acceptor selector threads",
          "+     * @param selectorCount the number of non-acceptor selectors to be created",
          "+     * @param eventHandlerFunction function for creating event handlers",
          "+     * @throws IOException occurs if there is a problem while opening a java.nio.Selector",
          "+     */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the MatrixStats package",
          "+ */",
          "+/**",
          "+ * Counterpart to {@link org.elasticsearch.search.aggregations.support.AggregationInspectionHelper}, providing",
          "+ * helpers for some aggs in the Join package",
          "+ */"
        ]
      },
      "'49ea80ff92b8fdeda8de39c5c292393691b5c576'": {
        "cm": "'Address PR comment'",
        "comments": []
      },
      "'0d230f3a44047d6fcff253941a359495184e2c33'": {
        "cm": "'Merge branch 'master' into issue#36318'",
        "comments": [
          "+            // some test projects don't have a main source set",
          "+            // conventions are not honored when the tasks are disabled",
          "+    /**",
          "+     * Creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @return the response",
          "+     * @throws IOException in case there is a problem sending the request or parsing back the response",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #create(CreateIndexRequest, RequestOptions)} should be used instead, which accepts a new",
          "+     * request object.",
          "+     */",
          "+    /**",
          "+     * Asynchronously creates an index using the Create Index API.",
          "+     * See <a href=\\'https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\\'>",
          "+     * Create Index API on elastic.co</a>",
          "+     * @param createIndexRequest the request",
          "+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized",
          "+     * @param listener the listener to be notified upon request completion",
          "+     *",
          "+     * @deprecated This method uses an old request object which still refers to types, a deprecated feature. The",
          "+     * method {@link #createAsync(CreateIndexRequest, RequestOptions, ActionListener)} should be used instead,",
          "+     * which accepts a new request object.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A request to create an index.",
          "+ */",
          "+    /**",
          "+     * Constructs a new request to create an index with the specified name.",
          "+     */",
          "+    /**",
          "+     * The name of the index to create.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json or yaml format)",
          "+     */",
          "+    /**",
          "+     * Allows to set the settings using a json builder.",
          "+     */",
          "+    /**",
          "+     * The settings to create the index with (either json/yaml/properties format)",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType The content type of the source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     */",
          "+    /**",
          "+     * Adds mapping that will be added when the index gets created.",
          "+     *",
          "+     * Note that the definition should *not* be nested under a type name.",
          "+     *",
          "+     * @param source The mapping source",
          "+     * @param xContentType the content type of the mapping source",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the aliases that will be associated with the index when it gets created",
          "+     */",
          "+        // EMPTY is safe here because we never call namedObject",
          "+            //move to the first alias",
          "+    /**",
          "+     * Adds an alias that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Adds aliases that will be associated with the index when it gets created",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the settings and mappings as a single source.",
          "+     *",
          "+     * Note that the mapping definition should *not* be nested under a type name.",
          "+     */",
          "+    /**",
          "+     * Sets the number of shard copies that should be active for index creation to return.",
          "+     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy",
          "+     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to",
          "+     * wait for all shards (primary and all replicas) to be active before returning.",
          "+     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any",
          "+     * non-negative integer, up to the number of copies per shard (number of replicas + 1),",
          "+     * to wait for the desired amount of shard copies to become active before returning.",
          "+     * Index creation will only wait up until the timeout value for the number of shard copies",
          "+     * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to",
          "+     * determine if the requisite shard copies were all started before returning or timing out.",
          "+     *",
          "+     * @param waitForActiveShards number of active shard copies to wait on",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A response for a create index action.",
          "+ */",
          "+            // Create index",
          "+            // Create index with mappings, aliases and settings",
          "+            // 23 system roles plus the three we created",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+                    // As Alias#equals only looks at name, we check the equality of the other Alias parameters here.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns a random {@link CreateIndexRequest}.",
          "+     *",
          "+     * Randomizes the index name, the aliases, mappings and settings associated with the",
          "+     * index. When present, the mappings make no mention of types.",
          "+     */",
          "+            // Create a random server request, and copy its contents into the HLRC request.",
          "+            // Because client requests only accept typeless mappings, we must swap out the",
          "+            // mapping definition for one that does not contain types.",
          "+    /**",
          "+     * Creates a random mapping, with no mention of types.",
          "+     */",
          "+            /*",
          "+             * case when fewer nodeTuple than blacklist, wont result in any IllegalCapacityException",
          "+             */",
          "+            // in case you are wondering why we do not call 'DateFormatter.forPattern(format)' for all cases here, but only for the",
          "+            // non java time case:",
          "+            // When the joda date formatter parses a date then a year is always set, so that no fallback can be used, like",
          "+            // done in the JodaDateFormatter.withYear() code below",
          "+            // This means that we leave the existing parsing logic in place, but will fall back to the new java date parsing logic, if an",
          "+            // \\'8\\' is prepended to the date format string",
          "+ * This meta field only exists because rank feature fields index everything into a",
          "+ * Query to run on a [rank_feature] field.",
          "+     * Scoring function for a [rank_feature] field.",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * A validator that validates a {@link PutMappingRequest} before executing it.",
          "+ * @see TransportPutMappingAction.RequestValidators",
          "+ */",
          "+    /**",
          "+     * Validates a given put mapping request with its associated concrete indices and the current state.",
          "+     *",
          "+     * @param request the request to validate",
          "+     * @param state   the current cluster state",
          "+     * @param indices the concrete indices that associated with the given put mapping request",
          "+     * @return a non-null exception indicates a reason that the given request should be aborted; otherwise returns null.",
          "+     */",
          "+        // reserve \\'null\\' for bwc.",
          "+            // total hits is null in the response if the tracking of total hits is disabled",
          "+            // no matter what the value of track_total_hits is",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Update mappings on the master node, waiting for the change to be committed,",
          "+     * but not for the mapping update to be applied on all nodes. The timeout specified by",
          "+     * {@code timeout} is the master node timeout ({@link MasterNodeRequest#masterNodeTimeout()}),",
          "+     * potentially waiting for a master node to be available.",
          "+    // package private for tests",
          "+        // validate the join on the joining node, will throw a failure if it fails the validation",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+// NodeToolCli does not extend LoggingAwareCommand, because LoggingAwareCommand performs logging initialization",
          "+// after LoggingAwareCommand instance is constructed.",
          "+// It's too late for us, because before UnsafeBootstrapMasterCommand is added to the list of subcommands",
          "+// log4j2 initialization will happen, because it has static reference to Logger class.",
          "+// Even if we avoid making a static reference to Logger class, there is no nice way to avoid declaring",
          "+// UNSAFE_BOOTSTRAP, which depends on ClusterService, which in turn has static Logger.",
          "+// TODO execute CommandLoggingConfigurator.configureLoggingWithoutConfig() in the constructor of commands, not in beforeMain",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        // nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency",
          "+    /**",
          "+     * Reads an optional {@link Integer}.",
          "+     */",
          "+    /**",
          "+     * Writes an optional {@link Integer}.",
          "+     */",
          "+                    // use a linked hash set to preserve order",
          "+                // preserve insertion order",
          "+                        // Flatten multipoints",
          "+            // write a snapshot of current time, which is not per se the time field",
          "+    /**",
          "+     * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to",
          "+     * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.",
          "+     */",
          "+    /**",
          "+     * @deprecated declare your own logger.",
          "+     */",
          "+     * Modify the search request to accurately count the total hits that match the query",
          "+     * if {@link #TOTAL_HITS_AS_INT_PARAM} is set.",
          "+     *",
          "+     * @throws IllegalArgumentException if {@link #TOTAL_HITS_AS_INT_PARAM}",
          "+     * is used in conjunction with a lower bound value (other than {@link SearchContext#DEFAULT_TRACK_TOTAL_HITS_UP_TO})",
          "+     * for the track_total_hits option.",
          "+     * Create a new {@link InternalGeoHashGrid} aggregation with the given name.",
          "+    /**",
          "+     * Returns null if the provided factory and his parents are compatible with",
          "+     * this aggregator or the instance of the parent's factory that is incompatible with",
          "+     * the composite aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+        //different GeoPoints could map to the same or different hashing cells.",
          "+    /**",
          "+     * The encoder to use to convert a geopoint's (lon, lat, precision) into",
          "+     * a long-encoded bucket key for aggregating.",
          "+     */",
          "+ * A geo-grid aggregation. Defines multiple buckets, each representing a cell in a geo-grid of a specific",
          "+     * A bucket that is associated with a geo-grid cell. The key of the bucket is",
          "+     * the {@link InternalGeoGridBucket#getKeyAsString()} of the cell",
          "+     * @return The buckets of this aggregation (each bucket representing a geo-grid cell)",
          "+    /* recognized field names in JSON */",
          "+    /**",
          "+     * method to validate and set the precision value",
          "+     * @param precision the precision to set for the aggregation",
          "+     * @return the {@link GeoGridAggregationBuilder} builder",
          "+     */",
          "+    /**",
          "+     * Creates a new instance of the {@link ValuesSourceAggregatorFactory}-derived class specific to the geo aggregation.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Aggregates data expressed as longs (for efficiency's sake) but formats results as aggregation-specific strings.",
          "+ */",
          "+    // private impl that stores a bucket ord. This allows for computing the aggregations lazily.",
          "+            // this is done because the aggregator may be rebuilt from cache (non OrdinalBucket),",
          "+            // or it may be rebuilding from a new calculation, and therefore copying bucketOrd.",
          "+    /**",
          "+     * This method is used to return a re-usable instance of the bucket when building",
          "+     * the aggregation.",
          "+     * @return a new {@link InternalGeoGridBucket} implementation with empty parameters",
          "+     */",
          "+            // need a special function to keep the source bucket",
          "+            // up-to-date so it can get the appropriate key",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/**",
          "+ * Represents a grid of cells where each cell's location is determined by a specific geo hashing algorithm.",
          "+ * All geo-grid hash-encoding in a grid are of the same precision and held internally as a single long",
          "+ * for efficiency's sake.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+    // package protected for testing",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Read from a stream.",
          "+     */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Returns the total hit count that should be tracked or null if the value is unset.",
          "+     * Defaults to null.",
          "+     */",
          "+    /**",
          "+     * Returns true if this collector has early terminated.",
          "+     */",
          "+ * An exception that remote cluster is missing or",
          "+ * connectivity to the remote connection is failing",
          "+        //No node available for cluster",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+            // Existent shard id but different allocation id",
          "+            // Non existent shard id",
          "+                            // override this method as it does blocking calls",
          "+                //transportService.stop(); // does blocking stuff :/",
          "+                //transportService.close(); // does blocking stuff :/",
          "+                    // apply cluster state, but don't notify listener",
          "+                        // ignore result",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */",
          "+    /**",
          "+     * Performs cluster bootstrap when node with id bootstrapNodeId is started.",
          "+     * Any node of the batch could be selected as bootstrap target.",
          "+     */",
          "+        // client() also starts the node",
          "+        // build settings using same path.data as original but with node.data=false and node.master=false",
          "+        // test that we can create data=false and master=false with no meta information",
          "+        // test that we can create data=false env with only meta information. Also create shard data for following asserts",
          "+        // assert that we get the stricter message on meta-data when both conditions fail",
          "+        // build settings using same path.data as original but with node.master=false",
          "+        // test that we can create master=false env regardless of data.",
          "+        // test that we can create data=true, master=true env. Also remove state dir to leave only shard data for following asserts",
          "+        // assert that we fail on shard data even without the metadata dir.",
          "+        // index another document, this time using dynamic mappings.",
          "+        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even",
          "+        // if the dynamic mapping update is not applied on the replica yet.",
          "+        // ...and wait for second mapping to be available on master",
          "+/*",
          "+ * Licensed to Elasticsearch under one or more contributor",
          "+ * license agreements. See the NOTICE file distributed with",
          "+ * this work for additional information regarding copyright",
          "+ * ownership. Elasticsearch licenses this file to you under",
          "+ * the Apache License, Version 2.0 (the \\'License\\'); you may",
          "+ * not use this file except in compliance with the License.",
          "+ * You may obtain a copy of the License at",
          "+ *",
          "+ *    http://www.apache.org/licenses/LICENSE-2.0",
          "+ *",
          "+ * Unless required by applicable law or agreed to in writing,",
          "+ * software distributed under the License is distributed on an",
          "+ * \\'AS IS\\' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "+ * KIND, either express or implied.  See the License for the",
          "+ * specific language governing permissions and limitations",
          "+ * under the License.",
          "+ */"
        ]
      }
    }
  }
}
